[
[7,"CAP_AUDIT_CONTROL","(since Linux 2.6.11)  \nEnable and disable kernel auditing; change auditing filter  \nrules; retrieve auditing status and filtering rules."],
[7,"CAP_AUDIT_READ","(since Linux 3.16)  \nAllow reading the audit log via a multicast netlink  \nsocket."],
[7,"CAP_AUDIT_WRITE","(since Linux 2.6.11)  \nWrite records to kernel auditing log."],
[7,"CAP_BLOCK_SUSPEND","(since Linux 3.5)  \nEmploy features that can block system suspend ([epoll(7)](../man7/epoll.7.html)  \n**EPOLLWAKEUP**, _/proc/sys/wake\\_lock_)."],
[7,"CAP_BPF","(since Linux 5.8)  \nEmploy privileged BPF operations; see [bpf(2)](../man2/bpf.2.html) and  \n[bpf-helpers(7)](../man7/bpf-helpers.7.html).  \nThis capability was added in Linux 5.8 to separate out BPF  \nfunctionality from the overloaded **CAP\\_SYS\\_ADMIN**  \ncapability."],
[7,"CAP_CHECKPOINT_RESTORE","(since Linux 5.9)  \n• Update _/proc/sys/kernel/ns\\_last\\_pid_ (see  \n[pid\\_namespaces(7)](../man7/pid_namespaces.7.html));  \n• employ the _set\\_tid_ feature of [clone3(2)](../man2/clone3.2.html);  \n• read the contents of the symbolic links in  \n_/proc/_pid_/map\\_files_ for other processes.  \nThis capability was added in Linux 5.9 to separate out  \ncheckpoint/restore functionality from the overloaded  \n**CAP\\_SYS\\_ADMIN** capability."],
[7,"CAP_CHOWN","Make arbitrary changes to file UIDs and GIDs (see  \n[chown(2)](../man2/chown.2.html))."],
[7,"CAP_DAC_OVERRIDE","Bypass file read, write, and execute permission checks.  \n(DAC is an abbreviation of \"discretionary access  \ncontrol\".)"],
[7,"CAP_DAC_READ_SEARCH","• Bypass file read permission checks and directory read  \nand execute permission checks;  \n• invoke [open\\_by\\_handle\\_at(2)](../man2/open_by_handle_at.2.html);  \n• use the [linkat(2)](../man2/linkat.2.html) **AT\\_EMPTY\\_PATH** flag to create a link  \nto a file referred to by a file descriptor."],
[7,"CAP_FOWNER","• Bypass permission checks on operations that normally  \nrequire the filesystem UID of the process to match the  \nUID of the file (e.g., [chmod(2)](../man2/chmod.2.html), [utime(2)](../man2/utime.2.html)), excluding  \nthose operations covered by **CAP\\_DAC\\_OVERRIDE** and  \n**CAP\\_DAC\\_READ\\_SEARCH**;  \n• set inode flags (see [FS\\_IOC\\_SETFLAGS(2const)](../man2/FS_IOC_SETFLAGS.2const.html)) on  \narbitrary files;  \n• set Access Control Lists (ACLs) on arbitrary files;  \n• ignore directory sticky bit on file deletion;  \n• modify _user_ extended attributes on sticky directory  \nowned by any user;  \n• specify **O\\_NOATIME** for arbitrary files in [open(2)](../man2/open.2.html) and  \n[fcntl(2)](../man2/fcntl.2.html)."],
[7,"CAP_FSETID","• Don't clear set-user-ID and set-group-ID mode bits when  \na file is modified;  \n• set the set-group-ID bit for a file whose GID does not  \nmatch the filesystem or any of the supplementary GIDs  \nof the calling process."],
[7,"CAP_IPC_LOCK","• Lock memory ([mlock(2)](../man2/mlock.2.html), [mlockall(2)](../man2/mlockall.2.html), [mmap(2)](../man2/mmap.2.html),  \n[shmctl(2)](../man2/shmctl.2.html));  \n• Allocate memory using huge pages ([memfd\\_create(2)](../man2/memfd_create.2.html),  \n[mmap(2)](../man2/mmap.2.html), [shmctl(2)](../man2/shmctl.2.html))."],
[7,"CAP_IPC_OWNER","Bypass permission checks for operations on System V IPC  \nobjects."],
[7,"CAP_KILL","Bypass permission checks for sending signals (see  \n[kill(2)](../man2/kill.2.html)). This includes use of the [ioctl(2)](../man2/ioctl.2.html) **KDSIGACCEPT**  \noperation."],
[7,"CAP_LEASE","(since Linux 2.4)  \nEstablish leases on arbitrary files (see [fcntl(2)](../man2/fcntl.2.html))."],
[7,"CAP_LINUX_IMMUTABLE","Set the **FS\\_APPEND\\_FL** and **FS\\_IMMUTABLE\\_FL** inode flags (see  \n[FS\\_IOC\\_SETFLAGS(2const)](../man2/FS_IOC_SETFLAGS.2const.html))."],
[7,"CAP_MAC_ADMIN","(since Linux 2.6.25)  \nAllow MAC configuration or state changes. Implemented for  \nthe Smack Linux Security Module (LSM)."],
[7,"CAP_MAC_OVERRIDE","(since Linux 2.6.25)  \nOverride Mandatory Access Control (MAC). Implemented for  \nthe Smack LSM."],
[7,"CAP_MKNOD","(since Linux 2.4)  \nCreate special files using [mknod(2)](../man2/mknod.2.html)."],
[7,"CAP_NET_ADMIN","Perform various network-related operations:  \n• interface configuration;  \n• administration of IP firewall, masquerading, and  \naccounting;  \n• modify routing tables;  \n• bind to any address for transparent proxying;  \n• set type-of-service (TOS);  \n• clear driver statistics;  \n• set promiscuous mode;  \n• enabling multicasting;  \n• use [setsockopt(2)](../man2/setsockopt.2.html) to set the following socket options:  \n**SO\\_DEBUG**, **SO\\_MARK**, **SO\\_PRIORITY** (for a priority outside  \nthe range 0 to 6), **SO\\_RCVBUFFORCE**, and **SO\\_SNDBUFFORCE**."],
[7,"CAP_NET_BIND_SERVICE","Bind a socket to Internet domain privileged ports (port  \nnumbers less than 1024)."],
[7,"CAP_NET_BROADCAST","(Unused) Make socket broadcasts, and listen to  \nmulticasts."],
[7,"CAP_NET_RAW","• Use RAW and PACKET sockets;  \n• bind to any address for transparent proxying."],
[7,"CAP_PERFMON","(since Linux 5.8)  \nEmploy various performance-monitoring mechanisms,  \nincluding:  \n• call [perf\\_event\\_open(2)](../man2/perf_event_open.2.html);  \n• employ various BPF operations that have performance  \nimplications.  \nThis capability was added in Linux 5.8 to separate out  \nperformance monitoring functionality from the overloaded  \n**CAP\\_SYS\\_ADMIN** capability. See also the kernel source file  \n_Documentation/admin-guide/perf-security.rst_."],
[7,"CAP_SETFCAP","(since Linux 2.6.24)  \nSet arbitrary capabilities on a file.  \nSince Linux 5.12, this capability is also needed to map  \nuser ID 0 in a new user namespace; see [user\\_namespaces(7)](../man7/user_namespaces.7.html)  \nfor details."],
[7,"CAP_SETGID","• Make arbitrary manipulations of process GIDs and  \nsupplementary GID list;  \n• forge GID when passing socket credentials via UNIX  \ndomain sockets;  \n• write a group ID mapping in a user namespace (see  \n[user\\_namespaces(7)](../man7/user_namespaces.7.html))."],
[7,"CAP_SETPCAP","If file capabilities are supported (i.e., since Linux  \n2.6.24): add any capability from the calling thread's  \nbounding set to its inheritable set; drop capabilities  \nfrom the bounding set (via [prctl(2)](../man2/prctl.2.html) **PR\\_CAPBSET\\_DROP**); make  \nchanges to the _securebits_ flags.  \nIf file capabilities are not supported (i.e., before Linux  \n2.6.24): grant or remove any capability in the caller's  \npermitted capability set to or from any other process.  \n(This property of **CAP\\_SETPCAP** is not available when the  \nkernel is configured to support file capabilities, since  \n**CAP\\_SETPCAP** has entirely different semantics for such  \nkernels.)"],
[7,"CAP_SETUID","• Make arbitrary manipulations of process UIDs  \n([setuid(2)](../man2/setuid.2.html), [setreuid(2)](../man2/setreuid.2.html), [setresuid(2)](../man2/setresuid.2.html), [setfsuid(2)](../man2/setfsuid.2.html));  \n• forge UID when passing socket credentials via UNIX  \ndomain sockets;  \n• write a user ID mapping in a user namespace (see  \n[user\\_namespaces(7)](../man7/user_namespaces.7.html))."],
[7,"CAP_SYS_ADMIN","_Note_: this capability is overloaded; see _Notes to kernel_  \n_developers_ below.  \n• Perform a range of system administration operations  \nincluding: [quotactl(2)](../man2/quotactl.2.html), [mount(2)](../man2/mount.2.html), [umount(2)](../man2/umount.2.html),  \n[pivot\\_root(2)](../man2/pivot_root.2.html), [swapon(2)](../man2/swapon.2.html), [swapoff(2)](../man2/swapoff.2.html), [sethostname(2)](../man2/sethostname.2.html),  \nand [setdomainname(2)](../man2/setdomainname.2.html);  \n• perform privileged [syslog(2)](../man2/syslog.2.html) operations (since Linux  \n2.6.37, **CAP\\_SYSLOG** should be used to permit such  \noperations);  \n• perform **VM86\\_REQUEST\\_IRQ vm86**(2) command;  \n• access the same checkpoint/restore functionality that  \nis governed by **CAP\\_CHECKPOINT\\_RESTORE** (but the latter,  \nweaker capability is preferred for accessing that  \nfunctionality).  \n• perform the same BPF operations as are governed by  \n**CAP\\_BPF** (but the latter, weaker capability is preferred  \nfor accessing that functionality).  \n• employ the same performance monitoring mechanisms as  \nare governed by **CAP\\_PERFMON** (but the latter, weaker  \ncapability is preferred for accessing that  \nfunctionality).  \n• perform **IPC\\_SET** and **IPC\\_RMID** operations on arbitrary  \nSystem V IPC objects;  \n• override **RLIMIT\\_NPROC** resource limit;  \n• perform operations on _trusted_ and _security_ extended  \nattributes (see [xattr(7)](../man7/xattr.7.html));  \n• use [lookup\\_dcookie(2)](../man2/lookup_dcookie.2.html);  \n• use [ioprio\\_set(2)](../man2/ioprio_set.2.html) to assign **IOPRIO\\_CLASS\\_RT** and (before  \nLinux 2.6.25) **IOPRIO\\_CLASS\\_IDLE** I/O scheduling classes;  \n• forge PID when passing socket credentials via UNIX  \ndomain sockets;  \n• exceed _/proc/sys/fs/file-max_, the system-wide limit on  \nthe number of open files, in system calls that open  \nfiles (e.g., [accept(2)](../man2/accept.2.html), [execve(2)](../man2/execve.2.html), [open(2)](../man2/open.2.html), [pipe(2)](../man2/pipe.2.html));  \n• employ **CLONE\\_\\*** flags that create new namespaces with  \n[clone(2)](../man2/clone.2.html) and [unshare(2)](../man2/unshare.2.html) (but, since Linux 3.8, creating  \nuser namespaces does not require any capability);  \n• access privileged _perf_ event information;  \n• call [setns(2)](../man2/setns.2.html) (requires **CAP\\_SYS\\_ADMIN** in the _target_  \nnamespace);  \n• call [fanotify\\_init(2)](../man2/fanotify_init.2.html);  \n• perform privileged **KEYCTL\\_CHOWN** and **KEYCTL\\_SETPERM**  \n[keyctl(2)](../man2/keyctl.2.html) operations;  \n• perform [madvise(2)](../man2/madvise.2.html) **MADV\\_HWPOISON** operation;  \n• employ the **TIOCSTI ioctl**(2) to insert characters into  \nthe input queue of a terminal other than the caller's  \ncontrolling terminal;  \n• employ the obsolete [nfsservctl(2)](../man2/nfsservctl.2.html) system call;  \n• employ the obsolete [bdflush(2)](../man2/bdflush.2.html) system call;  \n• perform various privileged block-device [ioctl(2)](../man2/ioctl.2.html)  \noperations;  \n• perform various privileged filesystem [ioctl(2)](../man2/ioctl.2.html)  \noperations;  \n• perform privileged [ioctl(2)](../man2/ioctl.2.html) operations on the  \n_/dev/random_ device (see [random(4)](../man4/random.4.html));  \n• install a [seccomp(2)](../man2/seccomp.2.html) filter without first having to set  \nthe _no\\_new\\_privs_ thread attribute;  \n• modify allow/deny rules for device control groups;  \n• employ the [ptrace(2)](../man2/ptrace.2.html) **PTRACE\\_SECCOMP\\_GET\\_FILTER**  \noperation to dump tracee's seccomp filters;  \n• employ the [ptrace(2)](../man2/ptrace.2.html) **PTRACE\\_SETOPTIONS** operation to  \nsuspend the tracee's seccomp protections (i.e., the  \n**PTRACE\\_O\\_SUSPEND\\_SECCOMP** flag);  \n• perform administrative operations on many device  \ndrivers;  \n• modify autogroup nice values by writing to  \n_/proc/_pid_/autogroup_ (see [sched(7)](../man7/sched.7.html))."],
[7,"CAP_SYS_BOOT","Use [reboot(2)](../man2/reboot.2.html) and [kexec\\_load(2)](../man2/kexec_load.2.html)."],
[7,"CAP_SYS_CHROOT","• Use [chroot(2)](../man2/chroot.2.html);  \n• change mount namespaces using [setns(2)](../man2/setns.2.html)."],
[7,"CAP_SYS_MODULE","• Load and unload kernel modules (see [init\\_module(2)](../man2/init_module.2.html) and  \n[delete\\_module(2)](../man2/delete_module.2.html));  \n• before Linux 2.6.25: drop capabilities from the system-  \nwide capability bounding set."],
[7,"CAP_SYS_NICE","• Lower the process nice value ([nice(2)](../man2/nice.2.html), [setpriority(2)](../man2/setpriority.2.html))  \nand change the nice value for arbitrary processes;  \n• set real-time scheduling policies for calling process,  \nand set scheduling policies and priorities for  \narbitrary processes ([sched\\_setscheduler(2)](../man2/sched_setscheduler.2.html),  \n[sched\\_setparam(2)](../man2/sched_setparam.2.html), [sched\\_setattr(2)](../man2/sched_setattr.2.html));  \n• set CPU affinity for arbitrary processes  \n([sched\\_setaffinity(2)](../man2/sched_setaffinity.2.html));  \n• set I/O scheduling class and priority for arbitrary  \nprocesses ([ioprio\\_set(2)](../man2/ioprio_set.2.html));  \n• apply [migrate\\_pages(2)](../man2/migrate_pages.2.html) to arbitrary processes and allow  \nprocesses to be migrated to arbitrary nodes;  \n• apply [move\\_pages(2)](../man2/move_pages.2.html) to arbitrary processes;  \n• use the **MPOL\\_MF\\_MOVE\\_ALL** flag with [mbind(2)](../man2/mbind.2.html) and  \n[move\\_pages(2)](../man2/move_pages.2.html)."],
[7,"CAP_SYS_PACCT","Use [acct(2)](../man2/acct.2.html)."],
[7,"CAP_SYS_PTRACE","• Trace arbitrary processes using [ptrace(2)](../man2/ptrace.2.html);  \n• apply [get\\_robust\\_list(2)](../man2/get_robust_list.2.html) to arbitrary processes;  \n• transfer data to or from the memory of arbitrary  \nprocesses using [process\\_vm\\_readv(2)](../man2/process_vm_readv.2.html) and  \n[process\\_vm\\_writev(2)](../man2/process_vm_writev.2.html);  \n• inspect processes using [kcmp(2)](../man2/kcmp.2.html)."],
[7,"CAP_SYS_RAWIO","• Perform I/O port operations ([iopl(2)](../man2/iopl.2.html) and [ioperm(2)](../man2/ioperm.2.html));  \n• access _/proc/kcore_;  \n• employ the **FIBMAP ioctl**(2) operation;  \n• open devices for accessing x86 model-specific registers  \n(MSRs, see [msr(4)](../man4/msr.4.html));  \n• update _/proc/sys/vm/mmap\\_min\\_addr_;  \n• create memory mappings at addresses below the value  \nspecified by _/proc/sys/vm/mmap\\_min\\_addr_;  \n• map files in _/proc/bus/pci_;  \n• open _/dev/mem_ and _/dev/kmem_;  \n• perform various SCSI device commands;  \n• perform certain operations on [hpsa(4)](../man4/hpsa.4.html) and [cciss(4)](../man4/cciss.4.html)  \ndevices;  \n• perform a range of device-specific operations on other  \ndevices."],
[7,"CAP_SYS_RESOURCE","• Use reserved space on ext2 filesystems;  \n• make [ioctl(2)](../man2/ioctl.2.html) calls controlling ext3 journaling;  \n• override disk quota limits;  \n• increase resource limits (see [setrlimit(2)](../man2/setrlimit.2.html));  \n• override **RLIMIT\\_NPROC** resource limit;  \n• override maximum number of consoles on console  \nallocation;  \n• override maximum number of keymaps;  \n• allow more than 64hz interrupts from the real-time  \nclock;  \n• raise _msg\\_qbytes_ limit for a System V message queue  \nabove the limit in _/proc/sys/kernel/msgmnb_ (see  \n[msgop(2)](../man2/msgop.2.html) and [msgctl(2)](../man2/msgctl.2.html));  \n• allow the **RLIMIT\\_NOFILE** resource limit on the number of  \n\"in-flight\" file descriptors to be bypassed when  \npassing file descriptors to another process via a UNIX  \ndomain socket (see [unix(7)](../man7/unix.7.html));  \n• override the _/proc/sys/fs/pipe-size-max_ limit when  \nsetting the capacity of a pipe using the **F\\_SETPIPE\\_SZ**  \n[fcntl(2)](../man2/fcntl.2.html) command;  \n• use **F\\_SETPIPE\\_SZ** to increase the capacity of a pipe  \nabove the limit specified by  \n_/proc/sys/fs/pipe-max-size_;  \n• override _/proc/sys/fs/mqueue/queues\\_max_,  \n_/proc/sys/fs/mqueue/msg\\_max_, and  \n_/proc/sys/fs/mqueue/msgsize\\_max_ limits when creating  \nPOSIX message queues (see [mq\\_overview(7)](../man7/mq_overview.7.html));  \n• employ the [prctl(2)](../man2/prctl.2.html) **PR\\_SET\\_MM** operation;  \n• set _/proc/_pid_/oom\\_score\\_adj_ to a value lower than the  \nvalue last set by a process with **CAP\\_SYS\\_RESOURCE**."],
[7,"CAP_SYS_TIME","Set system clock ([settimeofday(2)](../man2/settimeofday.2.html), [stime(2)](../man2/stime.2.html), [adjtimex(2)](../man2/adjtimex.2.html));  \nset real-time (hardware) clock."],
[7,"CAP_SYS_TTY_CONFIG","Use [vhangup(2)](../man2/vhangup.2.html); employ various privileged [ioctl(2)](../man2/ioctl.2.html)  \noperations on virtual terminals."],
[7,"CAP_SYSLOG","(since Linux 2.6.37)  \n• Perform privileged [syslog(2)](../man2/syslog.2.html) operations. See [syslog(2)](../man2/syslog.2.html)  \nfor information on which operations require privilege.  \n• View kernel addresses exposed via _/proc_ and other  \ninterfaces when _/proc/sys/kernel/kptr\\_restrict_ has the  \nvalue 1. (See the discussion of the _kptr\\_restrict_ in  \n[proc(5)](../man5/proc.5.html).)"],
[7,"CAP_WAKE_ALARM","(since Linux 3.0)  \nTrigger something that will wake up the system (set  \n**CLOCK\\_REALTIME\\_ALARM** and **CLOCK\\_BOOTTIME\\_ALARM** timers)."]
]