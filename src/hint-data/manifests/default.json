[
[5,"a","Architecture","A short string identifying the architecture of the local system. A string such as `x86`, `x86-64` or `arm64`. See the architectures defined for `ConditionArchitecture=` above for a full list."],
[5,"A","Operating system image version","The operating system image version identifier of the running system, as read from the `IMAGE_VERSION=` field of `/etc/os-release`. If not set, resolves to an empty string. See [os-release(5)](os-release.html) for more information."],
[5,"b","Boot ID","The boot ID of the running system, formatted as string. See [random(4)](https://man7.org/linux/man-pages/man4/random.4.html) for more information."],
[5,"B","Operating system build ID","The operating system build identifier of the running system, as read from the `BUILD_ID=` field of `/etc/os-release`. If not set, resolves to an empty string. See [os-release(5)](os-release.html) for more information."],
[5,"C","Cache directory root","This is either `/var/cache` (for the system manager) or the path \"`$XDG_CACHE_HOME`\" resolves to (for user managers)."],
[5,"d","Credentials directory","This is the value of the \"`$CREDENTIALS_DIRECTORY`\" environment variable if available. See section \"Credentials\" in [systemd.exec(5)](systemd.exec.html) for more information."],
[5,"E","Configuration directory root","This is either `/etc/` (for the system manager) or the path \"`$XDG_CONFIG_HOME`\" resolves to (for user managers)."],
[5,"f","Unescaped filename","This is either the unescaped instance name (if applicable) with `/` prepended (if applicable), or the unescaped prefix name prepended with `/`. This implements unescaping according to the rules for escaping absolute file system paths discussed above."],
[5,"g","User group","This is the name of the group running the service manager instance. In case of the system manager this resolves to \"`root`\"."],
[5,"G","User GID","This is the numeric GID of the user running the service manager instance. In case of the system manager this resolves to \"`0`\"."],
[5,"h","User home directory","This is the home directory of the _user running the service manager instance_. In case of the system manager this resolves to \"`/root`\". Note that this setting is _not_ influenced by the `User=` setting configurable in the \\[Service\\] section of the service unit."],
[5,"H","Host name","The hostname of the running system at the point in time the unit configuration is loaded."],
[5,"i","Instance name","For instantiated units this is the string between the first \"`@`\" character and the type suffix. Empty for non-instantiated units."],
[5,"I","Unescaped instance name","Same as \"`%i`\", but with escaping undone."],
[5,"j","Final component of the prefix","This is the string between the last \"`-`\" and the end of the prefix name. If there is no \"`-`\", this is the same as \"`%p`\"."],
[5,"J","Unescaped final component of the prefix","Same as \"`%j`\", but with escaping undone."],
[5,"l","Short host name","The hostname of the running system at the point in time the unit configuration is loaded, truncated at the first dot to remove any domain component."],
[5,"L","Log directory root","This is either `/var/log` (for the system manager) or the path `$XDG_STATE_HOME` resolves to with `/log` appended (for user managers)."],
[5,"m","Machine ID","The machine ID of the running system, formatted as string. See [machine-id(5)](machine-id.html) for more information."],
[5,"M","Operating system image identifier","The operating system image identifier of the running system, as read from the `IMAGE_ID=` field of `/etc/os-release`. If not set, resolves to an empty string. See [os-release(5)](os-release.html) for more information."],
[5,"n","Full unit name",""],
[5,"N","Full unit name","Same as \"`%n`\", but with the type suffix removed."],
[5,"o","Operating system ID","The operating system identifier of the running system, as read from the `ID=` field of `/etc/os-release`. See [os-release(5)](os-release.html) for more information."],
[5,"p","Prefix name","For instantiated units, this refers to the string before the first \"`@`\" character of the unit name. For non-instantiated units, same as \"`%N`\"."],
[5,"P","Unescaped prefix name","Same as \"`%p`\", but with escaping undone."],
[5,"q","Pretty host name","The pretty hostname of the running system at the point in time the unit configuration is loaded, as read from the `PRETTY_HOSTNAME=` field of `/etc/machine-info`. If not set, resolves to the short hostname. See [machine-info(5)](machine-info.html) for more information."],
[5,"s","User shell","This is the shell of the user running the service manager instance."],
[5,"S","State directory root","This is either `/var/lib` (for the system manager) or the path `$XDG_STATE_HOME` resolves to (for user managers)."],
[5,"t","Runtime directory root","This is either `/run/` (for the system manager) or the path \"`$XDG_RUNTIME_DIR`\" resolves to (for user managers)."],
[5,"T","Directory for temporary files","This is either `/tmp` or the path \"`$TMPDIR`\", \"`$TEMP`\" or \"`$TMP`\" are set to. (Note that the directory may be specified without a trailing slash.)"],
[5,"u","User name","This is the name of the _user running the service manager instance_. In case of the system manager this resolves to \"`root`\". Note that this setting is _not_ influenced by the `User=` setting configurable in the \\[Service\\] section of the service unit."],
[5,"U","User UID","This is the numeric UID of the _user running the service manager instance_. In case of the system manager this resolves to \"`0`\". Note that this setting is _not_ influenced by the `User=` setting configurable in the \\[Service\\] section of the service unit."],
[5,"v","Kernel release","Identical to **uname -r** output."],
[5,"V","Directory for larger and persistent temporary files","This is either `/var/tmp` or the path \"`$TMPDIR`\", \"`$TEMP`\" or \"`$TMP`\" are set to. (Note that the directory may be specified without a trailing slash.)"],
[5,"w","Operating system version ID","The operating system version identifier of the running system, as read from the `VERSION_ID=` field of `/etc/os-release`. If not set, resolves to an empty string. See [os-release(5)](os-release.html) for more information."],
[5,"W","Operating system variant ID","The operating system variant identifier of the running system, as read from the `VARIANT_ID=` field of `/etc/os-release`. If not set, resolves to an empty string. See [os-release(5)](os-release.html) for more information."],
[5,"y","The path to the fragment","This is the path where the main part of the unit file is located. For linked unit files, the real path outside of the unit search directories is used. For units that don't have a fragment file, this specifier will raise an error."],
[5,"Y","The directory of the fragment","This is the directory part of \"`%y`\"."],
[5,"%","Single percent sign","Use \"`%%`\" in place of \"`%`\" to specify a single percent sign."],
[3,2,"crypttab(5)","crypttab â€” Configuration for encrypted block devices","crypttab.html"],
[4,1,"Specifies the cipher to use. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values and the default value of this option. A cipher with unpredictable IV values, such as \"`aes-cbc-essiv:sha256`\", is recommended. Embedded commas in the cipher specification need to be escaped by preceding them with a backslash, see example below.","#cipher=",186],
[4,2,"Specifies the hash to use for password hashing. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values and the default value of this option.","#hash=",186],
[4,3,"Use a detached (separated) metadata device or file where the header containing the master key(s) is stored. This option is only relevant for LUKS and TrueCrypt/VeraCrypt devices. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values and the default value of this option.\n\nOptionally, the path may be followed by \"`:`\" and an `/etc/fstab` device specification (e.g. starting with \"`UUID=`\" or similar); in which case, the path is relative to the device file system root. The device gets mounted automatically for LUKS device activation duration only.","#header=",219],
[4,4,"Specifies the number of bytes to skip at the start of the key file. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values and the default value of this option.","#keyfile-offset=",187],
[4,5,"Specifies the maximum number of bytes to read from the key file. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values and the default value of this option. This option is ignored in plain encryption mode, as the key file size is then given by the key size.","#keyfile-size=",188],
[4,6,"Specifies the key slot to compare the passphrase or key against. If the key slot does not match the given passphrase or key, but another would, the setup of the device will fail regardless. This option implies `luks`. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values. The default is to try all key slots in sequential order.","#key-slot=",209],
[4,7,"Specifies the timeout for the device on which the key file resides or the device used as the key file, and falls back to a password if it could not be accessed. See [systemd-cryptsetup-generator(8)](systemd-cryptsetup-generator.html) for key files on external devices.","#keyfile-timeout=",243],
[4,8,"Start offset in the backend device, in 512-byte sectors. This option is only relevant for plain devices.","#offset=",220],
[4,9,"How many 512-byte sectors of the encrypted data to skip at the beginning. This is different from the `offset=` option with respect to the sector numbers used in initialization vector (IV) calculation. Using `offset=` will shift the IV calculation by the same negative amount. Hence, if <code>offset=<em><code>n</code></em></code> is given, sector _`n`_ will get a sector number of 0 for the IV calculation. Using `skip=` causes sector _`n`_ to also be the first sector of the mapped device, but with its number for IV generation being _`n`_.\n\nThis option is only relevant for plain devices.","#skip=",220],
[4,10,"Specifies the key size in bits. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values and the default value of this option.","#size=",186],
[4,11,"Specifies the sector size in bytes. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values and the default value of this option.","#sector-size=",240],
[4,12,"Specifies the absolute path to a key file to use for a TrueCrypt volume. This implies `tcrypt` and can be used more than once to provide several key files.\n\nSee the entry for `tcrypt` on the behavior of the passphrase and key files when using TrueCrypt encryption mode.","#tcrypt-keyfile=",206],
[4,13,"Specifies a custom Personal Iteration Multiplier (PIM) value, which can range from 0..2147468 for standard veracrypt volumes and 0..65535 for veracrypt system volumes. A value of 0 will imply the VeraCrypt default. This option is only effective when `tcrypt-veracrypt` is set.\n\nNote that VeraCrypt enforces a minimal allowed PIM value depending on the password strength and the hash algorithm used for key derivation, however `veracrypt-pim=` is not checked against these bounds. See [Veracrypt Personal Iterations Multiplier](https://www.veracrypt.fr/en/Personal%20Iterations%20Multiplier%20%28PIM%29.html) documentation for more information.","#veracrypt-pim=",254],
[4,14,"Specifies the timeout for querying for a password. If no unit is specified, seconds is used. Supported units are s, ms, us, min, h, d. A timeout of 0 waits indefinitely (which is the default).","#timeout=",186],
[4,15,"The encrypted block device will be prepared for using it as `/tmp/`; it will be formatted using [mkfs(8)](https://man7.org/linux/man-pages/man8/mkfs.8.html). Takes a file system type as argument, such as \"`ext4`\", \"`xfs`\" or \"`btrfs`\". If no argument is specified defaults to \"`ext4`\". This option implies `plain`.\n\nWARNING: Using the `tmp` option will destroy the contents of the named partition during every boot, so make sure the underlying block device is specified correctly.","#tmp=",186],
[4,16,"Specifies the maximum number of times the user is queried for a password. The default is 3. If set to 0, the user is queried for a password indefinitely.","#tries=",186],
[4,17,"Takes a boolean argument, defaults to false. If true, never query interactively for the password/PIN. Useful for headless systems.","#headless=",249],
[4,18,"Controls whether to echo passwords or security token PINs that are read from console. Takes a boolean or the special string \"`masked`\". The default is `password-echo=masked`.\n\nIf enabled, the typed characters are echoed literally. If disabled, the typed characters are not echoed in any form, the user will not get feedback on their input. If set to \"`masked`\", an asterisk (\"`*`\") is echoed for each character typed. Regardless of which mode is chosen, if the user hits the tabulator key (\"`â†¹`\") at any time, or the backspace key (\"`âŒ«`\") before any other data has been entered, then echo is turned off.","#password-echo=yes%7Cno%7Cmasked",249],
[4,19,"Takes either the special value \"`auto`\" or an [RFC7512 PKCS#11 URI](https://tools.ietf.org/html/rfc7512) pointing to a private RSA key which is used to decrypt the encrypted key specified in the third column of the line. This is useful for unlocking encrypted volumes through PKCS#11 compatible security tokens or smartcards. See below for an example how to set up this mechanism for unlocking a LUKS2 volume with a YubiKey security token.\n\nIf specified as \"`auto`\" the volume must be of type LUKS2 and must carry PKCS#11 security token metadata in its LUKS2 JSON token section. In this mode the URI and the encrypted key are automatically read from the LUKS2 JSON token header. Use [systemd-cryptenroll(1)](systemd-cryptenroll.html) as simple tool for enrolling PKCS#11 security tokens or smartcards in a way compatible with \"`auto`\". In this mode the third column of the line should remain empty (that is, specified as \"`-`\").\n\nThe specified URI can refer directly to a private RSA key stored on a token or alternatively just to a slot or token, in which case a search for a suitable private RSA key will be performed. In this case if multiple suitable objects are found the token is refused. The encrypted key configured in the third column of the line is passed as is (i.e. in binary form, unprocessed) to RSA decryption. The resulting decrypted key is then Base64 encoded before it is used to unlock the LUKS volume.\n\nUse **systemd-cryptenroll --pkcs11-token-uri=list** to list all suitable PKCS#11 security tokens currently plugged in, along with their URIs.\n\nNote that many newer security tokens that may be used as PKCS#11 security token typically also implement the newer and simpler FIDO2 standard. Consider using `fido2-device=` (described below) to enroll it via FIDO2 instead. Note that a security token enrolled via PKCS#11 cannot be used to unlock the volume via FIDO2, unless also enrolled via FIDO2, and vice versa.","#pkcs11-uri=",245],
[4,20,"Takes either the special value \"`auto`\" or the path to a \"`hidraw`\" device node (e.g. `/dev/hidraw1`) referring to a FIDO2 security token that implements the \"`hmac-secret`\" extension (most current hardware security tokens do). See below for an example how to set up this mechanism for unlocking an encrypted volume with a FIDO2 security token.\n\nIf specified as \"`auto`\" the FIDO2 token device is automatically discovered, as it is plugged in.\n\nFIDO2 volume unlocking requires a client ID hash (CID) to be configured via `fido2-cid=` (see below) and a key to pass to the security token's HMAC functionality (configured in the line's third column) to operate. If not configured and the volume is of type LUKS2, the CID and the key are read from LUKS2 JSON token metadata instead. Use [systemd-cryptenroll(1)](systemd-cryptenroll.html) as simple tool for enrolling FIDO2 security tokens, compatible with this automatic mode, which is only available for LUKS2 volumes.\n\nUse **systemd-cryptenroll --fido2-device=list** to list all suitable FIDO2 security tokens currently plugged in, along with their device nodes.\n\nThis option implements the following mechanism: the configured key is hashed via they HMAC keyed hash function the FIDO2 device implements, keyed by a secret key embedded on the device. The resulting hash value is Base64 encoded and used to unlock the LUKS2 volume. As it should not be possible to extract the secret from the hardware token, it should not be possible to retrieve the hashed key given the configured key â€” without possessing the hardware token.\n\nNote that many security tokens that implement FIDO2 also implement PKCS#11, suitable for unlocking volumes via the `pkcs11-uri=` option described above. Typically the newer, simpler FIDO2 standard is preferable.","#fido2-device=",248],
[4,21,"Takes a Base64 encoded FIDO2 client ID to use for the FIDO2 unlock operation. If specified, but `fido2-device=` is not, `fido2-device=auto` is implied. If `fido2-device=` is used but `fido2-cid=` is not, the volume must be of LUKS2 type, and the CID is read from the LUKS2 JSON token header. Use [systemd-cryptenroll(1)](systemd-cryptenroll.html) for enrolling a FIDO2 token in the LUKS2 header compatible with this automatic mode.","#fido2-cid=",248],
[4,22,"Takes a string, configuring the FIDO2 Relying Party (rp) for the FIDO2 unlock operation. If not specified \"`io.systemd.cryptsetup`\" is used, except if the LUKS2 JSON token header contains a different value. It should normally not be necessary to override this.","#fido2-rp=",248],
[4,23,"Takes either the special value \"`auto`\" or the path to a device node (e.g. `/dev/tpmrm0`) referring to a TPM2 security chip. See below for an example how to set up this mechanism for unlocking an encrypted volume with a TPM2 chip.\n\nUse `tpm2-pcrs=` (see below) to configure the set of TPM2 PCRs to bind the volume unlocking to. Use [systemd-cryptenroll(1)](systemd-cryptenroll.html) as simple tool for enrolling TPM2 security chips in LUKS2 volumes.\n\nIf specified as \"`auto`\" the TPM2 device is automatically discovered. Use **systemd-cryptenroll --tpm2-device=list** to list all suitable TPM2 devices currently available, along with their device nodes.\n\nThis option implements the following mechanism: when enrolling a TPM2 device via **systemd-cryptenroll** on a LUKS2 volume, a randomized key unlocking the volume is generated on the host and loaded into the TPM2 chip where it is encrypted with an asymmetric \"primary\" key pair derived from the TPM2's internal \"seed\" key. Neither the seed key nor the primary key are permitted to ever leave the TPM2 chip â€” however, the now encrypted randomized key may. It is saved in the LUKS2 volume JSON token header. When unlocking the encrypted volume, the primary key pair is generated on the TPM2 chip again (which works as long as the chip's seed key is correctly maintained by the TPM2 chip), which is then used to decrypt (on the TPM2 chip) the encrypted key from the LUKS2 volume JSON token header saved there during enrollment. The resulting decrypted key is then used to unlock the volume. When the randomized key is encrypted the current values of the selected PCRs (see below) are included in the operation, so that different PCR state results in different encrypted keys and the decrypted key can only be recovered if the same PCR state is reproduced.","#tpm2-device=",248],
[4,24,"Takes a \"`+`\" separated list of numeric TPM2 PCR (i.e. \"Platform Configuration Register\") indexes to bind the TPM2 volume unlocking to. This option is only useful when TPM2 enrollment metadata is not available in the LUKS2 JSON token header already, the way **systemd-cryptenroll** writes it there. If not used (and no metadata in the LUKS2 JSON token header defines it), defaults to a list of a single entry: PCR 7. Assign an empty string to encode a policy that binds the key to no PCRs, making the key accessible to local programs regardless of the current PCR state.","#tpm2-pcrs=",248],
[4,25,"Takes a boolean argument, defaults to \"`false`\". Controls whether TPM2 volume unlocking is bound to a PIN in addition to PCRs. Similarly, this option is only useful when TPM2 enrollment metadata is not available.","#tpm2-pin=",251],
[4,26,"Takes an absolute path to a TPM2 PCR JSON signature file, as produced by the [systemd-measure(1)](systemd-measure.html) tool. This permits locking LUKS2 volumes to any PCR values for which a valid signature matching a public key specified at key enrollment time can be provided. See [systemd-cryptenroll(1)](systemd-cryptenroll.html) for details on enrolling TPM2 PCR public keys. If this option is not specified but it is attempted to unlock a LUKS2 volume with a signed TPM2 PCR enrollment a suitable signature file `tpm2-pcr-signature.json` is searched for in `/etc/systemd/`, `/run/systemd/`, `/usr/lib/systemd/` (in this order).","#tpm2-signature=",252],
[4,27,"Takes an absolute path to a TPM2 pcrlock policy file, as produced by the [systemd-pcrlock(1)](systemd-pcrlock.html) tool. This permits locking LUKS2 volumes to a local policy of allowed PCR values with variants. See [systemd-cryptenroll(1)](systemd-cryptenroll.html) for details on enrolling TPM2 pcrlock policies. If this option is not specified but it is attempted to unlock a LUKS2 volume with a TPM2 pcrlock enrollment a suitable signature file `pcrlock.json` is searched for in `/run/systemd/` and `/var/lib/systemd/` (in this order).","#tpm2-pcrlock=",255],
[4,28,"Controls whether to measure the volume key of the encrypted volume to a TPM2 PCR. If set to \"no\" (which is the default) no PCR extension is done. If set to \"yes\" the volume key is measured into PCR 15. If set to a decimal integer in the range 0â€¦23 the volume key is measured into the specified PCR. The volume key is measured along with the activated volume name and its UUID. This functionality is particularly useful for the encrypted volume backing the root file system, as it then allows later TPM objects to be securely bound to the root file system and hence the specific installation.","#tpm2-measure-pcr=",253],
[4,29,"Selects one or more TPM2 PCR banks to measure the volume key into, as configured with `tpm2-measure-pcr=` above. Multiple banks may be specified, separated by a colon character. If not specified automatically determines available and used banks. Expects a message digest name (e.g. \"`sha1`\", \"`sha256`\", â€¦) as argument, to identify the bank.","#tpm2-measure-bank=",253],
[4,30,"Specifies how long to wait at most for configured security devices (i.e. FIDO2, PKCS#11, TPM2) to show up. Takes a time value in seconds (but other time units may be specified too, see [systemd.time(7)](systemd.time.html) for supported formats). Defaults to 30s. Once the specified timeout elapsed authentication via password is attempted. Note that this timeout applies to waiting for the security device to show up â€” it does not apply to the PIN prompt for the device (should one be needed) or similar. Pass 0 to turn off the time-out and wait forever.","#token-timeout=",250],
[4,31,"Takes a boolean argument. If enabled, right before asking the user for a password it is first attempted to unlock the volume with an empty password. This is useful for systems that are initialized with an encrypted volume with only an empty password set, which shall be replaced with a suitable password during first boot, but after activation.","#try-empty-password=",246],
[4,32,"Specifies how long systemd should wait for a block device to show up before giving up on the entry. The argument is a time in seconds or explicitly specified units of \"`s`\", \"`min`\", \"`h`\", \"`ms`\".","#x-systemd.device-timeout=",216],
[2,"cipher",[],1,2,null],
[2,"fido2-cid",[],21,2,null],
[2,"fido2-device",[],20,2,null],
[2,"fido2-rp",[],22,2,null],
[2,"hash",[],2,2,null],
[2,"header",[],3,2,null],
[2,"headless","b",17,2,null],
[2,"key-slot",[],6,2,null],
[2,"keyfile-offset",[],4,2,null],
[2,"keyfile-size",[],5,2,null],
[2,"keyfile-timeout",[],7,2,null],
[2,"offset",[],8,2,null],
[2,"password-echo",["yes|no|masked"],18,2,null],
[2,"pkcs11-uri",[],19,2,null],
[2,"sector-size",[],11,2,null],
[2,"size",[],10,2,null],
[2,"skip",[],9,2,null],
[2,"tcrypt-keyfile",[],12,2,null],
[2,"timeout",[],14,2,null],
[2,"tmp",[],15,2,null],
[2,"token-timeout",[],30,2,null],
[2,"tpm2-device",[],23,2,null],
[2,"tpm2-measure-bank",[],29,2,null],
[2,"tpm2-measure-pcr",[],28,2,null],
[2,"tpm2-pcrlock",[],27,2,null],
[2,"tpm2-pcrs",[],24,2,null],
[2,"tpm2-pin","b",25,2,null],
[2,"tpm2-signature",[],26,2,null],
[2,"tries",[],16,2,null],
[2,"try-empty-password","b",31,2,null],
[2,"veracrypt-pim",[],13,2,null],
[2,"x-systemd.device-timeout",[],32,2,null],
[3,4,"iocost.conf(5)","iocost.conf â€” Configuration files for the iocost solution manager","iocost.conf.html"],
[6,1,"IOCost"],
[4,33,"Chooses which I/O cost solution (identified by named string) should be used for the devices in this system. The known solutions can be queried from the udev metadata attached to the devices. If a device does not have the specified solution, the first one listed in `IOCOST_SOLUTIONS` is used instead.\n\nE.g. \"`TargetSolution=isolated-bandwidth`\".","#TargetSolution=",254],
[2,"TargetSolution",[],33,4,1],
[3,8,"kernel-command-line(7)","kernel-command-line â€” Kernel command line parameters","kernel-command-line.html"],
[4,34,"Parameters understood by the system and service manager to control system behavior. For details, see [systemd(1)](systemd.html).","#systemd.unit=",186],
[4,35,"Additional parameters understood by [systemd-debug-generator(8)](systemd-debug-generator.html), to mask or start specific units at boot, or invoke a debug shell on tty9.","#systemd.mask=",215],
[4,36,"Additional parameters understood by [systemd-run-generator(8)](systemd-run-generator.html), to run a command line specified on the kernel command line as system service after booting up.","#systemd.run=",240],
[4,37,"During early boot, the generation of core dump files is disabled until a core dump handler (if any) takes over. This parameter allows specifying an absolute path where core dump files should be stored until a handler is installed. The path should be absolute and may contain specifiers, see [core(5)](https://man7.org/linux/man-pages/man5/core.5.html) for details.","#systemd.early_core_pattern=",240],
[4,38,"This parameter is understood by several system tools to control whether or not they should restore system state from the previous boot. For details, see [systemd-backlight@.service(8)](systemd-backlight@.service.html) and [systemd-rfkill.service(8)](systemd-rfkill.service.html).","#systemd.restore_state=",209],
[4,39,"This parameter controls whether the system shall boot up in volatile mode. Takes a boolean argument, or the special value \"`state`\". If false (the default), normal boot mode is selected, the root directory and `/var/` are mounted as specified on the kernel command line or `/etc/fstab`, or otherwise configured. If true, full state-less boot mode is selected. In this case the root directory is mounted as volatile memory file system (\"`tmpfs`\"), and only `/usr/` is mounted from the file system configured as root device, in read-only mode. This enables fully state-less boots were the vendor-supplied OS is used as shipped, with only default configuration and no stored state in effect, as `/etc/` and `/var/` (as well as all other resources shipped in the root file system) are reset at boot and lost on shutdown. If this setting is set to \"`state`\" the root file system is mounted read-only, however `/var/` is mounted as a volatile memory file system (\"`tmpfs`\"), so that the system boots up with the normal configuration applied, but all state reset at boot and lost at shutdown. If this setting is set to \"`overlay`\" the root file system is set up as \"`overlayfs`\" mount combining the read-only root directory with a writable \"`tmpfs`\", so that no modifications are made to disk, but the file system may be modified nonetheless with all changes being lost at reboot. For details, see [systemd-volatile-root.service(8)](systemd-volatile-root.service.html) and [systemd-fstab-generator(8)](systemd-fstab-generator.html).","#systemd.volatile=",233],
[4,40,"Parameters understood by the system and service manager to control locale and language settings. For details, see [systemd(1)](systemd.html).","#locale.LANG=",186],
[4,41,"Parameters understood by the file system checker services. For details, see [systemd-fsck@.service(8)](systemd-fsck@.service.html).","#fsck.mode=",186],
[4,42,"Parameter understood by the file quota checker service. For details, see [systemd-quotacheck.service(8)](systemd-quotacheck.service.html).","#quotacheck.mode=",186],
[4,43,"Parameters understood by the journal service. For details, see [systemd-journald.service(8)](systemd-journald.service.html).","#systemd.journald.forward_to_syslog=",186],
[4,44,"Parameters understood by the virtual console setup logic. For details, see [vconsole.conf(5)](vconsole.conf.html).","#vconsole.keymap=",186],
[4,45,"Parameters understood by the device event managing daemon. For details, see [systemd-udevd.service(8)](systemd-udevd.service.html).","#udev.log_level=",186],
[4,46,"May be used to disable the Plymouth boot splash. For details, see [plymouth(8)](http://linux.die.net/man/8/plymouth).","#plymouth.enable=",186],
[4,47,"Configures the LUKS full-disk encryption logic at boot. For details, see [systemd-cryptsetup-generator(8)](systemd-cryptsetup-generator.html).","#luks=",186],
[4,48,"Configures the `/etc/fstab` logic at boot. For details, see [systemd-fstab-generator(8)](systemd-fstab-generator.html).","#fstab=",186],
[4,49,"Configures the root file system and its file system type and mount options, as well as whether it shall be mounted read-only or read-write initially. For details, see [systemd-fstab-generator(8)](systemd-fstab-generator.html).\n\nIf `root=` is not set (or set to \"`gpt-auto`\") the automatic root partition discovery implemented by [systemd-gpt-auto-generator(8)](systemd-gpt-auto-generator.html) will be in effect. In this case `rootfstype=`, `rootflags=`, `ro`, `rw` will be interpreted by **systemd-gpt-auto-generator**.","#root=",215],
[4,50,"Configures the /usr file system (if required) and its file system type and mount options. For details, see [systemd-fstab-generator(8)](systemd-fstab-generator.html).","#mount.usr=",235],
[4,51,"Configures the integrity protection root hash for the root and `/usr` file systems, and other related parameters. For details, see [systemd-veritysetup-generator(8)](systemd-veritysetup-generator.html).","#veritytab=",233],
[4,52,"Configures whether the `serial-getty@.service` will run. For details, see [systemd-getty-generator(8)](systemd-getty-generator.html).","#systemd.getty_auto=",250],
[4,53,"Configures whether GPT-based partition auto-discovery shall be attempted. For details, see [systemd-gpt-auto-generator(8)](systemd-gpt-auto-generator.html).","#systemd.gpt_auto=",215],
[4,54,"When GPT-based partition auto-discovery is used, configures the image dissection policy string to apply, as per [systemd.image-policy(7)](systemd.image-policy.html). For details see [systemd-gpt-auto-generator(8)](systemd-gpt-auto-generator.html).","#systemd.image_policy=",254],
[4,55,"Overrides the default start job timeout `DefaultTimeoutStartSec=` at boot. For details, see [systemd-system.conf(5)](systemd-system.conf.html).","#systemd.default_timeout_start_sec=",230],
[4,56,"Overrides the default device timeout `DefaultDeviceTimeoutSec=` at boot. For details, see [systemd-system.conf(5)](systemd-system.conf.html).","#systemd.default_device_timeout_sec=",254],
[4,57,"Overrides the watchdog device path `WatchdogDevice=`. For details, see [systemd-system.conf(5)](systemd-system.conf.html).","#systemd.watchdog_device=",236],
[4,58,"Overrides the watchdog timeout settings otherwise configured with `RuntimeWatchdog=`, `RebootWatchdog=` and `KExecWatchdogSec=`. Takes a time value (if no unit is specified, seconds is the implicitly assumed time unit) or the special strings \"`off`\" or \"`default`\". For details, see [systemd-system.conf(5)](systemd-system.conf.html).","#systemd.watchdog_sec=",250],
[4,59,"Overrides the watchdog pre-timeout settings otherwise configured with `RuntimeWatchdogPreSec=`. Takes a time value (if no unit is specified, seconds is the implicitly assumed time unit) or the special strings \"`off`\" or \"`default`\". For details, see [systemd-system.conf(5)](systemd-system.conf.html).","#systemd.watchdog_pre_sec=",251],
[4,60,"Overrides the watchdog pre-timeout settings otherwise configured with `RuntimeWatchdogPreGovernor=`. Takes a string value. For details, see [systemd-system.conf(5)](systemd-system.conf.html).","#systemd.watchdog_pretimeout_governor=",251],
[4,61,"Overrides the CPU affinity mask for the service manager and the default for all child processes it forks. This takes precedence over `CPUAffinity=`, see [systemd-system.conf(5)](systemd-system.conf.html) for details.","#systemd.cpu_affinity=",245],
[4,62,"Load a specific kernel module early at boot. For details, see [systemd-modules-load.service(8)](systemd-modules-load.service.html).","#modules_load=",187],
[4,63,"Configures DNS server information and search domains, see [systemd-resolved.service(8)](systemd-resolved.service.html) for details.","#nameserver=",253],
[4,64,"Enables resume from hibernation using the specified device and mount options. All [fstab(5)](https://man7.org/linux/man-pages/man5/fstab.5.html)\\-like paths are supported. For details, see [systemd-hibernate-resume-generator(8)](systemd-hibernate-resume-generator.html).","#resume=",217],
[4,65,"Takes a boolean argument, defaults to on. If off, [systemd-firstboot.service(8)](systemd-firstboot.service.html) will not query the user for basic system settings, even if the system boots up for the first time and the relevant settings are not initialized yet. Not to be confused with `systemd.condition-first-boot=` (see below), which overrides the result of the `ConditionFirstBoot=` unit file condition, and thus controls more than just `systemd-firstboot.service` behaviour.","#systemd.firstboot=",233],
[4,66,"Takes a boolean argument. If specified, overrides the result of `ConditionNeedsUpdate=` unit condition checks. See [systemd.unit(5)](systemd.unit.html) for details.","#systemd.condition-needs-update=",246],
[4,67,"Takes a boolean argument. If specified, overrides the result of `ConditionFirstBoot=` unit condition checks. See [systemd.unit(5)](systemd.unit.html) for details. Not to be confused with `systemd.firstboot=` which only controls behaviour of the `systemd-firstboot.service` system service but has no effect on the condition check (see above).","#systemd.condition-first-boot=",246],
[4,68,"Takes a decimal, numeric timestamp in Î¼s since January 1st 1970, 00:00am, to set the system clock to. The system time is set to the specified timestamp early during boot. It is not propagated to the hardware clock (RTC).","#systemd.clock-usec=",246],
[4,69,"Takes a base64 encoded random seed value to credit with full entropy to the kernel's random pool during early service manager initialization. This option is useful in testing environments where delays due to random pool initialization in entropy starved virtual machines shall be avoided.\n\nNote that if this option is used the seed is accessible to unprivileged programs from `/proc/cmdline`. This option is hence a security risk when used outside of test systems, since the (possibly) only seed used for initialization of the kernel's entropy pool might be easily acquired by unprivileged programs.\n\nIt is recommended to pass 512 bytes of randomized data (as that matches the Linux kernel pool size), which may be generated with a command like the following:\n\ndd if=/dev/urandom bs=512 count=1 status=none | base64 -w 0\n\nAgain: do not use this option outside of testing environments, it's a security risk elsewhere, as secret key material derived from the entropy pool can possibly be reconstructed by unprivileged programs.","#systemd.random-seed=",246],
[4,70,"Accepts a hostname to set during early boot. If specified takes precedence over what is set in `/etc/hostname`. Note that this does not bar later runtime changes to the hostname, it simply controls the initial hostname set during early boot.","#systemd.hostname=",246],
[4,71,"These arguments allow configuring default values for `$TERM`, `TTYRows=`, and `TTYColumns=` for tty _`tty`_. Additionally, `systemd.tty.term.console` will configure the `$TERM` value used by **systemd** if not set explicitly using `TERM` on the kernel command line. The tty name should be specified without the `/dev/` prefix (e.g. \"`systemd.tty.rows.ttyS0=80`\").","#systemd.tty.term.tty=",254],
[2,"domain",[],63,8,null],
[2,"fsck.mode",[],41,8,null],
[2,"fsck.repair",[],41,8,null],
[2,"fstab",[],48,8,null],
[2,"locale.LANG",[],40,8,null],
[2,"locale.LANGUAGE",[],40,8,null],
[2,"locale.LC_ADDRESS",[],40,8,null],
[2,"locale.LC_COLLATE",[],40,8,null],
[2,"locale.LC_CTYPE",[],40,8,null],
[2,"locale.LC_IDENTIFICATION",[],40,8,null],
[2,"locale.LC_MEASUREMENT",[],40,8,null],
[2,"locale.LC_MESSAGES",[],40,8,null],
[2,"locale.LC_MONETARY",[],40,8,null],
[2,"locale.LC_NAME",[],40,8,null],
[2,"locale.LC_NUMERIC",[],40,8,null],
[2,"locale.LC_PAPER",[],40,8,null],
[2,"locale.LC_TELEPHONE",[],40,8,null],
[2,"locale.LC_TIME",[],40,8,null],
[2,"luks",[],47,8,null],
[2,"luks.crypttab",[],47,8,null],
[2,"luks.key",[],47,8,null],
[2,"luks.name",[],47,8,null],
[2,"luks.options",[],47,8,null],
[2,"luks.uuid",[],47,8,null],
[2,"modules_load",[],62,8,null],
[2,"mount.usr",[],50,8,null],
[2,"mount.usrflags",[],50,8,null],
[2,"mount.usrfstype",[],50,8,null],
[2,"nameserver",[],63,8,null],
[2,"net.ifnames",[],45,8,null],
[2,"net.naming-scheme",[],45,8,null],
[2,"plymouth.enable",[],46,8,null],
[2,"quotacheck.mode",[],42,8,null],
[2,"rd.fstab",[],48,8,null],
[2,"rd.luks",[],47,8,null],
[2,"rd.luks.crypttab",[],47,8,null],
[2,"rd.luks.key",[],47,8,null],
[2,"rd.luks.name",[],47,8,null],
[2,"rd.luks.options",[],47,8,null],
[2,"rd.luks.uuid",[],47,8,null],
[2,"rd.modules_load",[],62,8,null],
[2,"rd.systemd.gpt_auto",[],53,8,null],
[2,"rd.systemd.image_policy",[],54,8,null],
[2,"rd.systemd.unit",[],34,8,null],
[2,"rd.systemd.verity",[],51,8,null],
[2,"rd.udev.children_max",[],45,8,null],
[2,"rd.udev.event_timeout",[],45,8,null],
[2,"rd.udev.exec_delay",[],45,8,null],
[2,"rd.udev.log_level",[],45,8,null],
[2,"rd.udev.timeout_signal",[],45,8,null],
[2,"rd.veritytab",[],51,8,null],
[2,"resume",[],64,8,null],
[2,"resumeflags",[],64,8,null],
[2,"root",[],49,8,null],
[2,"rootflags",[],49,8,null],
[2,"rootfstype",[],49,8,null],
[2,"roothash",[],51,8,null],
[2,"systemd.clock-usec",[],68,8,null],
[2,"systemd.condition-first-boot","b",67,8,null],
[2,"systemd.condition-needs-update","b",66,8,null],
[2,"systemd.cpu_affinity",[],61,8,null],
[2,"systemd.default_device_timeout_sec",[],56,8,null],
[2,"systemd.default_standard_error",[],34,8,null],
[2,"systemd.default_standard_output",[],34,8,null],
[2,"systemd.default_timeout_start_sec",[],55,8,null],
[2,"systemd.early_core_pattern",[],37,8,null],
[2,"systemd.firstboot","b",65,8,null],
[2,"systemd.getty_auto",[],52,8,null],
[2,"systemd.gpt_auto",[],53,8,null],
[2,"systemd.hostname",[],70,8,null],
[2,"systemd.image_policy",[],54,8,null],
[2,"systemd.import_credentials",[],34,8,null],
[2,"systemd.journald.forward_to_console",[],43,8,null],
[2,"systemd.journald.forward_to_kmsg",[],43,8,null],
[2,"systemd.journald.forward_to_syslog",[],43,8,null],
[2,"systemd.journald.forward_to_wall",[],43,8,null],
[2,"systemd.log_level",[],34,8,null],
[2,"systemd.log_location",[],34,8,null],
[2,"systemd.log_target",[],34,8,null],
[2,"systemd.machine_id",[],34,8,null],
[2,"systemd.mask",[],35,8,null],
[2,"systemd.random-seed",[],69,8,null],
[2,"systemd.reload_limit_burst",[],34,8,null],
[2,"systemd.reload_limit_interval_sec",[],34,8,null],
[2,"systemd.restore_state",[],38,8,null],
[2,"systemd.run",[],36,8,null],
[2,"systemd.run_failure_action",[],36,8,null],
[2,"systemd.run_success_action",[],36,8,null],
[2,"systemd.set_credential",[],34,8,null],
[2,"systemd.set_credential_binary",[],34,8,null],
[2,"systemd.setenv",[],34,8,null],
[2,"systemd.status_unit_format",[],34,8,null],
[2,"systemd.tty.columns.tty",[],71,8,null],
[2,"systemd.tty.rows.tty",[],71,8,null],
[2,"systemd.tty.term.tty",[],71,8,null],
[2,"systemd.unit",[],34,8,null],
[2,"systemd.verity",[],51,8,null],
[2,"systemd.verity.root_options",[],51,8,null],
[2,"systemd.verity_root_data",[],51,8,null],
[2,"systemd.verity_root_hash",[],51,8,null],
[2,"systemd.verity_usr_data",[],51,8,null],
[2,"systemd.verity_usr_hash",[],51,8,null],
[2,"systemd.verity_usr_options",[],51,8,null],
[2,"systemd.volatile","b",39,8,null],
[2,"systemd.wants",[],35,8,null],
[2,"systemd.watchdog_device",[],57,8,null],
[2,"systemd.watchdog_pre_sec",[],59,8,null],
[2,"systemd.watchdog_pretimeout_governor",[],60,8,null],
[2,"systemd.watchdog_sec",[],58,8,null],
[2,"udev.children_max",[],45,8,null],
[2,"udev.event_timeout",[],45,8,null],
[2,"udev.exec_delay",[],45,8,null],
[2,"udev.log_level",[],45,8,null],
[2,"udev.timeout_signal",[],45,8,null],
[2,"usrhash",[],51,8,null],
[2,"vconsole.font",[],44,8,null],
[2,"vconsole.font_map",[],44,8,null],
[2,"vconsole.font_unimap",[],44,8,null],
[2,"vconsole.keymap",[],44,8,null],
[2,"vconsole.keymap_toggle",[],44,8,null],
[2,"veritytab",[],51,8,null],
[3,12,"pam_systemd_home(8)","pam\\_systemd\\_home â€” Authenticate users and mount home directories via systemd-homed.service","pam_systemd_home.html"],
[4,72,"Takes a boolean argument. If true, the home directory of the user will be suspended automatically during system suspend; if false it will remain active. Automatic suspending of the home directory improves security substantially as secret key material is automatically removed from memory before the system is put to sleep and must be re-acquired (through user re-authentication) when coming back from suspend. It is recommended to set this parameter for all PAM applications that have support for automatically re-authenticating via PAM on system resume. If multiple sessions of the same user are open in parallel the user's home directory will be left unsuspended on system suspend as long as at least one of the sessions does not set this parameter to on. Defaults to off.\n\nNote that TTY logins generally do not support re-authentication on system resume. Re-authentication on system resume is primarily a concept implementable in graphical environments, in the form of lock screens brought up automatically when the system goes to sleep. This means that if a user concurrently uses graphical login sessions that implement the required re-authentication mechanism and console logins that do not, the home directory is not locked during suspend, due to the logic explained above. That said, it is possible to set this field for TTY logins too, ignoring the fact that TTY logins actually don't support the re-authentication mechanism. In that case the TTY sessions will appear hung until the user logs in on another virtual terminal (regardless if via another TTY session or graphically) which will resume the home directory and unblock the original TTY session. (Do note that lack of screen locking on TTY sessions means even though the TTY session appears hung, keypresses can still be queued into it, and the existing screen contents be read without re-authentication; this limitation is unrelated to the home directory management **pam\\_systemd\\_home** and `systemd-homed.service` implement.)\n\nTurning this option on by default is highly recommended for all sessions, but only if the service managing these sessions correctly implements the aforementioned re-authentication. Note that the re-authentication must take place from a component running outside of the user's context, so that it does not require access to the user's home directory for operation. Traditionally, most desktop environments do not implement screen locking this way, and need to be updated accordingly.\n\nThis setting may also be controlled via the `$SYSTEMD_HOME_SUSPEND` environment variable (see below), which **pam\\_systemd\\_home** reads during initialization and sets for sessions. If both the environment variable is set and the module parameter specified the latter takes precedence.","#suspend=",245],
[2,"suspend","b",72,12,null],
[3,13,"pam_systemd_loadkey(8)","pam\\_systemd\\_loadkey â€” Read password from kernel keyring and set it as PAM authtok","pam_systemd_loadkey.html"],
[4,73,"Takes a string argument which sets the keyname to read. The default is \"`cryptsetup`\", which is used by [systemd-cryptsetup@.service(8)](systemd-cryptsetup@.service.html) to store LUKS passphrase during boot.","#keyname=",255],
[2,"keyname",[],73,13,null],
[3,14,"pam_systemd(8)","pam\\_systemd â€” Register user sessions in the systemd login manager","pam_systemd.html"],
[4,74,"Takes a string argument which sets the session class. The `XDG_SESSION_CLASS` environment variable (see below) takes precedence. One of \"`user`\", \"`greeter`\", \"`lock-screen`\" or \"`background`\". See [sd\\_session\\_get\\_class(3)](sd_session_get_class.html) for details about the session class.","#class=",197],
[4,75,"Takes a string argument which sets the session type. The `XDG_SESSION_TYPE` environment variable (see below) takes precedence. One of \"`unspecified`\", \"`tty`\", \"`x11`\", \"`wayland`\" or \"`mir`\". See [sd\\_session\\_get\\_type(3)](sd_session_get_type.html) for details about the session type.","#type=",209],
[4,76,"Takes a single, short identifier string for the desktop environment. The `XDG_SESSION_DESKTOP` environment variable (see below) takes precedence. This may be used to indicate the session desktop used, where this applies and if this information is available. For example: \"`GNOME`\", or \"`KDE`\". It is recommended to use the same identifiers and capitalization as for `$XDG_CURRENT_DESKTOP`, as defined by the [Desktop Entry Specification](https://standards.freedesktop.org/desktop-entry-spec/latest/). (However, note that the option only takes a single item, and not a colon-separated list like `$XDG_CURRENT_DESKTOP`.) See [sd\\_session\\_get\\_desktop(3)](sd_session_get_desktop.html) for further details.","#desktop=",240],
[4,77,"Takes a comma-separated list of process capabilities (e.g. `CAP_WAKE_ALARM`, `CAP_BLOCK_SUSPEND`, â€¦) to set for the invoked session's processes, if the user record does not encode appropriate sets of capabilities directly. See [capabilities(7)](https://man7.org/linux/man-pages/man7/capabilities.7.html) for details on the capabilities concept. If not specified, the default bounding set is left as is (i.e. usually contains the full set of capabilities). The default ambient set is set to `CAP_WAKE_ALARM` for regular users if the PAM session is associated with a local seat or if it is invoked for the \"`systemd-user`\" service. Otherwise defaults to the empty set.","#default-capability-bounding-set=",254],
[4,78,"Sets unit `MemoryMax=`.","#systemd.memory_max=",239],
[4,79,"Sets unit `TasksMax=`.","#systemd.tasks_max=",239],
[4,80,"Sets unit `CPUWeight=`.","#systemd.cpu_weight=",239],
[4,81,"Sets unit `IOWeight=`.","#systemd.io_weight=",239],
[4,82,"Sets unit `RuntimeMaxSec=`.","#systemd.runtime_max_sec=",244],
[2,"class",[],74,14,null],
[2,"default-capability-ambient-set",[],77,14,null],
[2,"default-capability-bounding-set",[],77,14,null],
[2,"desktop",[],76,14,null],
[2,"systemd.cpu_weight",[],80,14,null],
[2,"systemd.io_weight",[],81,14,null],
[2,"systemd.memory_max",[],78,14,null],
[2,"systemd.runtime_max_sec",[],82,14,null],
[2,"systemd.tasks_max",[],79,14,null],
[2,"type",[],75,14,null],
[3,17,"resolved.conf(5)","resolved.conf, resolved.conf.d â€” Network Name Resolution configuration files","resolved.conf.html"],
[6,2,"Resolve"],
[4,83,"A space-separated list of IPv4 and IPv6 addresses to use as system DNS servers. Each address can optionally take a port number separated with \"`:`\", a network interface name or index separated with \"`%`\", and a Server Name Indication (SNI) separated with \"`#`\". When IPv6 address is specified with a port number, then the address must be in the square brackets. That is, the acceptable full formats are \"`111.222.333.444:9953%ifname#example.com`\" for IPv4 and \"`[1111:2222::3333]:9953%ifname#example.com`\" for IPv6. DNS requests are sent to one of the listed DNS servers in parallel to suitable per-link DNS servers acquired from [systemd-networkd.service(8)](systemd-networkd.service.html) or set at runtime by external applications. For compatibility reasons, if this setting is not specified, the DNS servers listed in `/etc/resolv.conf` are used instead, if that file exists and any servers are configured in it. This setting defaults to the empty list.","#DNS=",213],
[4,84,"A space-separated list of IPv4 and IPv6 addresses to use as the fallback DNS servers. Please see `DNS=` for acceptable format of addresses. Any per-link DNS servers obtained from [systemd-networkd.service(8)](systemd-networkd.service.html) take precedence over this setting, as do any servers set via `DNS=` above or `/etc/resolv.conf`. This setting is hence only used if no other DNS server information is known. If this option is not given, a compiled-in list of DNS servers is used instead.","#FallbackDNS=",216],
[4,85,"A space-separated list of domains, optionally prefixed with \"`~`\", used for two distinct purposes described below. Defaults to the empty list.\n\nAny domains _not_ prefixed with \"`~`\" are used as search suffixes when resolving single-label hostnames (domain names which contain no dot), in order to qualify them into fully-qualified domain names (FQDNs). These \"search domains\" are strictly processed in the order they are specified in, until the name with the suffix appended is found. For compatibility reasons, if this setting is not specified, the search domains listed in `/etc/resolv.conf` with the `search` keyword are used instead, if that file exists and any domains are configured in it.\n\nThe domains prefixed with \"`~`\" are called \"route-only domains\". All domains listed here (_both search domains and route-only domains_ after removing the \"`~`\" prefix) define a search path that preferably directs DNS queries to this interface. This search path has an effect only when suitable per-link DNS servers are known. Such servers may be defined through the `DNS=` setting (see above) and dynamically at run time, for example from DHCP leases. If no per-link DNS servers are known, route-only domains have no effect.\n\nUse the construct \"`~.`\" (which is composed from \"`~`\" to indicate a route-only domain and \"`.`\" to indicate the DNS root domain that is the implied suffix of all DNS domains) to use the DNS servers defined for this link preferably for all domains.\n\nSee \"Protocols and Routing\" in [systemd-resolved.service(8)](systemd-resolved.service.html) for details of how search and route-only domains are used.\n\nNote that configuring the MulticastDNS domain \"`local`\" as search or routing domain has the effect of routing lookups for this domain to classic unicast DNS. This may be used to provide compatibility with legacy installations that use this domain in a unicast DNS context, against the IANA assignment of this domain to pure MulticastDNS purposes. Search and routing domains are a unicast DNS concept, they _cannot_ be used to resolve single-label lookups via MulticastDNS.","#Domains=",229],
[4,86,"Takes a boolean argument or \"`resolve`\". Controls Link-Local Multicast Name Resolution support ([RFC 4795](https://tools.ietf.org/html/rfc4795)) on the local host. If true, enables full LLMNR responder and resolver support. If false, disables both. If set to \"`resolve`\", only resolution support is enabled, but responding is disabled. Note that [systemd-networkd.service(8)](systemd-networkd.service.html) also maintains per-link LLMNR settings. LLMNR will be enabled on a link only if the per-link and the global setting is on.","#LLMNR=",216],
[4,87,"Takes a boolean argument or \"`resolve`\". Controls Multicast DNS support ([RFC 6762](https://tools.ietf.org/html/rfc6762)) on the local host. If true, enables full Multicast DNS responder and resolver support. If false, disables both. If set to \"`resolve`\", only resolution support is enabled, but responding is disabled. Note that [systemd-networkd.service(8)](systemd-networkd.service.html) also maintains per-link Multicast DNS settings. Multicast DNS will be enabled on a link only if the per-link and the global setting is on.","#MulticastDNS=",234],
[4,88,"Takes a boolean argument or \"`allow-downgrade`\".\n\nIf set to true, all DNS lookups are DNSSEC-validated locally (excluding LLMNR and Multicast DNS). If the response to a lookup request is detected to be invalid a lookup failure is returned to applications. Note that this mode requires a DNS server that supports DNSSEC. If the DNS server does not properly support DNSSEC all validations will fail.\n\nIf set to \"`allow-downgrade`\", DNSSEC validation is attempted, but if the server does not support DNSSEC properly, DNSSEC mode is automatically disabled. Note that this mode makes DNSSEC validation vulnerable to \"downgrade\" attacks, where an attacker might be able to trigger a downgrade to non-DNSSEC mode by synthesizing a DNS response that suggests DNSSEC was not supported.\n\nIf set to false, DNS lookups are not DNSSEC validated. In this mode, or when set to \"`allow-downgrade`\" and the downgrade has happened, the resolver becomes security-unaware and all forwarded queries have DNSSEC OK (DO) bit unset.\n\nNote that DNSSEC validation requires retrieval of additional DNS data, and thus results in a small DNS lookup time penalty.\n\nDNSSEC requires knowledge of \"trust anchors\" to prove data integrity. The trust anchor for the Internet root domain is built into the resolver, additional trust anchors may be defined with [dnssec-trust-anchors.d(5)](dnssec-trust-anchors.d.html). Trust anchors may change at regular intervals, and old trust anchors may be revoked. In such a case DNSSEC validation is not possible until new trust anchors are configured locally or the resolver software package is updated with the new root trust anchor. In effect, when the built-in trust anchor is revoked and `DNSSEC=` is true, all further lookups will fail, as it cannot be proved anymore whether lookups are correctly signed, or validly unsigned. If `DNSSEC=` is set to \"`allow-downgrade`\" the resolver will automatically turn off DNSSEC validation in such a case.\n\nClient programs looking up DNS data will be informed whether lookups could be verified using DNSSEC, or whether the returned data could not be verified (either because the data was found unsigned in the DNS, or the DNS server did not support DNSSEC or no appropriate trust anchors were known). In the latter case it is assumed that client programs employ a secondary scheme to validate the returned DNS data, should this be required.\n\nIt is recommended to set `DNSSEC=` to true on systems where it is known that the DNS server supports DNSSEC correctly, and where software or trust anchor updates happen regularly. On other systems it is recommended to set `DNSSEC=` to \"`allow-downgrade`\".\n\nIn addition to this global DNSSEC setting [systemd-networkd.service(8)](systemd-networkd.service.html) also maintains per-link DNSSEC settings. For system DNS servers (see above), only the global DNSSEC setting is in effect. For per-link DNS servers the per-link setting is in effect, unless it is unset in which case the global setting is used instead.\n\nSite-private DNS zones generally conflict with DNSSEC operation, unless a negative (if the private zone is not signed) or positive (if the private zone is signed) trust anchor is configured for them. If \"`allow-downgrade`\" mode is selected, it is attempted to detect site-private DNS zones using top-level domains (TLDs) that are not known by the DNS root server. This logic does not work in all private zone setups.\n\nDefaults to \"`allow-downgrade`\".","#DNSSEC=",229],
[4,89,"Takes a boolean argument or \"`opportunistic`\". If true all connections to the server will be encrypted. Note that this mode requires a DNS server that supports DNS-over-TLS and has a valid certificate. If the hostname was specified in `DNS=` by using the format \"`address#server_name`\" it is used to validate its certificate and also to enable Server Name Indication (SNI) when opening a TLS connection. Otherwise the certificate is checked against the server's IP. If the DNS server does not support DNS-over-TLS all DNS requests will fail.\n\nWhen set to \"`opportunistic`\" DNS request are attempted to send encrypted with DNS-over-TLS. If the DNS server does not support TLS, DNS-over-TLS is disabled. Note that this mode makes DNS-over-TLS vulnerable to \"downgrade\" attacks, where an attacker might be able to trigger a downgrade to non-encrypted mode by synthesizing a response that suggests DNS-over-TLS was not supported. If set to false, DNS lookups are send over UDP.\n\nNote that DNS-over-TLS requires additional data to be send for setting up an encrypted connection, and thus results in a small DNS look-up time penalty.\n\nNote that in \"`opportunistic`\" mode the resolver is not capable of authenticating the server, so it is vulnerable to \"man-in-the-middle\" attacks.\n\nIn addition to this global `DNSOverTLS=` setting [systemd-networkd.service(8)](systemd-networkd.service.html) also maintains per-link `DNSOverTLS=` settings. For system DNS servers (see above), only the global `DNSOverTLS=` setting is in effect. For per-link DNS servers the per-link setting is in effect, unless it is unset in which case the global setting is used instead.\n\nDefaults to \"`no`\".","#DNSOverTLS=",239],
[4,90,"Takes a boolean or \"`no-negative`\" as argument. If \"`yes`\" (the default), resolving a domain name which already got queried earlier will return the previous result as long as it is still valid, and thus does not result in a new network request. Be aware that turning off caching comes at a performance penalty, which is particularly high when DNSSEC is used. If \"`no-negative`\", only positive answers are cached.\n\nNote that caching is turned off by default for host-local DNS servers. See `CacheFromLocalhost=` for details.","#Cache=",231],
[4,91,"Takes a boolean as argument. If \"`no`\" (the default), and response cames from host-local IP address (such as 127.0.0.1 or ::1), the result wouldn't be cached in order to avoid potential duplicate local caching.","#CacheFromLocalhost=",248],
[4,92,"Takes a boolean argument or one of \"`udp`\" and \"`tcp`\". If \"`udp`\", a DNS stub resolver will listen for UDP requests on addresses 127.0.0.53 and 127.0.0.54, port 53. If \"`tcp`\", the stub will listen for TCP requests on the same addresses and port. If \"`yes`\" (the default), the stub listens for both UDP and TCP requests. If \"`no`\", the stub listener is disabled.\n\nThe DNS stub resolver on 127.0.0.53 provides the full feature set of the local resolver, which includes offering LLMNR/MulticastDNS resolution. The DNS stub resolver on 127.0.0.54 provides a more limited resolver, that operates in \"proxy\" mode only, i.e. it will pass most DNS messages relatively unmodified to the current upstream DNS servers and back, but not try to process the messages locally, and hence does not validate DNSSEC, or offer up LLMNR/MulticastDNS. (It will translate to DNS-over-TLS communication if needed however.)\n\nNote that the DNS stub listener is turned off implicitly when its listening address and port are already in use.","#DNSStubListener=",232],
[4,93,"Takes an IPv4 or IPv6 address to listen on. The address may be optionally prefixed with a protocol name (\"`udp`\" or \"`tcp`\") separated with \"`:`\". If the protocol is not specified, the service will listen on both UDP and TCP. It may be also optionally suffixed by a numeric port number with separator \"`:`\". When an IPv6 address is specified with a port number, then the address must be in the square brackets. If the port is not specified, then the service uses port 53. Note that this is independent of the primary DNS stub configured with `DNSStubListener=`, and only configures _additional_ sockets to listen on. This option can be specified multiple times. If an empty string is assigned, then the all previous assignments are cleared. Defaults to unset.\n\nExamples:\n\nDNSStubListenerExtra=192.168.10.10\nDNSStubListenerExtra=2001:db8:0:f102::10\nDNSStubListenerExtra=192.168.10.11:9953\nDNSStubListenerExtra=\\[2001:db8:0:f102::11\\]:9953\nDNSStubListenerExtra=tcp:192.168.10.12\nDNSStubListenerExtra=udp:2001:db8:0:f102::12\nDNSStubListenerExtra=tcp:192.168.10.13:9953\nDNSStubListenerExtra=udp:\\[2001:db8:0:f102::13\\]:9953","#DNSStubListenerExtra=",247],
[4,94,"Takes a boolean argument. If \"`yes`\" (the default), **systemd-resolved** will read `/etc/hosts`, and try to resolve hosts or address by using the entries in the file before sending query to DNS servers.","#ReadEtcHosts=",240],
[4,95,"Takes a boolean argument. When false (the default), **systemd-resolved** will not resolve A and AAAA queries for single-label names over classic DNS. Note that such names may still be resolved if search domains are specified (see `Domains=` above), or using other mechanisms, in particular via LLMNR or from `/etc/hosts`. When true, queries for single-label names will be forwarded to global DNS servers even if no search domains are defined.\n\nThis option is provided for compatibility with configurations where _public DNS servers are not used_. Forwarding single-label names to servers not under your control is not standard-conformant, see [IAB Statement](https://www.iab.org/documents/correspondence-reports-documents/2013-2/iab-statement-dotless-domains-considered-harmful/), and may create a privacy and security risk.","#ResolveUnicastSingleLabel=",246],
[2,"Cache",[],90,17,2],
[2,"CacheFromLocalhost",[],91,17,2],
[2,"DNS",[],83,17,2],
[2,"DNSOverTLS","b",89,17,2],
[2,"DNSSEC","b",88,17,2],
[2,"DNSStubListener","b",92,17,2],
[2,"DNSStubListenerExtra",[],93,17,2],
[2,"Domains",[],85,17,2],
[2,"FallbackDNS",[],84,17,2],
[2,"LLMNR","b",86,17,2],
[2,"MulticastDNS","b",87,17,2],
[2,"ReadEtcHosts","b",94,17,2],
[2,"ResolveUnicastSingleLabel","b",95,17,2],
[3,18,"systemd-backlight@.service(8)","systemd-backlight@.service, systemd-backlight â€” Load and save the display backlight brightness at boot and shutdown","systemd-backlight@.service.html"],
[4,96,"Takes a boolean argument. Defaults to \"`1`\". If \"`0`\", does not restore the backlight settings on boot. However, settings will still be stored on shutdown.","#systemd.restore_state=",209],
[2,"systemd.restore_state","b",96,18,null],
[3,19,"systemd-battery-check.service(8)","systemd-battery-check.service, systemd-battery-check â€” Check battery level whether there's enough charge, and power off if not","systemd-battery-check.service.html"],
[4,97,"Takes a boolean. If specified with false, **systemd-battery-check** command will return immediately with exit status 0 without checking battery capacity and AC power existence, and the service `systemd-battery-check.service` will succeed. This may be useful when the command wrongly detects and reports battery capacity percentage or AC power existence, or when you want to boot the system forcibly.","#systemd.battery-check=BOOL",254],
[2,"systemd.battery-check",["BOOL"],97,19,null],
[3,20,"systemd-coredump(8)","systemd-coredump, systemd-coredump.socket, systemd-coredump@.service â€” Acquire, save and process core dumps","systemd-coredump.html"],
[4,98,"The process number (PID), owner user number (UID), and group number (GID) of the crashed process.\n\nWhen the crashed process was part of a container (or in a process or user namespace in general), those are the values as seen _outside_, in the namespace where `systemd-coredump` is running.","#COREDUMP_UID=",248],
[4,99,"The time of the crash as reported by the kernel (in Î¼s since the epoch).","#COREDUMP_TIMESTAMP=",248],
[4,100,"The core file size soft resource limit, see [getrlimit(2)](https://man7.org/linux/man-pages/man2/getrlimit.2.html).","#COREDUMP_RLIMIT=",248],
[4,101,"The system unit and slice names.\n\nWhen the crashed process was in container, those are the units names _outside_, in the main system manager.","#COREDUMP_UNIT=",248],
[4,102,"The primary cgroup of the unit of the crashed process.\n\nWhen the crashed process was in a container, this is the full path, as seen outside of the container.","#COREDUMP_CGROUP=",248],
[4,103,"Control group information in the format used in `/proc/self/cgroup`. On systems with the unified cgroup hierarchy, this is a single path prefixed with \"`0::`\", and multiple paths prefixed with controller numbers on legacy systems.\n\nWhen the crashed process was in a container, this is the full path, as seen outside of the container.","#COREDUMP_PROC_CGROUP=",248],
[4,104,"The numerical UID of the user owning the login session or systemd user unit of the crashed process, the user manager unit, and the session identifier. All three fields are only present for user processes.\n\nWhen the crashed process was in container, those are the values _outside_, in the main system.","#COREDUMP_OWNER_UID=",248],
[4,105,"The terminating signal name (with the \"`SIG`\" prefix [\\[1\\]](#ftn.id-1.7.6.8.3.1.2)) and numerical value. (Both are included because signal numbers vary by architecture.)","#COREDUMP_SIGNAL_NAME=",248],
[4,106,"The current working directory and root directory of the crashed process.\n\nWhen the crashed process is in a container, those paths are relative to the root of the container's mount namespace.","#COREDUMP_CWD=",248],
[4,107,"Information about open file descriptors, in the following format:\n\n_`fd`_:_`/path/to/file`_\npos:     ...\nflags:   ...\n...\n\n_`fd`_:_`/path/to/file`_\npos:     ...\nflags:   ...\n...\n        \n\nThe first line contains the file descriptor number _`fd`_ and the path, while subsequent lines show the contents of <code>/proc/<em><code>pid</code></em>/fdinfo/<em><code>fd</code></em></code>.","#COREDUMP_OPEN_FDS=",248],
[4,108,"The destination of the <code>/proc/<em><code>pid</code></em>/exe</code> symlink.\n\nWhen the crashed process is in a container, that path is relative to the root of the container's mount namespace.","#COREDUMP_EXE=",248],
[4,109,"Fields that map the per-process entries in the `/proc/` filesystem: <code>/proc/<em><code>pid</code></em>/cmdline</code> (the command line of the crashed process), <code>/proc/<em><code>pid</code></em>/comm</code> (the command name associated with the process), <code>/proc/<em><code>pid</code></em>/environ</code> (the environment block of the crashed process), <code>/proc/<em><code>pid</code></em>/auxv</code> (the auxiliary vector of the crashed process, see [getauxval(3)](https://man7.org/linux/man-pages/man3/getauxval.3.html)), <code>/proc/<em><code>pid</code></em>/limits</code> (the soft and hard resource limits), <code>/proc/<em><code>pid</code></em>/maps</code> (memory regions visible to the process and their access permissions), <code>/proc/<em><code>pid</code></em>/mountinfo</code> (mount points in the process's mount namespace), <code>/proc/<em><code>pid</code></em>/status</code> (various metadata about the process).\n\nSee [proc(5)](https://man7.org/linux/man-pages/man5/proc.5.html) for more information.","#COREDUMP_CMDLINE=",248],
[4,110,"The system hostname.\n\nWhen the crashed process was in container, this is the container hostname.","#COREDUMP_HOSTNAME=",248],
[4,111,"For processes running in a container, the command line of the process spawning the container (the first parent process with a different mount namespace).","#COREDUMP_CONTAINER_CMDLINE=",248],
[4,112,"When the core is stored in the journal, the core image itself.","#COREDUMP=",248],
[4,113,"When the core is stored externally, the path to the core file.","#COREDUMP_FILENAME=",248],
[4,114,"Set to \"`1`\" when the saved coredump was truncated. (A partial core image may still be processed by some tools, though obviously not all information is available.)","#COREDUMP_TRUNCATED=",248],
[4,115,"If the executable contained .package metadata ELF notes, they will be parsed and attached. The `package` and `packageVersion` of the 'main' ELF module (ie: the executable) will be appended individually. The JSON-formatted content of all modules will be appended as a single JSON object, each with the module name as the key. For more information about this metadata format and content, see [the coredump metadata spec](https://systemd.io/COREDUMP_PACKAGE_METADATA/).","#COREDUMP_PACKAGE_NAME=",249],
[4,116,"The message generated by **systemd-coredump** that includes the backtrace if it was successfully generated. When **systemd-coredump** is invoked with `--backtrace`, this field is provided by the caller.","#MESSAGE=",248],
[2,"COREDUMP",[],112,20,null],
[2,"COREDUMP_CGROUP",[],102,20,null],
[2,"COREDUMP_CMDLINE",[],109,20,null],
[2,"COREDUMP_COMM",[],109,20,null],
[2,"COREDUMP_CONTAINER_CMDLINE",[],111,20,null],
[2,"COREDUMP_CWD",[],106,20,null],
[2,"COREDUMP_ENVIRON",[],109,20,null],
[2,"COREDUMP_EXE",[],108,20,null],
[2,"COREDUMP_FILENAME",[],113,20,null],
[2,"COREDUMP_GID",[],98,20,null],
[2,"COREDUMP_HOSTNAME",[],110,20,null],
[2,"COREDUMP_OPEN_FDS",[],107,20,null],
[2,"COREDUMP_OWNER_UID",[],104,20,null],
[2,"COREDUMP_PACKAGE_JSON",[],115,20,null],
[2,"COREDUMP_PACKAGE_NAME",[],115,20,null],
[2,"COREDUMP_PACKAGE_VERSION",[],115,20,null],
[2,"COREDUMP_PID",[],98,20,null],
[2,"COREDUMP_PROC_AUXV",[],109,20,null],
[2,"COREDUMP_PROC_CGROUP",[],103,20,null],
[2,"COREDUMP_PROC_LIMITS",[],109,20,null],
[2,"COREDUMP_PROC_MAPS",[],109,20,null],
[2,"COREDUMP_PROC_MOUNTINFO",[],109,20,null],
[2,"COREDUMP_PROC_STATUS",[],109,20,null],
[2,"COREDUMP_RLIMIT",[],100,20,null],
[2,"COREDUMP_ROOT",[],106,20,null],
[2,"COREDUMP_SESSION",[],104,20,null],
[2,"COREDUMP_SIGNAL",[],105,20,null],
[2,"COREDUMP_SIGNAL_NAME",[],105,20,null],
[2,"COREDUMP_SLICE",[],101,20,null],
[2,"COREDUMP_TIMESTAMP",[],99,20,null],
[2,"COREDUMP_TRUNCATED",[],114,20,null],
[2,"COREDUMP_UID",[],98,20,null],
[2,"COREDUMP_UNIT",[],101,20,null],
[2,"COREDUMP_USER_UNIT",[],104,20,null],
[2,"MESSAGE",[],116,20,null],
[3,21,"systemd-cryptsetup-generator(8)","systemd-cryptsetup-generator â€” Unit generator for /etc/crypttab","systemd-cryptsetup-generator.html"],
[4,117,"Takes a boolean argument. Defaults to \"`yes`\". If \"`no`\", disables the generator entirely. `rd.luks=` is honored only in the initrd while `luks=` is honored by both the main system and in the initrd.","#luks=",186],
[4,118,"Takes a boolean argument. Defaults to \"`yes`\". If \"`no`\", causes the generator to ignore any devices configured in `/etc/crypttab` (`luks.uuid=` will still work however). `rd.luks.crypttab=` is honored only in initrd while `luks.crypttab=` is honored by both the main system and in the initrd.","#luks.crypttab=",186],
[4,119,"Takes a LUKS superblock UUID as argument. This will activate the specified device as part of the boot process as if it was listed in `/etc/crypttab`. This option may be specified more than once in order to set up multiple devices. `rd.luks.uuid=` is honored only in the initrd, while `luks.uuid=` is honored by both the main system and in the initrd.\n\nIf `/etc/crypttab` contains entries with the same UUID, then the name, keyfile and options specified there will be used. Otherwise, the device will have the name \"`luks-UUID`\".\n\nIf `/etc/crypttab` exists, only those UUIDs specified on the kernel command line will be activated in the initrd or the real root.","#luks.uuid=",186],
[4,120,"Takes a LUKS super block UUID followed by an \"`=`\" and a name. This implies `rd.luks.uuid=` or `luks.uuid=` and will additionally make the LUKS device given by the UUID appear under the provided name.\n\nThis parameter is the analogue of the first [crypttab(5)](crypttab.html) field _`volume-name`_.\n\n`rd.luks.name=` is honored only in the initrd, while `luks.name=` is honored by both the main system and in the initrd.","#luks.name=",218],
[4,121,"Takes a LUKS super block UUID followed by a \"`=`\" and a block device specification for device hosting encrypted data.\n\nFor those entries specified with `rd.luks.uuid=` or `luks.uuid=`, the data device will be set to the one specified by `rd.luks.data=` or `luks.data=` of the corresponding UUID.\n\nLUKS data device parameter is useful for specifying encrypted data devices with detached headers specified in `luks.options` entry containing \"`header=`\" argument. For example, `rd.luks.uuid=`b40f1abf-2a53-400a-889a-2eccc27eaa40 `rd.luks.options=`b40f1abf-2a53-400a-889a-2eccc27eaa40=header=/path/to/luks.hdr `rd.luks.data=`b40f1abf-2a53-400a-889a-2eccc27eaa40=/dev/sdx. Hence, in this case, we will attempt to unlock LUKS device assembled from data device \"`/dev/sdx`\" and LUKS header (metadata) put in \"`/path/to/luks.hdr`\" file. This syntax is for now only supported on a per-device basis, i.e. you have to specify LUKS device UUID.\n\nThis parameter is the analogue of the second [crypttab(5)](crypttab.html) field _`encrypted-device`_.\n\n`rd.luks.data=` is honored only in the initrd, while `luks.data=` is honored by both the main system and in the initrd.","#luks.data=",247],
[4,122,"Takes a password file name as argument or a LUKS super block UUID followed by a \"`=`\" and a password file name.\n\nFor those entries specified with `rd.luks.uuid=` or `luks.uuid=`, the password file will be set to the one specified by `rd.luks.key=` or `luks.key=` of the corresponding UUID, or the password file that was specified without a UUID.\n\nIt is also possible to specify an external device which should be mounted before we attempt to unlock the LUKS device. systemd-cryptsetup will use password file stored on that device. Device containing password file is specified by appending colon and a device identifier to the password file path. For example, `rd.luks.uuid=`b40f1abf-2a53-400a-889a-2eccc27eaa40 `rd.luks.key=`b40f1abf-2a53-400a-889a-2eccc27eaa40=/keyfile:LABEL=keydev. Hence, in this case, we will attempt to mount file system residing on the block device with label \"`keydev`\". This syntax is for now only supported on a per-device basis, i.e. you have to specify LUKS device UUID.\n\nThis parameter is the analogue of the third [crypttab(5)](crypttab.html) field _`key-file`_.\n\n`rd.luks.key=` is honored only in the initrd, while `luks.key=` is honored by both the main system and in the initrd.","#luks.key=",202],
[4,123,"Takes a LUKS super block UUID followed by an \"`=`\" and a string of options separated by commas as argument. This will override the options for the given UUID.\n\nIf only a list of options, without a UUID, is specified, they apply to any UUIDs not specified elsewhere, and without an entry in `/etc/crypttab`.\n\nThis parameter is the analogue of the fourth [crypttab(5)](crypttab.html) field _`options`_.\n\nIt is possible to specify an external device which should be mounted before we attempt to unlock the LUKS device. systemd-cryptsetup will assemble LUKS device by combining data device specified in `luks.data` with detached LUKS header found in \"`header=`\" argument. For example, `rd.luks.uuid=`b40f1abf-2a53-400a-889a-2eccc27eaa40 `rd.luks.options=`b40f1abf-2a53-400a-889a-2eccc27eaa40=header=/luks.hdr:LABEL=hdrdev `rd.luks.data=`b40f1abf-2a53-400a-889a-2eccc27eaa40=/dev/sdx. Hence, in this case, we will attempt to mount file system residing on the block device with label \"`hdrdev`\", and look for \"`luks.hdr`\" on that file system. Said header will be used to unlock (decrypt) encrypted data stored on /dev/sdx. This syntax is for now only supported on a per-device basis, i.e. you have to specify LUKS device UUID.\n\n`rd.luks.options=` is honored only by initial RAM disk (initrd) while `luks.options=` is honored by both the main system and in the initrd.","#luks.options=",208],
[2,"luks","b",117,21,null],
[2,"luks.crypttab","b",118,21,null],
[2,"luks.data",[],121,21,null],
[2,"luks.key",[],122,21,null],
[2,"luks.name",[],120,21,null],
[2,"luks.options",[],123,21,null],
[2,"luks.uuid",[],119,21,null],
[2,"rd.luks","b",117,21,null],
[2,"rd.luks.crypttab","b",118,21,null],
[2,"rd.luks.data",[],121,21,null],
[2,"rd.luks.key",[],122,21,null],
[2,"rd.luks.name",[],120,21,null],
[2,"rd.luks.options",[],123,21,null],
[2,"rd.luks.uuid",[],119,21,null],
[3,22,"systemd-firstboot(1)","systemd-firstboot, systemd-firstboot.service â€” Initialize basic system settings on or before the first boot-up of a system","systemd-firstboot.html"],
[4,124,"Takes a boolean argument, defaults to on. If off, `systemd-firstboot.service` won't interactively query the user for basic settings at first boot, even if those settings are not initialized yet.","#systemd.firstboot=",233],
[2,"systemd.firstboot","b",124,22,null],
[3,23,"systemd-fsck@.service(8)","systemd-fsck@.service, systemd-fsck-root.service, systemd-fsck-usr.service, systemd-fsck â€” File system checker logic","systemd-fsck@.service.html"],
[4,125,"One of \"`auto`\", \"`force`\", \"`skip`\". Controls the mode of operation. The default is \"`auto`\", and ensures that file system checks are done when the file system checker deems them necessary. \"`force`\" unconditionally results in full file system checks. \"`skip`\" skips any file system checks.","#fsck.mode=",186],
[4,126,"One of \"`preen`\", \"`yes`\", \"`no`\". Controls the mode of operation. The default is \"`preen`\", and will automatically repair problems that can be safely fixed. \"`yes`\" will answer yes to all questions by fsck and \"`no`\" will answer no to all questions.","#fsck.repair=",213],
[2,"fsck.mode",[],125,23,null],
[2,"fsck.repair",[],126,23,null],
[3,24,"systemd-fstab-generator(8)","systemd-fstab-generator â€” Unit generator for /etc/fstab","systemd-fstab-generator.html"],
[4,127,"Takes a boolean argument. Defaults to \"`yes`\". If \"`no`\", causes the generator to ignore any mounts or swap devices configured in `/etc/fstab`. `rd.fstab=` is honored only in the initrd, while `fstab=` is honored by both the main system and the initrd.","#fstab=",186],
[4,128,"Configures the operating system's root filesystem to mount when running in the initrd. This accepts a device node path (usually `/dev/disk/by-uuid/â€¦` or `/dev/disk/by-label/â€¦` or similar), or the special values \"`gpt-auto`\", \"`fstab`\", and \"`tmpfs`\".\n\nUse \"`gpt-auto`\" to explicitly request automatic root file system discovery via [systemd-gpt-auto-generator(8)](systemd-gpt-auto-generator.html).\n\nUse \"`fstab`\" to explicitly request automatic root file system discovery via the initrd `/etc/fstab` rather than via kernel command line.\n\nUse \"`tmpfs`\" in order to mount a [tmpfs(5)](https://man7.org/linux/man-pages/man5/tmpfs.5.html) file system as root file system of the OS. This is useful in combination with `mount.usr=` (see below) in order to combine a volatile root file system with a separate, immutable `/usr/` file system. Also see `systemd.volatile=` below.","#root=",217],
[4,129,"Takes the root filesystem type that will be passed to the mount command. `rootfstype=` is honored by the initrd.","#rootfstype=",217],
[4,130,"Takes the root filesystem mount options to use. `rootflags=` is honored by the initrd.\n\nNote that unlike most kernel command line options this setting does not override settings made in configuration files (specifically: the mount option string in `/etc/fstab`). See [systemd-remount-fs.service(8)](systemd-remount-fs.service.html).","#rootflags=",217],
[4,131,"Takes the `/usr/` filesystem to be mounted by the initrd. If `mount.usrfstype=` or `mount.usrflags=` is set, then `mount.usr=` will default to the value set in `root=`.\n\nOtherwise, this parameter defaults to the `/usr/` entry found in `/etc/fstab` on the root filesystem.\n\n`mount.usr=` is honored by the initrd.","#mount.usr=",217],
[4,132,"Takes the `/usr/` filesystem type that will be passed to the mount command. If `mount.usr=` or `mount.usrflags=` is set, then `mount.usrfstype=` will default to the value set in `rootfstype=`.\n\nOtherwise, this value will be read from the `/usr/` entry in `/etc/fstab` on the root filesystem.\n\n`mount.usrfstype=` is honored by the initrd.","#mount.usrfstype=",217],
[4,133,"Takes the `/usr/` filesystem mount options to use. If `mount.usr=` or `mount.usrfstype=` is set, then `mount.usrflags=` will default to the value set in `rootflags=`.\n\nOtherwise, this value will be read from the `/usr/` entry in `/etc/fstab` on the root filesystem.\n\n`mount.usrflags=` is honored by the initrd.","#mount.usrflags=",217],
[4,134,"These options are primarily read by [systemd-veritysetup-generator(8)](systemd-veritysetup-generator.html). When set this indicates that the root file system (or `/usr/`) shall be mounted from Verity volumes with the specified hashes. If these kernel command line options are set the root (or `/usr/`) file system is thus mounted from a device mapper volume `/dev/mapper/root` (or `/dev/mapper/usr`).","#roothash=",251],
[4,135,"Controls whether the system shall boot up in volatile mode. Takes a boolean argument or the special value `state`.\n\nIf false (the default), this generator makes no changes to the mount tree and the system is booted up in normal mode.\n\nIf true the generator ensures [systemd-volatile-root.service(8)](systemd-volatile-root.service.html) is run in the initrd. This service changes the mount table before transitioning to the host system, so that a volatile memory file system (\"`tmpfs`\") is used as root directory, with only `/usr/` mounted into it from the configured root file system, in read-only mode. This way the system operates in fully stateless mode, with all configuration and state reset at boot and lost at shutdown, as `/etc/` and `/var/` will be served from the (initially unpopulated) volatile memory file system.\n\nIf set to `state` the generator will leave the root directory mount point unaltered, however will mount a \"`tmpfs`\" file system to `/var/`. In this mode the normal system configuration (i.e. the contents of \"`/etc/`\") is in effect (and may be modified during system runtime), however the system state (i.e. the contents of \"`/var/`\") is reset at boot and lost at shutdown.\n\nIf this setting is set to \"`overlay`\" the root file system is set up as \"`overlayfs`\" mount combining the read-only root directory with a writable \"`tmpfs`\", so that no modifications are made to disk, but the file system may be modified nonetheless with all changes being lost at reboot.\n\nNote that in none of these modes the root directory, `/etc/`, `/var/` or any other resources stored in the root file system are physically removed. It's thus safe to boot a system that is normally operated in non-volatile mode temporarily into volatile mode, without losing data.\n\nNote that with the exception of \"`overlay`\" mode, enabling this setting will only work correctly on operating systems that can boot up with only `/usr/` mounted, and are able to automatically populate `/etc/`, and also `/var/` in case of \"`systemd.volatile=yes`\".\n\nAlso see `root=tmpfs` above, for a method to combine a \"`tmpfs`\" file system with a regular `/usr/` file system (as configured via `mount.usr=`). The main distinction between `systemd.volatile=yes`, and `root=tmpfs` in combination `mount.usr=` is that the former operates on top of a regular root file system and temporarily obstructs the files and directories above its `/usr/` subdirectory, while the latter does not hide any files, but simply mounts a unpopulated tmpfs as root file system and combines it with a user picked `/usr/` file system.","#systemd.volatile=",233],
[4,136,"Takes a boolean argument or enables the option if specified without an argument. If disabled, causes the generator to ignore any swap devices configured in `/etc/fstab`. Defaults to enabled.","#systemd.swap=",246],
[4,137,"Specifies the mount unit. Takes at least two and at most four fields separated with a colon (\"`:`\"). Each field is handled as the corresponding fstab field. This option can be specified multiple times. `rd.systemd.mount-extra=` is honored only in the initrd, while `systemd.mount-extra=` is honored by both the main system and the initrd. In the initrd, the mount point (and also source path if the mount is bind mount) specified in `systemd.mount-extra=` is prefixed with `/sysroot/`.\n\nExample:\n\nsystemd.mount-extra=/dev/sda1:/mount-point:ext4:rw,noatime","#systemd.mount-extra=WHAT:WHERE%5B:FSTYPE%5B:OPTIONS%5D%5D",254],
[4,138,"Specifies the swap unit. Takes the block device to be used as a swap device, and optionally takes mount options followed by a colon (\"`:`\"). This option can be specified multiple times. `rd.systemd.swap-extra=` is honored only in the initrd, while `systemd.swap-extra=` is honored by both the main system and the initrd.\n\nExample:\n\nsystemd.swap-extra=/dev/sda2:x-systemd.makefs","#systemd.swap-extra=WHAT%5B:OPTIONS%5D",254],
[2,"fstab","b",127,24,null],
[2,"mount.usr",[],131,24,null],
[2,"mount.usrflags",[],133,24,null],
[2,"mount.usrfstype",[],132,24,null],
[2,"rd.fstab","b",127,24,null],
[2,"rd.systemd.mount-extra",["WHAT:WHERE[:FSTYPE[:OPTIONS]]"],137,24,null],
[2,"rd.systemd.swap-extra",["WHAT[:OPTIONS]"],138,24,null],
[2,"root",[],128,24,null],
[2,"rootflags",[],130,24,null],
[2,"rootfstype",[],129,24,null],
[2,"roothash",[],134,24,null],
[2,"systemd.mount-extra",["WHAT:WHERE[:FSTYPE[:OPTIONS]]"],137,24,null],
[2,"systemd.swap","b",136,24,null],
[2,"systemd.swap-extra",["WHAT[:OPTIONS]"],138,24,null],
[2,"systemd.volatile","b",135,24,null],
[2,"usrhash",[],134,24,null],
[3,25,"systemd-getty-generator(8)","systemd-getty-generator â€” Generator for enabling getty instances on the console","systemd-getty-generator.html"],
[4,139,"this options take an optional boolean argument, and default to yes. The generator is enabled by default, and a false value may be used to disable it.","#systemd.getty_auto=",250],
[2,"systemd.getty_auto",[],139,25,null],
[3,26,"systemd-gpt-auto-generator(8)","systemd-gpt-auto-generator â€” Generator for automatically discovering and mounting root, /home/, /srv/, /var/ and /var/tmp/ partitions, as well as discovering and enabling swap partitions, based on GPT partition type GUIDs","systemd-gpt-auto-generator.html"],
[4,140,"Takes an image dissection policy string as argument (as per [systemd.image-policy(7)](systemd.image-policy.html)), and allows enforcing a policy on dissection and use of the automatically discovered GPT partition table entries.","#systemd.image_policy=",254],
[4,141,"When `root=` is used with the special value \"`gpt-auto`\" (or if the parameter is not used at all), automatic discovery of the root partition based on the GPT partition type is enabled. Any other value disables this logic.\n\nThe `rootfstype=` and `rootflags=` are used to select the file system type and options when the root file system is automatically discovered.","#root=",242],
[4,142,"Takes a boolean argument or enables the option if specified without an argument. If disabled, automatic discovery of swap partition(s) based on GPT partition type is disabled. Defaults to enabled.","#systemd.swap=",254],
[2,"rd.systemd.image_policy",[],140,26,null],
[2,"root",[],141,26,null],
[2,"rootflags",[],141,26,null],
[2,"rootfstype",[],141,26,null],
[2,"systemd.image_policy",[],140,26,null],
[2,"systemd.swap","b",142,26,null],
[3,27,"systemd-hibernate-resume-generator(8)","systemd-hibernate-resume-generator â€” Unit generator for resume= kernel parameter","systemd-hibernate-resume-generator.html"],
[4,143,"Takes a path to the resume device. Both persistent block device paths like `/dev/disk/by-foo/bar` and [fstab(5)](https://man7.org/linux/man-pages/man5/fstab.5.html)\\-style specifiers like \"`FOO=bar`\" are supported.","#resume=",217],
[4,144,"Takes the page offset of the swap space from the resume device. Defaults to \"`0`\".","#resume_offset=",254],
[4,145,"Takes the resume device mount options to use. Defaults `rootflags=` if not specified.","#resumeflags=",243],
[2,"resume",[],143,27,null],
[2,"resume_offset",[],144,27,null],
[2,"resumeflags",[],145,27,null],
[3,28,"systemd-journald.service(8)","systemd-journald.service, systemd-journald.socket, systemd-journald-dev-log.socket, systemd-journald-audit.socket, systemd-journald@.service, systemd-journald@.socket, systemd-journald-varlink@.socket, systemd-journald â€” Journal service","systemd-journald.service.html"],
[4,146,"Enables/disables forwarding of collected log messages to syslog, the kernel log buffer, the system console or wall.\n\nSee [journald.conf(5)](journald.conf.html) for information about these settings.","#systemd.journald.forward_to_syslog=",186],
[2,"systemd.journald.forward_to_console",[],146,28,null],
[2,"systemd.journald.forward_to_kmsg",[],146,28,null],
[2,"systemd.journald.forward_to_syslog",[],146,28,null],
[2,"systemd.journald.forward_to_wall",[],146,28,null],
[3,29,"systemd-modules-load.service(8)","systemd-modules-load.service, systemd-modules-load â€” Load kernel modules at boot","systemd-modules-load.service.html"],
[4,147,"Takes a comma-separated list of kernel modules to statically load during early boot. The option prefixed with \"`rd.`\" is read in the initrd only.","#modules_load=",187],
[2,"modules_load",[],147,29,null],
[2,"rd.modules_load",[],147,29,null],
[3,30,"systemd-mount(1)","systemd-mount, systemd-umount â€” Establish and destroy transient mount or auto-mount points","systemd-mount.html"],
[4,148,"The mount options to use, if `--options=` is not used.","#SYSTEMD_MOUNT_OPTIONS=",232],
[4,149,"The file system path to place the mount point at, instead of the automatically generated one.","#SYSTEMD_MOUNT_WHERE=",232],
[2,"SYSTEMD_MOUNT_OPTIONS",[],148,30,null],
[2,"SYSTEMD_MOUNT_WHERE",[],149,30,null],
[3,31,"systemd-network-generator.service(8)","systemd-network-generator.service, systemd-network-generator â€” Generate network configuration from the kernel command line","systemd-network-generator.service.html"],
[4,150,"Translated into [systemd.network(5)](systemd.network.html) files.\n\nIn addition to the parameters [dracut.cmdline(7)](https://man7.org/linux/man-pages/man7/dracut.cmdline.7.html) defines the `ip=` option accepts the special value \"`link-local`\". If selected, the network interfaces will be configured for link-local addressing (IPv4LL, IPv6LL) only, DHCP or IPv6RA will not be enabled.","#ip=",245],
[4,151,"Translated into [systemd.link(5)](systemd.link.html) files.","#ifname=",245],
[4,152,"Translated into [systemd.netdev(5)](systemd.netdev.html) files.","#vlan=",245],
[2,"bond",[],152,31,null],
[2,"bootdev",[],152,31,null],
[2,"bridge",[],152,31,null],
[2,"ifname",[],151,31,null],
[2,"ip",[],150,31,null],
[2,"nameserver",[],150,31,null],
[2,"net.ifname-policy",[],151,31,null],
[2,"rd.peerdns",[],150,31,null],
[2,"rd.route",[],150,31,null],
[2,"vlan",[],152,31,null],
[3,32,"systemd-quotacheck.service(8)","systemd-quotacheck.service, systemd-quotacheck â€” File system quota checker logic","systemd-quotacheck.service.html"],
[4,153,"One of \"`auto`\", \"`force`\", \"`skip`\". Controls the mode of operation. The default is \"`auto`\", and ensures that file system quota checks are done when the file system quota checker deems them necessary. \"`force`\" unconditionally results in full file system quota checks. \"`skip`\" skips any file system quota checks.","#quotacheck.mode=",186],
[2,"quotacheck.mode",[],153,32,null],
[3,33,"systemd-resolved.service(8)","systemd-resolved.service, systemd-resolved â€” Network Name Resolution manager","systemd-resolved.service.html"],
[4,154,"Takes the IP address of a DNS server (in case of `nameserver=`), and a DNS search domain (in case of `domain=`). May be used multiple times, to define multiple DNS servers/search domains. If either of these options are specified `/etc/resolv.conf` will not be read and the `DNS=` and `Domains=` settings of [resolved.conf(5)](resolved.conf.html) will be ignored. These two kernel command line options hence override system configuration.","#nameserver=",253],
[2,"domain",[],154,33,null],
[2,"nameserver",[],154,33,null],
[3,34,"systemd-rfkill.service(8)","systemd-rfkill.service, systemd-rfkill.socket, systemd-rfkill â€” Load and save the RF kill switch state at boot and change","systemd-rfkill.service.html"],
[4,155,"Takes a boolean argument. Defaults to \"`1`\". If \"`0`\", does not restore the rfkill settings on boot. However, settings will still be stored on shutdown.","#systemd.restore_state=",227],
[2,"systemd.restore_state","b",155,34,null],
[3,37,"systemd-udevd.service(8)","systemd-udevd.service, systemd-udevd-control.socket, systemd-udevd-kernel.socket, systemd-udevd â€” Device event managing daemon","systemd-udevd.service.html"],
[4,156,"Set the log level.","#udev.log_level=",247],
[4,157,"Limit the number of events executed in parallel.","#udev.children_max=",186],
[4,158,"Delay the execution of each <code>RUN{<em><code>program</code></em>}</code> parameter by the given number of seconds. This option might be useful when debugging system crashes during coldplug caused by loading non-working kernel modules.","#udev.exec_delay=",186],
[4,159,"Wait for events to finish up to the given number of seconds. This option might be useful if events are terminated due to kernel drivers taking too long to initialize.","#udev.event_timeout=",216],
[4,160,"Specifies a signal that `systemd-udevd` will send to workers on timeout. Note that kernel command line option overrides both the setting in the configuration file and the one on the program command line.","#udev.timeout_signal=",246],
[4,161,"Network interfaces are renamed to give them predictable names when possible. It is enabled by default; specifying 0 disables it.","#net.ifnames=",199],
[4,162,"Network interfaces are renamed to give them predictable names when possible (unless `net.ifnames=0` is specified, see above). With this kernel command line option it is possible to pick a specific version of this algorithm and override the default chosen at compilation time. Expects one of the naming scheme identifiers listed in [systemd.net-naming-scheme(7)](systemd.net-naming-scheme.html), or \"`latest`\" to select the latest scheme known (to this particular version of `systemd-udevd.service`).\n\nNote that selecting a specific scheme is not sufficient to fully stabilize interface naming: the naming is generally derived from driver attributes exposed by the kernel. As the kernel is updated, previously missing attributes `systemd-udevd.service` is checking might appear, which affects older name derivation algorithms, too.","#net.naming-scheme=",240],
[4,163,"Specifies naming policies applied when renaming network interfaces. Takes a list of policies and an optional MAC address separated with comma. Each policy value must be one of the policies understood by the `NamePolicy=` setting in .link files, e.g. \"`onboard`\" or \"`path`\". See [systemd.link(5)](systemd.link.html) for more details. When the MAC address is specified, the policies are applied to the interface which has the address. When no MAC address is specified, the policies are applied to all interfaces. This kernel command line argument can be specified multiple times.\n\nThis argument is not directly read by **systemd-udevd**, but is instead converted to a .link file by [systemd-network-generator.service(8)](systemd-network-generator.service.html). For this argument to take effect, `systemd-network-generator.service` must be enabled.\n\nExample:\n\nnet.ifname-policy=keep,kernel,path,slot,onboard,01:23:45:67:89:ab\nnet.ifname-policy=keep,kernel,path,slot,onboard,mac\n\nThis is mostly equivalent to creating the following .link files:\n\n\\# 91-name-policy-with-mac.link\n\\[Match\\]\nMACAddress=01:23:45:67:89:ab\n\n\\[Link\\]\nNamePolicy=keep kernel path slot onboard\nAlternativeNamePolicy=path slot onboard\n\nand\n\n\\# 92-name-policy-for-all.link\n\\[Match\\]\nOriginalName=\\*\n\n\\[Link\\]\nNamePolicy=keep kernel path slot onboard mac\nAlternativeNamePolicy=path slot onboard mac","#net.ifname-policy=policy1%5B,policy2,%E2%80%A6%5D%5B,MAC%5D",250],
[2,"net.ifname-policy",["policy1[,policy2,â€¦][,MAC]"],163,37,null],
[2,"net.ifnames",[],161,37,null],
[2,"net.naming-scheme",[],162,37,null],
[2,"rd.udev.children_max",[],157,37,null],
[2,"rd.udev.event_timeout",[],159,37,null],
[2,"rd.udev.exec_delay",[],158,37,null],
[2,"rd.udev.log_level",[],156,37,null],
[2,"rd.udev.timeout_signal",[],160,37,null],
[2,"udev.children_max",[],157,37,null],
[2,"udev.event_timeout",[],159,37,null],
[2,"udev.exec_delay",[],158,37,null],
[2,"udev.log_level",[],156,37,null],
[2,"udev.timeout_signal",[],160,37,null],
[3,38,"systemd-veritysetup-generator(8)","systemd-veritysetup-generator â€” Unit generator for verity protected block devices","systemd-veritysetup-generator.html"],
[4,164,"Takes a boolean argument. Defaults to \"`yes`\". If \"`no`\", disables the generator entirely. `rd.systemd.verity=` is honored only by the initrd while `systemd.verity=` is honored by both the host system and the initrd.","#systemd.verity=",233],
[4,165,"Takes a root hash value for the root file system. Expects a hash value formatted in hexadecimal characters of the appropriate length (i.e. most likely 256 bit/64 characters, or longer). If not specified via `systemd.verity_root_data=` and `systemd.verity_root_hash=`, the hash and data devices to use are automatically derived from the specified hash value. Specifically, the data partition device is looked for under a GPT partition UUID derived from the first 128-bit of the root hash, the hash partition device is looked for under a GPT partition UUID derived from the last 128-bit of the root hash. Hence it is usually sufficient to specify the root hash to boot from a verity protected root file system, as device paths are automatically determined from it â€” as long as the partition table is properly set up.","#roothash=",233],
[4,166,"These two settings take block device paths as arguments and may be used to explicitly configure the data partition and hash partition to use for setting up the verity protection for the root file system. If not specified, these paths are automatically derived from the `roothash=` argument (see above).","#systemd.verity_root_data=",233],
[4,167,"Takes a comma-separated list of dm-verity options. Expects the following options <code>superblock=<em><code>BOOLEAN</code></em></code>, <code>format=<em><code>NUMBER</code></em></code>, <code>data-block-size=<em><code>BYTES</code></em></code>, <code>hash-block-size=<em><code>BYTES</code></em></code>, <code>data-blocks=<em><code>BLOCKS</code></em></code>, <code>hash-offset=<em><code>BYTES</code></em></code>, <code>salt=<em><code>HEX</code></em></code>, <code>uuid=<em><code>UUID</code></em></code>, `ignore-corruption`, `restart-on-corruption`, `ignore-zero-blocks`, `check-at-most-once`, `panic-on-corruption`, <code>hash=<em><code>HASH</code></em></code>, <code>fec-device=<em><code>PATH</code></em></code>, <code>fec-offset=<em><code>BYTES</code></em></code>, <code>fec-roots=<em><code>NUM</code></em></code> and <code>root-hash-signature=<em><code>PATH</code></em>|base64:<em><code>HEX</code></em></code>. See [veritysetup(8)](http://linux.die.net/man/8/veritysetup) for more details.","#systemd.verity_root_options=",248],
[4,168,"Equivalent to their counterparts for the root file system as described above, but apply to the `/usr/` file system instead.","#usrhash=",250],
[2,"rd.systemd.verity","b",164,38,null],
[2,"roothash",[],165,38,null],
[2,"systemd.verity","b",164,38,null],
[2,"systemd.verity_root_data",[],166,38,null],
[2,"systemd.verity_root_hash",[],166,38,null],
[2,"systemd.verity_root_options",[],167,38,null],
[2,"systemd.verity_usr_data",[],168,38,null],
[2,"systemd.verity_usr_hash",[],168,38,null],
[2,"systemd.verity_usr_options",[],168,38,null],
[2,"usrhash",[],168,38,null],
[3,40,"systemd.device(5)","systemd.device â€” Device unit configuration","systemd.device.html"],
[4,169,"Adds dependencies of type `Wants=` from the device unit to the specified units. `SYSTEMD_WANTS=` is read by the system service manager, `SYSTEMD_USER_WANTS=` by user service manager instances. These properties may be used to activate arbitrary units when a specific device becomes available.\n\nNote that this and the other udev device properties are not taken into account unless the device is tagged with the \"`systemd`\" tag in the udev database, because otherwise the device is not exposed as a systemd unit (see above).\n\nNote that systemd will only act on `Wants=` dependencies when a device first becomes active. It will not act on them if they are added to devices that are already active. Use `SYSTEMD_READY=` (see below) to configure when a udev device shall be considered active, and thus when to trigger the dependencies.\n\nThe specified property value should be a space-separated list of valid unit names. If a unit template name is specified (that is, a unit name containing an \"`@`\" character indicating a unit name to use for multiple instantiation, but with an empty instance name following the \"`@`\"), it will be automatically instantiated by the device's \"`sysfs`\" path (that is: the path is escaped and inserted as instance name into the template unit name). This is useful in order to instantiate a specific template unit once for each device that appears and matches specific properties.","#SYSTEMD_WANTS=",null],
[4,170,"Adds an additional alias name to the device unit. This must be an absolute path that is automatically transformed into a unit name. (See above.)","#SYSTEMD_ALIAS=",null],
[4,171,"If set to 0, systemd will consider this device unplugged even if it shows up in the udev tree. If this property is unset or set to 1, the device will be considered plugged if it is visible in the udev tree.\n\nThis option is useful for devices that initially show up in an uninitialized state in the tree, and for which a \"`changed`\" event is generated the moment they are fully set up. Note that `SYSTEMD_WANTS=` (see above) is not acted on as long as `SYSTEMD_READY=0` is set for a device.","#SYSTEMD_READY=",null],
[4,172,"If set, this property is used as description string for the device unit.","#ID_MODEL_FROM_DATABASE=",null],
[2,"ID_MODEL",[],172,40,null],
[2,"ID_MODEL_FROM_DATABASE",[],172,40,null],
[2,"SYSTEMD_ALIAS",[],170,40,null],
[2,"SYSTEMD_READY",[],171,40,null],
[2,"SYSTEMD_USER_WANTS",[],169,40,null],
[2,"SYSTEMD_WANTS",[],169,40,null],
[3,42,"systemd.exec(5)","systemd.exec â€” Execution environment configuration","systemd.exec.html"],
[6,3,"group[execution]"],
[4,173,"Takes a colon separated list of absolute paths relative to which the executable used by the `Exec*=` (e.g. `ExecStart=`, `ExecStop=`, etc.) properties can be found. `ExecSearchPath=` overrides `$PATH` if `$PATH` is not supplied by the user through `Environment=`, `EnvironmentFile=` or `PassEnvironment=`. Assigning an empty string removes previous assignments and setting `ExecSearchPath=` to a value multiple times will append to the previous setting.","#ExecSearchPath=",250],
[4,174,"Takes a directory path relative to the service's root directory specified by `RootDirectory=`, or the special value \"`~`\". Sets the working directory for executed processes. If set to \"`~`\", the home directory of the user specified in `User=` is used. If not set, defaults to the root directory when systemd is running as a system instance and the respective user's home directory if run as user. If the setting is prefixed with the \"`-`\" character, a missing working directory is not considered fatal. If `RootDirectory=`/`RootImage=` is not set, then `WorkingDirectory=` is relative to the root of the system running the service manager. Note that setting this parameter might result in additional dependencies to be added to the unit (see above).","#WorkingDirectory=",null],
[4,175,"Takes a directory path relative to the host's root directory (i.e. the root of the system running the service manager). Sets the root directory for executed processes, with the [chroot(2)](https://man7.org/linux/man-pages/man2/chroot.2.html) system call. If this is used, it must be ensured that the process binary and all its auxiliary files are available in the `chroot()` jail. Note that setting this parameter might result in additional dependencies to be added to the unit (see above).\n\nThe `MountAPIVFS=` and `PrivateUsers=` settings are particularly useful in conjunction with `RootDirectory=`. For details, see below.\n\nIf `RootDirectory=`/`RootImage=` are used together with `NotifyAccess=` the notification socket is automatically mounted from the host into the root environment, to ensure the notification interface can work correctly.\n\nNote that services using `RootDirectory=`/`RootImage=` will not be able to log via the syslog or journal protocols to the host logging infrastructure, unless the relevant sockets are mounted from the host, specifically:\n\nThe host's [os-release(5)](os-release.html) file will be made available for the service (read-only) as `/run/host/os-release`. It will be updated automatically on soft reboot (see: [systemd-soft-reboot.service(8)](systemd-soft-reboot.service.html)), in case the service is configured to survive it.\n\n**ExampleÂ 1.Â Mounting logging sockets into root environment**\n\nBindReadOnlyPaths=/dev/log /run/systemd/journal/socket /run/systemd/journal/stdout\n\n  \n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#RootDirectory=",null],
[4,176,"Takes a path to a block device node or regular file as argument. This call is similar to `RootDirectory=` however mounts a file system hierarchy from a block device node or loopback file instead of a directory. The device node or file system image file needs to contain a file system without a partition table, or a file system within an MBR/MS-DOS or GPT partition table with only a single Linux-compatible partition, or a set of file systems within a GPT partition table that follows the [Discoverable Partitions Specification](https://uapi-group.org/specifications/specs/discoverable_partitions_specification).\n\nWhen `DevicePolicy=` is set to \"`closed`\" or \"`strict`\", or set to \"`auto`\" and `DeviceAllow=` is set, then this setting adds `/dev/loop-control` with `rw` mode, \"`block-loop`\" and \"`block-blkext`\" with `rwm` mode to `DeviceAllow=`. See [systemd.resource-control(5)](systemd.resource-control.html) for the details about `DevicePolicy=` or `DeviceAllow=`. Also, see `PrivateDevices=` below, as it may change the setting of `DevicePolicy=`.\n\nUnits making use of `RootImage=` automatically gain an `After=` dependency on `systemd-udevd.service`.\n\nThe host's [os-release(5)](os-release.html) file will be made available for the service (read-only) as `/run/host/os-release`. It will be updated automatically on soft reboot (see: [systemd-soft-reboot.service(8)](systemd-soft-reboot.service.html)), in case the service is configured to survive it.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.","#RootImage=",233],
[4,177,"Takes a comma-separated list of mount options that will be used on disk images specified by `RootImage=`. Optionally a partition name can be prefixed, followed by colon, in case the image has multiple partitions, otherwise partition name \"`root`\" is implied. Options for multiple partitions can be specified in a single line with space separators. Assigning an empty string removes previous assignments. Duplicated options are ignored. For a list of valid mount options, please refer to [mount(8)](https://man7.org/linux/man-pages/man8/mount.8.html).\n\nValid partition names follow the [Discoverable Partitions Specification](https://uapi-group.org/specifications/specs/discoverable_partitions_specification): `root`, `usr`, `home`, `srv`, `esp`, `xbootldr`, `tmp`, `var`.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.","#RootImageOptions=",247],
[4,178,"Takes a boolean argument. If enabled, executed processes will run in an ephemeral copy of the root directory or root image. The ephemeral copy is placed in `/var/lib/systemd/ephemeral-trees/` while the service is active and is cleaned up when the service is stopped or restarted. If `RootDirectory=` is used and the root directory is a subvolume, the ephemeral copy will be created by making a snapshot of the subvolume.\n\nTo make sure making ephemeral copies can be made efficiently, the root directory or root image should be located on the same filesystem as `/var/lib/systemd/ephemeral-trees/`. When using `RootEphemeral=` with root directories, [btrfs(5)](https://btrfs.readthedocs.io/en/latest/btrfs-man5.html) should be used as the filesystem and the root directory should ideally be a subvolume which **systemd** can snapshot to make the ephemeral copy. For root images, a filesystem with support for reflinks should be used to ensure an efficient ephemeral copy.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.","#RootEphemeral=",254],
[4,179,"Takes a data integrity (dm-verity) root hash specified in hexadecimal, or the path to a file containing a root hash in ASCII hexadecimal format. This option enables data integrity checks using dm-verity, if the used image contains the appropriate integrity data (see above) or if `RootVerity=` is used. The specified hash must match the root hash of integrity data, and is usually at least 256 bits (and hence 64 formatted hexadecimal characters) long (in case of SHA256 for example). If this option is not specified, but the image file carries the \"`user.verity.roothash`\" extended file attribute (see [xattr(7)](https://man7.org/linux/man-pages/man7/xattr.7.html)), then the root hash is read from it, also as formatted hexadecimal characters. If the extended file attribute is not found (or is not supported by the underlying file system), but a file with the `.roothash` suffix is found next to the image file, bearing otherwise the same name (except if the image has the `.raw` suffix, in which case the root hash file must not have it in its name), the root hash is read from it and automatically used, also as formatted hexadecimal characters.\n\nIf the disk image contains a separate `/usr/` partition it may also be Verity protected, in which case the root hash may configured via an extended attribute \"`user.verity.usrhash`\" or a `.usrhash` file adjacent to the disk image. There's currently no option to configure the root hash for the `/usr/` file system via the unit file directly.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.","#RootHash=",246],
[4,180,"Takes a PKCS7 signature of the `RootHash=` option as a path to a DER-encoded signature file, or as an ASCII base64 string encoding of a DER-encoded signature prefixed by \"`base64:`\". The dm-verity volume will only be opened if the signature of the root hash is valid and signed by a public key present in the kernel keyring. If this option is not specified, but a file with the `.roothash.p7s` suffix is found next to the image file, bearing otherwise the same name (except if the image has the `.raw` suffix, in which case the signature file must not have it in its name), the signature is read from it and automatically used.\n\nIf the disk image contains a separate `/usr/` partition it may also be Verity protected, in which case the signature for the root hash may configured via a `.usrhash.p7s` file adjacent to the disk image. There's currently no option to configure the root hash signature for the `/usr/` via the unit file directly.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.","#RootHashSignature=",246],
[4,181,"Takes the path to a data integrity (dm-verity) file. This option enables data integrity checks using dm-verity, if `RootImage=` is used and a root-hash is passed and if the used image itself does not contain the integrity data. The integrity data must be matched by the root hash. If this option is not specified, but a file with the `.verity` suffix is found next to the image file, bearing otherwise the same name (except if the image has the `.raw` suffix, in which case the verity data file must not have it in its name), the verity data is read from it and automatically used.\n\nThis option is supported only for disk images that contain a single file system, without an enveloping partition table. Images that contain a GPT partition table should instead include both root file system and matching Verity data in the same image, implementing the [Discoverable Partitions Specification](https://uapi-group.org/specifications/specs/discoverable_partitions_specification).\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.","#RootVerity=",246],
[4,182,"Takes an image policy string as per [systemd.image-policy(7)](systemd.image-policy.html) to use when mounting the disk images (DDI) specified in `RootImage=`, `MountImage=`, `ExtensionImage=`, respectively. If not specified the following policy string is the default for `RootImagePolicy=` and `MountImagePolicy`:\n\nroot=verity+signed+encrypted+unprotected+absent: \\\\\n        usr=verity+signed+encrypted+unprotected+absent: \\\\\n        home=encrypted+unprotected+absent: \\\\\n        srv=encrypted+unprotected+absent: \\\\\n        tmp=encrypted+unprotected+absent: \\\\\n        var=encrypted+unprotected+absent\n\nThe default policy for `ExtensionImagePolicy=` is:\n\nroot=verity+signed+encrypted+unprotected+absent: \\\\\n        usr=verity+signed+encrypted+unprotected+absent","#RootImagePolicy=",254],
[4,183,"Takes a boolean argument. If on, a private mount namespace for the unit's processes is created and the API file systems `/proc/`, `/sys/`, `/dev/` and `/run/` (as an empty \"`tmpfs`\") are mounted inside of it, unless they are already mounted. Note that this option has no effect unless used in conjunction with `RootDirectory=`/`RootImage=` as these four mounts are generally mounted in the host anyway, and unless the root directory is changed, the private mount namespace will be a 1:1 copy of the host's, and include these four mounts. Note that the `/dev/` file system of the host is bind mounted if this option is used without `PrivateDevices=`. To run the service with a private, minimal version of `/dev/`, combine this option with `PrivateDevices=`.\n\nIn order to allow propagating mounts at runtime in a safe manner, `/run/systemd/propagate/` on the host will be used to set up new mounts, and `/run/host/incoming/` in the private namespace will be used as an intermediate step to store them before being moved to the final mount point.","#MountAPIVFS=",233],
[4,184,"Takes one of \"`noaccess`\", \"`invisible`\", \"`ptraceable`\" or \"`default`\" (which it defaults to). When set, this controls the \"`hidepid=`\" mount option of the \"`procfs`\" instance for the unit that controls which directories with process metainformation (<code>/proc/<em><code>PID</code></em></code>) are visible and accessible: when set to \"`noaccess`\" the ability to access most of other users' process metadata in `/proc/` is taken away for processes of the service. When set to \"`invisible`\" processes owned by other users are hidden from `/proc/`. If \"`ptraceable`\" all processes that cannot be `ptrace()`'ed by a process are hidden to it. If \"`default`\" no restrictions on `/proc/` access or visibility are made. For further details see [The /proc Filesystem](https://docs.kernel.org/filesystems/proc.html#mount-options). It is generally recommended to run most system services with this option set to \"`invisible`\". This option is implemented via file system namespacing, and thus cannot be used with services that shall be able to install mount points in the host file system hierarchy. Note that the root user is unaffected by this option, so to be effective it has to be used together with `User=` or `DynamicUser=yes`, and also without the \"`CAP_SYS_PTRACE`\" capability, which also allows a process to bypass this feature. It cannot be used for services that need to access metainformation about other users' processes. This option implies `MountAPIVFS=`.\n\nIf the kernel doesn't support per-mount point `hidepid=` mount options this setting remains without effect, and the unit's processes will be able to access and see other process as if the option was not used.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.","#ProtectProc=",247],
[4,185,"Takes one of \"`all`\" (the default) and \"`pid`\". If \"`pid`\", all files and directories not directly associated with process management and introspection are made invisible in the `/proc/` file system configured for the unit's processes. This controls the \"`subset=`\" mount option of the \"`procfs`\" instance for the unit. For further details see [The /proc Filesystem](https://docs.kernel.org/filesystems/proc.html#mount-options). Note that Linux exposes various kernel APIs via `/proc/`, which are made unavailable with this setting. Since these APIs are used frequently this option is useful only in a few, specific cases, and is not suitable for most non-trivial programs.\n\nMuch like `ProtectProc=` above, this is implemented via file system mount namespacing, and hence the same restrictions apply: it is only available to system services, it disables mount propagation to the host mount table, and it implies `MountAPIVFS=`. Also, like `ProtectProc=` this setting is gracefully disabled if the used kernel does not support the \"`subset=`\" mount option of \"`procfs`\".","#ProcSubset=",247],
[4,186,"Configures unit-specific bind mounts. A bind mount makes a particular file or directory available at an additional place in the unit's view of the file system. Any bind mounts created with this option are specific to the unit, and are not visible in the host's mount table. This option expects a whitespace separated list of bind mount definitions. Each definition consists of a colon-separated triple of source path, destination path and option string, where the latter two are optional. If only a source path is specified the source and destination is taken to be the same. The option string may be either \"`rbind`\" or \"`norbind`\" for configuring a recursive or non-recursive bind mount. If the destination path is omitted, the option string must be omitted too. Each bind mount definition may be prefixed with \"`-`\", in which case it will be ignored when its source path does not exist.\n\n`BindPaths=` creates regular writable bind mounts (unless the source file system mount is already marked read-only), while `BindReadOnlyPaths=` creates read-only bind mounts. These settings may be used more than once, each usage appends to the unit's list of bind mounts. If the empty string is assigned to either of these two options the entire list of bind mounts defined prior to this is reset. Note that in this case both read-only and regular bind mounts are reset, regardless which of the two settings is used.\n\nThis option is particularly useful when `RootDirectory=`/`RootImage=` is used. In this case the source path refers to a path on the host file system, while the destination path refers to a path below the root directory of the unit.\n\nNote that the destination directory must exist or systemd must be able to create it. Thus, it is not possible to use those options for mount points nested underneath paths specified in `InaccessiblePaths=`, or under `/home/` and other protected directories if `ProtectHome=yes` is specified. `TemporaryFileSystem=` with \"`:ro`\" or `ProtectHome=tmpfs` should be used instead.","#BindPaths=",233],
[4,187,"This setting is similar to `RootImage=` in that it mounts a file system hierarchy from a block device node or loopback file, but the destination directory can be specified as well as mount options. This option expects a whitespace separated list of mount definitions. Each definition consists of a colon-separated tuple of source path and destination definitions, optionally followed by another colon and a list of mount options.\n\nMount options may be defined as a single comma-separated list of options, in which case they will be implicitly applied to the root partition on the image, or a series of colon-separated tuples of partition name and mount options. Valid partition names and mount options are the same as for `RootImageOptions=` setting described above.\n\nEach mount definition may be prefixed with \"`-`\", in which case it will be ignored when its source path does not exist. The source argument is a path to a block device node or regular file. If source or destination contain a \"`:`\", it needs to be escaped as \"`\\:`\". The device node or file system image file needs to follow the same rules as specified for `RootImage=`. Any mounts created with this option are specific to the unit, and are not visible in the host's mount table.\n\nThese settings may be used more than once, each usage appends to the unit's list of mount paths. If the empty string is assigned, the entire list of mount paths defined prior to this is reset.\n\nNote that the destination directory must exist or systemd must be able to create it. Thus, it is not possible to use those options for mount points nested underneath paths specified in `InaccessiblePaths=`, or under `/home/` and other protected directories if `ProtectHome=yes` is specified.\n\nWhen `DevicePolicy=` is set to \"`closed`\" or \"`strict`\", or set to \"`auto`\" and `DeviceAllow=` is set, then this setting adds `/dev/loop-control` with `rw` mode, \"`block-loop`\" and \"`block-blkext`\" with `rwm` mode to `DeviceAllow=`. See [systemd.resource-control(5)](systemd.resource-control.html) for the details about `DevicePolicy=` or `DeviceAllow=`. Also, see `PrivateDevices=` below, as it may change the setting of `DevicePolicy=`.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.","#MountImages=",247],
[4,188,"This setting is similar to `MountImages=` in that it mounts a file system hierarchy from a block device node or loopback file, but instead of providing a destination path, an overlay will be set up. This option expects a whitespace separated list of mount definitions. Each definition consists of a source path, optionally followed by a colon and a list of mount options.\n\nA read-only OverlayFS will be set up on top of `/usr/` and `/opt/` hierarchies for sysext images and `/etc/` hierarchy for confext images. The order in which the images are listed will determine the order in which the overlay is laid down: images specified first to last will result in overlayfs layers bottom to top.\n\nMount options may be defined as a single comma-separated list of options, in which case they will be implicitly applied to the root partition on the image, or a series of colon-separated tuples of partition name and mount options. Valid partition names and mount options are the same as for `RootImageOptions=` setting described above.\n\nEach mount definition may be prefixed with \"`-`\", in which case it will be ignored when its source path does not exist. The source argument is a path to a block device node or regular file. If the source path contains a \"`:`\", it needs to be escaped as \"`\\:`\". The device node or file system image file needs to follow the same rules as specified for `RootImage=`. Any mounts created with this option are specific to the unit, and are not visible in the host's mount table.\n\nThese settings may be used more than once, each usage appends to the unit's list of image paths. If the empty string is assigned, the entire list of mount paths defined prior to this is reset.\n\nEach sysext image must carry a `/usr/lib/extension-release.d/extension-release.IMAGE` file while each confext image must carry a `/etc/extension-release.d/extension-release.IMAGE` file, with the appropriate metadata which matches `RootImage=`/`RootDirectory=` or the host. See: [os-release(5)](os-release.html). To disable the safety check that the extension-release file name matches the image file name, the `x-systemd.relax-extension-release-check` mount option may be appended.\n\nWhen `DevicePolicy=` is set to \"`closed`\" or \"`strict`\", or set to \"`auto`\" and `DeviceAllow=` is set, then this setting adds `/dev/loop-control` with `rw` mode, \"`block-loop`\" and \"`block-blkext`\" with `rwm` mode to `DeviceAllow=`. See [systemd.resource-control(5)](systemd.resource-control.html) for the details about `DevicePolicy=` or `DeviceAllow=`. Also, see `PrivateDevices=` below, as it may change the setting of `DevicePolicy=`.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.","#ExtensionImages=",248],
[4,189,"This setting is similar to `BindReadOnlyPaths=` in that it mounts a file system hierarchy from a directory, but instead of providing a destination path, an overlay will be set up. This option expects a whitespace separated list of source directories.\n\nA read-only OverlayFS will be set up on top of `/usr/` and `/opt/` hierarchies for sysext images and `/etc/` hierarchy for confext images. The order in which the directories are listed will determine the order in which the overlay is laid down: directories specified first to last will result in overlayfs layers bottom to top.\n\nEach directory listed in `ExtensionDirectories=` may be prefixed with \"`-`\", in which case it will be ignored when its source path does not exist. Any mounts created with this option are specific to the unit, and are not visible in the host's mount table.\n\nThese settings may be used more than once, each usage appends to the unit's list of directories paths. If the empty string is assigned, the entire list of mount paths defined prior to this is reset.\n\nEach sysext directory must contain a `/usr/lib/extension-release.d/extension-release.IMAGE` file while each confext directory must carry a `/etc/extension-release.d/extension-release.IMAGE` file, with the appropriate metadata which matches `RootImage=`/`RootDirectory=` or the host. See: [os-release(5)](os-release.html).\n\nNote that usage from user units requires overlayfs support in unprivileged user namespaces, which was first introduced in kernel v5.11.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#ExtensionDirectories=",251],
[4,190,"Set the UNIX user or group that the processes are executed as, respectively. Takes a single user or group name, or a numeric ID as argument. For system services (services run by the system service manager, i.e. managed by PID 1) and for user services of the root user (services managed by root's instance of **systemd --user**), the default is \"`root`\", but `User=` may be used to specify a different user. For user services of any other user, switching user identity is not permitted, hence the only valid setting is the same user the user's service manager is running as. If no group is set, the default group of the user is used. This setting does not affect commands whose command line is prefixed with \"`+`\".\n\nNote that this enforces only weak restrictions on the user/group name syntax, but will generate warnings in many cases where user/group names do not adhere to the following rules: the specified name should consist only of the characters a-z, A-Z, 0-9, \"`_`\" and \"`-`\", except for the first character which must be one of a-z, A-Z and \"`_`\" (i.e. digits and \"`-`\" are not permitted as first character). The user/group name must have at least one character, and at most 31. These restrictions are made in order to avoid ambiguities and to ensure user/group names and unit files remain portable among Linux systems. For further details on the names accepted and the names warned about see [User/Group Name Syntax](https://systemd.io/USER_NAMES).\n\nWhen used in conjunction with `DynamicUser=` the user/group name specified is dynamically allocated at the time the service is started, and released at the time the service is stopped â€” unless it is already allocated statically (see below). If `DynamicUser=` is not used the specified user and group must have been created statically in the user database no later than the moment the service is started, for example using the [sysusers.d(5)](sysusers.d.html) facility, which is applied at boot or package install time. If the user does not exist by then program invocation will fail.\n\nIf the `User=` setting is used the supplementary group list is initialized from the specified user's default group list, as defined in the system's user and group database. Additional groups may be configured through the `SupplementaryGroups=` setting (see below).","#User=",null],
[4,191,"Takes a boolean parameter. If set, a UNIX user and group pair is allocated dynamically when the unit is started, and released as soon as it is stopped. The user and group will not be added to `/etc/passwd` or `/etc/group`, but are managed transiently during runtime. The [nss-systemd(8)](nss-systemd.html) glibc NSS module provides integration of these dynamic users/groups into the system's user and group databases. The user and group name to use may be configured via `User=` and `Group=` (see above). If these options are not used and dynamic user/group allocation is enabled for a unit, the name of the dynamic user/group is implicitly derived from the unit name. If the unit name without the type suffix qualifies as valid user name it is used directly, otherwise a name incorporating a hash of it is used. If a statically allocated user or group of the configured name already exists, it is used and no dynamic user/group is allocated. Note that if `User=` is specified and the static group with the name exists, then it is required that the static user with the name already exists. Similarly, if `Group=` is specified and the static user with the name exists, then it is required that the static group with the name already exists. Dynamic users/groups are allocated from the UID/GID range 61184â€¦65519. It is recommended to avoid this range for regular system or login users. At any point in time each UID/GID from this range is only assigned to zero or one dynamically allocated users/groups in use. However, UID/GIDs are recycled after a unit is terminated. Care should be taken that any processes running as part of a unit for which dynamic users/groups are enabled do not leave files or directories owned by these users/groups around, as a different unit might get the same UID/GID assigned later on, and thus gain access to these files or directories. If `DynamicUser=` is enabled, `RemoveIPC=` and `PrivateTmp=` are implied (and cannot be turned off). This ensures that the lifetime of IPC objects and temporary files created by the executed processes is bound to the runtime of the service, and hence the lifetime of the dynamic user/group. Since `/tmp/` and `/var/tmp/` are usually the only world-writable directories on a system this ensures that a unit making use of dynamic user/group allocation cannot leave files around after unit termination. Furthermore `NoNewPrivileges=` and `RestrictSUIDSGID=` are implicitly enabled (and cannot be disabled), to ensure that processes invoked cannot take benefit or create SUID/SGID files or directories. Moreover `ProtectSystem=strict` and `ProtectHome=read-only` are implied, thus prohibiting the service to write to arbitrary file system locations. In order to allow the service to write to certain directories, they have to be allow-listed using `ReadWritePaths=`, but care must be taken so that UID/GID recycling doesn't create security issues involving files created by the service. Use `RuntimeDirectory=` (see below) in order to assign a writable runtime directory to a service, owned by the dynamic user/group and removed automatically when the unit is terminated. Use `StateDirectory=`, `CacheDirectory=` and `LogsDirectory=` in order to assign a set of writable directories for specific purposes to the service in a way that they are protected from vulnerabilities due to UID reuse (see below). If this option is enabled, care should be taken that the unit's processes do not get access to directories outside of these explicitly configured and managed ones. Specifically, do not use `BindPaths=` and be careful with `AF_UNIX` file descriptor passing for directory file descriptors, as this would permit processes to create files or directories owned by the dynamic user/group that are not subject to the lifecycle and access guarantees of the service. Note that this option is currently incompatible with D-Bus policies, thus a service using this option may currently not allocate a D-Bus service name (note that this does not affect calling into other D-Bus services). Defaults to off.","#DynamicUser=",232],
[4,192,"Sets the supplementary Unix groups the processes are executed as. This takes a space-separated list of group names or IDs. This option may be specified more than once, in which case all listed groups are set as supplementary groups. When the empty string is assigned, the list of supplementary groups is reset, and all assignments prior to this one will have no effect. In any way, this option does not override, but extends the list of supplementary groups configured in the system group database for the user. This does not affect commands prefixed with \"`+`\".","#SupplementaryGroups=",null],
[4,193,"Takes a boolean parameter that controls whether to set `$HOME`, `$LOGNAME`, and `$SHELL` environment variables. If unset, this is controlled by whether `User=` is set. If true, they will always be set for system services, i.e. even when the default user \"`root`\" is used. If false, the mentioned variables are not set by systemd, no matter whether `User=` is used or not. This option normally has no effect on user services, since these variables are typically inherited from user manager's own environment anyway.","#SetLoginEnvironment=",255],
[4,194,"Sets the PAM service name to set up a session as. If set, the executed process will be registered as a PAM session under the specified service name. This is only useful in conjunction with the `User=` setting, and is otherwise ignored. If not set, no PAM session will be opened for the executed processes. See [pam(8)](https://man7.org/linux/man-pages/man8/pam.8.html) for details.\n\nNote that for each unit making use of this option a PAM session handler process will be maintained as part of the unit and stays around as long as the unit is active, to ensure that appropriate actions can be taken when the unit and hence the PAM session terminates. This process is named \"`(sd-pam)`\" and is an immediate child process of the unit's main process.\n\nNote that when this option is used for a unit it is very likely (depending on PAM configuration) that the main unit process will be migrated to its own session scope unit when it is activated. This process will hence be associated with two units: the unit it was originally started from (and for which `PAMName=` was configured), and the session scope unit. Any child processes of that process will however be associated with the session scope unit only. This has implications when used in combination with `NotifyAccess=``all`, as these child processes will not be able to affect changes in the original unit through notification messages. These messages will be considered belonging to the session scope unit and not the original unit. It is hence not recommended to use `PAMName=` in combination with `NotifyAccess=``all`.","#PAMName=",null],
[4,195,"Controls which capabilities to include in the capability bounding set for the executed process. See [capabilities(7)](https://man7.org/linux/man-pages/man7/capabilities.7.html) for details. Takes a whitespace-separated list of capability names, e.g. `CAP_SYS_ADMIN`, `CAP_DAC_OVERRIDE`, `CAP_SYS_PTRACE`. Capabilities listed will be included in the bounding set, all others are removed. If the list of capabilities is prefixed with \"`~`\", all but the listed capabilities will be included, the effect of the assignment inverted. Note that this option also affects the respective capabilities in the effective, permitted and inheritable capability sets. If this option is not used, the capability bounding set is not modified on process execution, hence no limits on the capabilities of the process are enforced. This option may appear more than once, in which case the bounding sets are merged by `OR`, or by `AND` if the lines are prefixed with \"`~`\" (see below). If the empty string is assigned to this option, the bounding set is reset to the empty capability set, and all prior settings have no effect. If set to \"`~`\" (without any further argument), the bounding set is reset to the full set of available capabilities, also undoing any previous settings. This does not affect commands prefixed with \"`+`\".\n\nUse [systemd-analyze(1)](systemd-analyze.html)'s **capability** command to retrieve a list of capabilities defined on the local system.\n\nExample: if a unit has the following,\n\nCapabilityBoundingSet=CAP\\_A CAP\\_B\nCapabilityBoundingSet=CAP\\_B CAP\\_C\n\nthen `CAP_A`, `CAP_B`, and `CAP_C` are set. If the second line is prefixed with \"`~`\", e.g.,\n\nCapabilityBoundingSet=CAP\\_A CAP\\_B\nCapabilityBoundingSet=~CAP\\_B CAP\\_C\n\nthen, only `CAP_A` is set.","#CapabilityBoundingSet=",null],
[4,196,"Controls which capabilities to include in the ambient capability set for the executed process. Takes a whitespace-separated list of capability names, e.g. `CAP_SYS_ADMIN`, `CAP_DAC_OVERRIDE`, `CAP_SYS_PTRACE`. This option may appear more than once, in which case the ambient capability sets are merged (see the above examples in `CapabilityBoundingSet=`). If the list of capabilities is prefixed with \"`~`\", all but the listed capabilities will be included, the effect of the assignment inverted. If the empty string is assigned to this option, the ambient capability set is reset to the empty capability set, and all prior settings have no effect. If set to \"`~`\" (without any further argument), the ambient capability set is reset to the full set of available capabilities, also undoing any previous settings. Note that adding capabilities to the ambient capability set adds them to the process's inherited capability set.\n\nAmbient capability sets are useful if you want to execute a process as a non-privileged user but still want to give it some capabilities. Note that in this case option `keep-caps` is automatically added to `SecureBits=` to retain the capabilities over the user change. `AmbientCapabilities=` does not affect commands prefixed with \"`+`\".","#AmbientCapabilities=",229],
[4,197,"Takes a boolean argument. If true, ensures that the service process and all its children can never gain new privileges through `execve()` (e.g. via setuid or setgid bits, or filesystem capabilities). This is the simplest and most effective way to ensure that a process and its children can never elevate privileges again. Defaults to false. In case the service will be run in a new mount namespace anyway and SELinux is disabled, all file systems are mounted with `MS_NOSUID` flag. Also see [No New Privileges Flag](https://docs.kernel.org/userspace-api/no_new_privs.html).\n\nNote that this setting only has an effect on the unit's processes themselves (or any processes directly or indirectly forked off them). It has no effect on processes potentially invoked on request of them through tools such as [at(1)](https://man7.org/linux/man-pages/man1/at.1.html), [crontab(1)](https://man7.org/linux/man-pages/man1/crontab.1.html), [systemd-run(1)](systemd-run.html), or arbitrary IPC services.","#NoNewPrivileges=",187],
[4,198,"Controls the secure bits set for the executed process. Takes a space-separated combination of options from the following list: `keep-caps`, `keep-caps-locked`, `no-setuid-fixup`, `no-setuid-fixup-locked`, `noroot`, and `noroot-locked`. This option may appear more than once, in which case the secure bits are ORed. If the empty string is assigned to this option, the bits are reset to 0. This does not affect commands prefixed with \"`+`\". See [capabilities(7)](https://man7.org/linux/man-pages/man7/capabilities.7.html) for details.","#SecureBits=",null],
[4,199,"Set the SELinux security context of the executed process. If set, this will override the automated domain transition. However, the policy still needs to authorize the transition. This directive is ignored if SELinux is disabled. If prefixed by \"`-`\", failing to set the SELinux security context will be ignored, but it's still possible that the subsequent `execve()` may fail if the policy doesn't allow the transition for the non-overridden context. This does not affect commands prefixed with \"`+`\". See [setexeccon(3)](http://linux.die.net/man/3/setexeccon) for details.","#SELinuxContext=",209],
[4,200,"Takes a profile name as argument. The process executed by the unit will switch to this profile when started. Profiles must already be loaded in the kernel, or the unit will fail. If prefixed by \"`-`\", all errors will be ignored. This setting has no effect if AppArmor is not enabled. This setting does not affect commands prefixed with \"`+`\".","#AppArmorProfile=",210],
[4,201,"Takes a `SMACK64` security label as argument. The process executed by the unit will be started under this label and SMACK will decide whether the process is allowed to run or not, based on it. The process will continue to run under the label specified here unless the executable has its own `SMACK64EXEC` label, in which case the process will transition to run under that label. When not specified, the label that systemd is running under is used. This directive is ignored if SMACK is disabled.\n\nThe value may be prefixed by \"`-`\", in which case all errors will be ignored. An empty value may be specified to unset previous assignments. This does not affect commands prefixed with \"`+`\".","#SmackProcessLabel=",218],
[4,202,"Set soft and hard limits on various resources for executed processes. See [setrlimit(2)](https://man7.org/linux/man-pages/man2/setrlimit.2.html) for details on the process resource limit concept. Process resource limits may be specified in two formats: either as single value to set a specific soft and hard limit to the same value, or as colon-separated pair `soft:hard` to set both limits individually (e.g. \"`LimitAS=4G:16G`\"). Use the string `infinity` to configure no limit on a specific resource. The multiplicative suffixes K, M, G, T, P and E (to the base 1024) may be used for resource limits measured in bytes (e.g. \"`LimitAS=16G`\"). For the limits referring to time values, the usual time units ms, s, min, h and so on may be used (see [systemd.time(7)](systemd.time.html) for details). Note that if no time unit is specified for `LimitCPU=` the default unit of seconds is implied, while for `LimitRTTIME=` the default unit of microseconds is implied. Also, note that the effective granularity of the limits might influence their enforcement. For example, time limits specified for `LimitCPU=` will be rounded up implicitly to multiples of 1s. For `LimitNICE=` the value may be specified in two syntaxes: if prefixed with \"`+`\" or \"`-`\", the value is understood as regular Linux nice value in the range -20â€¦19. If not prefixed like this the value is understood as raw resource limit parameter in the range 0â€¦40 (with 0 being equivalent to 1).\n\nNote that most process resource limits configured with these options are per-process, and processes may fork in order to acquire a new set of resources that are accounted independently of the original process, and may thus escape limits set. Also note that `LimitRSS=` is not implemented on Linux, and setting it has no effect. Often it is advisable to prefer the resource controls listed in [systemd.resource-control(5)](systemd.resource-control.html) over these per-process limits, as they apply to services as a whole, may be altered dynamically at runtime, and are generally more expressive. For example, `MemoryMax=` is a more powerful (and working) replacement for `LimitRSS=`.\n\nNote that `LimitNPROC=` will limit the number of processes from one (real) UID and not the number of processes started (forked) by the service. Therefore the limit is cumulative for all processes running under the same UID. Please also note that the `LimitNPROC=` will not be enforced if the service is running as root (and not dropping privileges). Due to these limitations, `TasksMax=` (see [systemd.resource-control(5)](systemd.resource-control.html)) is typically a better choice than `LimitNPROC=`.\n\nResource limits not configured explicitly for a unit default to the value configured in the various `DefaultLimitCPU=`, `DefaultLimitFSIZE=`, â€¦ options available in [systemd-system.conf(5)](systemd-system.conf.html), and â€“ if not configured there â€“ the kernel or per-user defaults, as defined by the OS (the latter only for user services, see below).\n\nFor system units these resource limits may be chosen freely. When these settings are configured in a user service (i.e. a service run by the per-user instance of the service manager) they cannot be used to raise the limits above those set for the user manager itself when it was first invoked, as the user's service manager generally lacks the privileges to do so. In user context these configuration options are hence only useful to lower the limits passed in or to raise the soft limit to the maximum of the hard limit as configured for the user. To raise the user's limits further, the available configuration mechanisms differ between operating systems, but typically require privileges. In most cases it is possible to configure higher per-user resource limits via PAM or by setting limits on the system service encapsulating the user's service manager, i.e. the user's instance of `user@.service`. After making such changes, make sure to restart the user's service manager.\n\n**TableÂ 1.Â Resource limit directives, their equivalent ulimit shell commands and the unit used**\n\n| Directive | **ulimit** equivalent | Unit | Notes |\n| --- | --- | --- | --- |\n| LimitCPU= | ulimit -t | Seconds | \\- |\n| LimitFSIZE= | ulimit -f | Bytes | \\- |\n| LimitDATA= | ulimit -d | Bytes | Don't use. This limits the allowed address range, not memory use! Defaults to unlimited and should not be lowered. To limit memory use, see `MemoryMax=` in [systemd.resource-control(5)](systemd.resource-control.html). |\n| LimitSTACK= | ulimit -s | Bytes | \\- |\n| LimitCORE= | ulimit -c | Bytes | \\- |\n| LimitRSS= | ulimit -m | Bytes | Don't use. No effect on Linux. |\n| LimitNOFILE= | ulimit -n | Number of File Descriptors | Don't use. Be careful when raising the soft limit above 1024, since [select(2)](https://man7.org/linux/man-pages/man2/select.2.html) cannot function with file descriptors above 1023 on Linux. Nowadays, the hard limit defaults to 524288, a very high value compared to historical defaults. Typically applications should increase their soft limit to the hard limit on their own, if they are OK with working with file descriptors above 1023, i.e. do not use [select(2)](https://man7.org/linux/man-pages/man2/select.2.html). Note that file descriptors are nowadays accounted like any other form of memory, thus there should not be any need to lower the hard limit. Use `MemoryMax=` to control overall service memory use, including file descriptor memory. |\n| LimitAS= | ulimit -v | Bytes | Don't use. This limits the allowed address range, not memory use! Defaults to unlimited and should not be lowered. To limit memory use, see `MemoryMax=` in [systemd.resource-control(5)](systemd.resource-control.html). |\n| LimitNPROC= | ulimit -u | Number of Processes | This limit is enforced based on the number of processes belonging to the user. Typically it's better to track processes per service, i.e. use `TasksMax=`, see [systemd.resource-control(5)](systemd.resource-control.html). |\n| LimitMEMLOCK= | ulimit -l | Bytes | \\- |\n| LimitLOCKS= | ulimit -x | Number of Locks | \\- |\n| LimitSIGPENDING= | ulimit -i | Number of Queued Signals | \\- |\n| LimitMSGQUEUE= | ulimit -q | Bytes | \\- |\n| LimitNICE= | ulimit -e | Nice Level | \\- |\n| LimitRTPRIO= | ulimit -r | Realtime Priority | \\- |\n| LimitRTTIME= | ulimit -R | Microseconds | \\- |","#LimitCPU=",null],
[4,203,"Controls the file mode creation mask. Takes an access mode in octal notation. See [umask(2)](https://man7.org/linux/man-pages/man2/umask.2.html) for details. Defaults to 0022 for system units. For user units the default value is inherited from the per-user service manager (whose default is in turn inherited from the system service manager, and thus typically also is 0022 â€” unless overridden by a PAM module). In order to change the per-user mask for all user services, consider setting the `UMask=` setting of the user's `user@.service` system service instance. The per-user umask may also be set via the `umask` field of a user's [JSON User Record](https://systemd.io/USER_RECORD) (for users managed by [systemd-homed.service(8)](systemd-homed.service.html) this field may be controlled via **homectl --umask=**). It may also be set via a PAM module, such as [pam\\_umask(8)](https://man7.org/linux/man-pages/man8/pam_umask.8.html).","#UMask=",null],
[4,204,"Controls which types of memory mappings will be saved if the process dumps core (using the <code>/proc/<em><code>pid</code></em>/coredump_filter</code> file). Takes a whitespace-separated combination of mapping type names or numbers (with the default base 16). Mapping type names are `private-anonymous`, `shared-anonymous`, `private-file-backed`, `shared-file-backed`, `elf-headers`, `private-huge`, `shared-huge`, `private-dax`, `shared-dax`, and the special values `all` (all types) and `default` (the kernel default of \"<code><code>private-anonymous</code> <code>shared-anonymous</code> <code>elf-headers</code> <code>private-huge</code></code>\"). See [core(5)](https://man7.org/linux/man-pages/man5/core.5.html) for the meaning of the mapping types. When specified multiple times, all specified masks are ORed. When not set, or if the empty value is assigned, the inherited value is not changed.\n\n**ExampleÂ 2.Â Add DAX pages to the dump filter**\n\nCoredumpFilter=default private-dax shared-dax","#CoredumpFilter=",246],
[4,205,"Controls how the kernel session keyring is set up for the service (see [session-keyring(7)](https://man7.org/linux/man-pages/man7/session-keyring.7.html) for details on the session keyring). Takes one of `inherit`, `private`, `shared`. If set to `inherit` no special keyring setup is done, and the kernel's default behaviour is applied. If `private` is used a new session keyring is allocated when a service process is invoked, and it is not linked up with any user keyring. This is the recommended setting for system services, as this ensures that multiple services running under the same system user ID (in particular the root user) do not share their key material among each other. If `shared` is used a new session keyring is allocated as for `private`, but the user keyring of the user configured with `User=` is linked into it, so that keys assigned to the user may be requested by the unit's processes. In this mode multiple units running processes under the same user ID may share key material. Unless `inherit` is selected the unique invocation ID for the unit (see below) is added as a protected key by the name \"`invocation_id`\" to the newly created session keyring. Defaults to `private` for services of the system service manager and to `inherit` for non-service units and for services of the user service manager.","#KeyringMode=",235],
[4,206,"Sets the adjustment value for the Linux kernel's Out-Of-Memory (OOM) killer score for executed processes. Takes an integer between -1000 (to disable OOM killing of processes of this unit) and 1000 (to make killing of processes of this unit under memory pressure very likely). See [The /proc Filesystem](https://docs.kernel.org/filesystems/proc.html) for details. If not specified defaults to the OOM score adjustment level of the service manager itself, which is normally at 0.\n\nUse the `OOMPolicy=` setting of service units to configure how the service manager shall react to the kernel OOM killer or **systemd-oomd** terminating a process of the service. See [systemd.service(5)](systemd.service.html) for details.","#OOMScoreAdjust=",null],
[4,207,"Sets the timer slack in nanoseconds for the executed processes. The timer slack controls the accuracy of wake-ups triggered by timers. See [prctl(2)](https://man7.org/linux/man-pages/man2/prctl.2.html) for more information. Note that in contrast to most other time span definitions this parameter takes an integer value in nano-seconds if no unit is specified. The usual time units are understood too.","#TimerSlackNSec=",null],
[4,208,"Controls which kernel architecture [uname(2)](https://man7.org/linux/man-pages/man2/uname.2.html) shall report, when invoked by unit processes. Takes one of the architecture identifiers `arm64`, `arm64-be`, `arm`, `arm-be`, `x86`, `x86-64`, `ppc`, `ppc-le`, `ppc64`, `ppc64-le`, `s390` or `s390x`. Which personality architectures are supported depends on the kernel's native architecture. Usually the 64-bit versions of the various system architectures support their immediate 32-bit personality architecture counterpart, but no others. For example, `x86-64` systems support the `x86-64` and `x86` personalities but no others. The personality feature is useful when running 32-bit services on a 64-bit host system. If not specified, the personality is left unmodified and thus reflects the personality of the host system's kernel. This option is not useful on architectures for which only one native word width was ever available, such as `m68k` (32-bit only) or `alpha` (64-bit only).","#Personality=",209],
[4,209,"Takes a boolean argument. If true, causes `SIGPIPE` to be ignored in the executed process. Defaults to true because `SIGPIPE` generally is useful only in shell pipelines.","#IgnoreSIGPIPE=",null],
[4,210,"Sets the default nice level (scheduling priority) for executed processes. Takes an integer between -20 (highest priority) and 19 (lowest priority). In case of resource contention, smaller values mean more resources will be made available to the unit's processes, larger values mean less resources will be made available. See [setpriority(2)](https://man7.org/linux/man-pages/man2/setpriority.2.html) for details.","#Nice=",null],
[4,211,"Sets the CPU scheduling policy for executed processes. Takes one of `other`, `batch`, `idle`, `fifo` or `rr`. See [sched\\_setscheduler(2)](https://man7.org/linux/man-pages/man2/sched_setscheduler.2.html) for details.","#CPUSchedulingPolicy=",null],
[4,212,"Sets the CPU scheduling priority for executed processes. The available priority range depends on the selected CPU scheduling policy (see above). For real-time scheduling policies an integer between 1 (lowest priority) and 99 (highest priority) can be used. In case of CPU resource contention, smaller values mean less CPU time is made available to the service, larger values mean more. See [sched\\_setscheduler(2)](https://man7.org/linux/man-pages/man2/sched_setscheduler.2.html) for details.","#CPUSchedulingPriority=",null],
[4,213,"Takes a boolean argument. If true, elevated CPU scheduling priorities and policies will be reset when the executed processes call [fork(2)](https://man7.org/linux/man-pages/man2/fork.2.html), and can hence not leak into child processes. See [sched\\_setscheduler(2)](https://man7.org/linux/man-pages/man2/sched_setscheduler.2.html) for details. Defaults to false.","#CPUSchedulingResetOnFork=",null],
[4,214,"Controls the CPU affinity of the executed processes. Takes a list of CPU indices or ranges separated by either whitespace or commas. Alternatively, takes a special \"numa\" value in which case systemd automatically derives allowed CPU range based on the value of `NUMAMask=` option. CPU ranges are specified by the lower and upper CPU indices separated by a dash. This option may be specified more than once, in which case the specified CPU affinity masks are merged. If the empty string is assigned, the mask is reset, all assignments prior to this will have no effect. See [sched\\_setaffinity(2)](https://man7.org/linux/man-pages/man2/sched_setaffinity.2.html) for details.","#CPUAffinity=",null],
[4,215,"Controls the NUMA memory policy of the executed processes. Takes a policy type, one of: `default`, `preferred`, `bind`, `interleave` and `local`. A list of NUMA nodes that should be associated with the policy must be specified in `NUMAMask=`. For more details on each policy please see, [set\\_mempolicy(2)](https://man7.org/linux/man-pages/man2/set_mempolicy.2.html). For overall overview of NUMA support in Linux see, [numa(7)](https://man7.org/linux/man-pages/man7/numa.7.html).","#NUMAPolicy=",243],
[4,216,"Controls the NUMA node list which will be applied alongside with selected NUMA policy. Takes a list of NUMA nodes and has the same syntax as a list of CPUs for `CPUAffinity=` option or special \"all\" value which will include all available NUMA nodes in the mask. Note that the list of NUMA nodes is not required for `default` and `local` policies and for `preferred` policy we expect a single NUMA node.","#NUMAMask=",243],
[4,217,"Sets the I/O scheduling class for executed processes. Takes one of the strings `realtime`, `best-effort` or `idle`. The kernel's default scheduling class is `best-effort` at a priority of 4. If the empty string is assigned to this option, all prior assignments to both `IOSchedulingClass=` and `IOSchedulingPriority=` have no effect. See [ioprio\\_set(2)](https://man7.org/linux/man-pages/man2/ioprio_set.2.html) for details.","#IOSchedulingClass=",null],
[4,218,"Sets the I/O scheduling priority for executed processes. Takes an integer between 0 (highest priority) and 7 (lowest priority). In case of I/O contention, smaller values mean more I/O bandwidth is made available to the unit's processes, larger values mean less bandwidth. The available priorities depend on the selected I/O scheduling class (see above). If the empty string is assigned to this option, all prior assignments to both `IOSchedulingClass=` and `IOSchedulingPriority=` have no effect. For the kernel's default scheduling class (`best-effort`) this defaults to 4. See [ioprio\\_set(2)](https://man7.org/linux/man-pages/man2/ioprio_set.2.html) for details.","#IOSchedulingPriority=",null],
[4,219,"Takes a boolean argument or the special values \"`full`\" or \"`strict`\". If true, mounts the `/usr/` and the boot loader directories (`/boot` and `/efi`) read-only for processes invoked by this unit. If set to \"`full`\", the `/etc/` directory is mounted read-only, too. If set to \"`strict`\" the entire file system hierarchy is mounted read-only, except for the API file system subtrees `/dev/`, `/proc/` and `/sys/` (protect these directories using `PrivateDevices=`, `ProtectKernelTunables=`, `ProtectControlGroups=`). This setting ensures that any modification of the vendor-supplied operating system (and optionally its configuration, and local mounts) is prohibited for the service. It is recommended to enable this setting for all long-running services, unless they are involved with system updates or need to modify the operating system in other ways. If this option is used, `ReadWritePaths=` may be used to exclude specific directories from being made read-only. This setting is implied if `DynamicUser=` is set. This setting cannot ensure protection in all cases. In general it has the same limitations as `ReadOnlyPaths=`, see below. Defaults to off.","#ProtectSystem=",214],
[4,220,"Takes a boolean argument or the special values \"`read-only`\" or \"`tmpfs`\". If true, the directories `/home/`, `/root`, and `/run/user` are made inaccessible and empty for processes invoked by this unit. If set to \"`read-only`\", the three directories are made read-only instead. If set to \"`tmpfs`\", temporary file systems are mounted on the three directories in read-only mode. The value \"`tmpfs`\" is useful to hide home directories not relevant to the processes invoked by the unit, while still allowing necessary directories to be made visible when listed in `BindPaths=` or `BindReadOnlyPaths=`.\n\nSetting this to \"`yes`\" is mostly equivalent to setting the three directories in `InaccessiblePaths=`. Similarly, \"`read-only`\" is mostly equivalent to `ReadOnlyPaths=`, and \"`tmpfs`\" is mostly equivalent to `TemporaryFileSystem=` with \"`:ro`\".\n\nIt is recommended to enable this setting for all long-running services (in particular network-facing ones), to ensure they cannot get access to private user data, unless the services actually require access to the user's private data. This setting is implied if `DynamicUser=` is set. This setting cannot ensure protection in all cases. In general it has the same limitations as `ReadOnlyPaths=`, see below.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#ProtectHome=",214],
[4,221,"These options take a whitespace-separated list of directory names. The specified directory names must be relative, and may not include \"`..`\". If set, when the unit is started, one or more directories by the specified names will be created (including their parents) below the locations defined in the following table. Also, the corresponding environment variable will be defined with the full paths of the directories. If multiple directories are set, then in the environment variable the paths are concatenated with colon (\"`:`\").\n\n**TableÂ 2.Â Automatic directory creation and environment variables**\n\n| Directory | Below path for system units | Below path for user units | Environment variable set |\n| --- | --- | --- | --- |\n| `RuntimeDirectory=` | `/run/` | `$XDG_RUNTIME_DIR` | `$RUNTIME_DIRECTORY` |\n| `StateDirectory=` | `/var/lib/` | `$XDG_STATE_HOME` | `$STATE_DIRECTORY` |\n| `CacheDirectory=` | `/var/cache/` | `$XDG_CACHE_HOME` | `$CACHE_DIRECTORY` |\n| `LogsDirectory=` | `/var/log/` | `$XDG_STATE_HOME``/log/` | `$LOGS_DIRECTORY` |\n| `ConfigurationDirectory=` | `/etc/` | `$XDG_CONFIG_HOME` | `$CONFIGURATION_DIRECTORY` |\n\n  \n\nIn case of `RuntimeDirectory=` the innermost subdirectories are removed when the unit is stopped. It is possible to preserve the specified directories in this case if `RuntimeDirectoryPreserve=` is configured to `restart` or `yes` (see below). The directories specified with `StateDirectory=`, `CacheDirectory=`, `LogsDirectory=`, `ConfigurationDirectory=` are not removed when the unit is stopped.\n\nExcept in case of `ConfigurationDirectory=`, the innermost specified directories will be owned by the user and group specified in `User=` and `Group=`. If the specified directories already exist and their owning user or group do not match the configured ones, all files and directories below the specified directories as well as the directories themselves will have their file ownership recursively changed to match what is configured. As an optimization, if the specified directories are already owned by the right user and group, files and directories below of them are left as-is, even if they do not match what is requested. The innermost specified directories will have their access mode adjusted to the what is specified in `RuntimeDirectoryMode=`, `StateDirectoryMode=`, `CacheDirectoryMode=`, `LogsDirectoryMode=` and `ConfigurationDirectoryMode=`.\n\nThese options imply `BindPaths=` for the specified paths. When combined with `RootDirectory=` or `RootImage=` these paths always reside on the host and are mounted from there into the unit's file system namespace.\n\nIf `DynamicUser=` is used, the logic for `CacheDirectory=`, `LogsDirectory=` and `StateDirectory=` is slightly altered: the directories are created below `/var/cache/private`, `/var/log/private` and `/var/lib/private`, respectively, which are host directories made inaccessible to unprivileged users, which ensures that access to these directories cannot be gained through dynamic user ID recycling. Symbolic links are created to hide this difference in behaviour. Both from perspective of the host and from inside the unit, the relevant directories hence always appear directly below `/var/cache`, `/var/log` and `/var/lib`.\n\nUse `RuntimeDirectory=` to manage one or more runtime directories for the unit and bind their lifetime to the daemon runtime. This is particularly useful for unprivileged daemons that cannot create runtime directories in `/run/` due to lack of privileges, and to make sure the runtime directory is cleaned up automatically after use. For runtime directories that require more complex or different configuration or lifetime guarantees, please consider using [tmpfiles.d(5)](tmpfiles.d.html).\n\n`RuntimeDirectory=`, `StateDirectory=`, `CacheDirectory=` and `LogsDirectory=` optionally support a second parameter, separated by \"`:`\". The second parameter will be interpreted as a destination path that will be created as a symlink to the directory. The symlinks will be created after any `BindPaths=` or `TemporaryFileSystem=` options have been set up, to make ephemeral symlinking possible. The same source can have multiple symlinks, by using the same first parameter, but a different second parameter.\n\nThe directories defined by these options are always created under the standard paths used by systemd (`/var/`, `/run/`, `/etc/`, â€¦). If the service needs directories in a different location, a different mechanism has to be used to create them.\n\n[tmpfiles.d(5)](tmpfiles.d.html) provides functionality that overlaps with these options. Using these options is recommended, because the lifetime of the directories is tied directly to the lifetime of the unit, and it is not necessary to ensure that the `tmpfiles.d` configuration is executed before the unit is started.\n\nTo remove any of the directories created by these settings, use the **systemctl clean â€¦** command on the relevant units, see [systemctl(1)](systemctl.html) for details.\n\nExample: if a system service unit has the following,\n\nRuntimeDirectory=foo/bar baz\n\nthe service manager creates `/run/foo` (if it does not exist), `/run/foo/bar`, and `/run/baz`. The directories `/run/foo/bar` and `/run/baz` except `/run/foo` are owned by the user and group specified in `User=` and `Group=`, and removed when the service is stopped.\n\nExample: if a system service unit has the following,\n\nRuntimeDirectory=foo/bar\nStateDirectory=aaa/bbb ccc\n\nthen the environment variable \"`RUNTIME_DIRECTORY`\" is set with \"`/run/foo/bar`\", and \"`STATE_DIRECTORY`\" is set with \"`/var/lib/aaa/bbb:/var/lib/ccc`\".\n\nExample: if a system service unit has the following,\n\nRuntimeDirectory=foo:bar foo:baz\n\nthe service manager creates `/run/foo` (if it does not exist), and `/run/bar` plus `/run/baz` as symlinks to `/run/foo`.","#RuntimeDirectory=",211],
[4,222,"Specifies the access mode of the directories specified in `RuntimeDirectory=`, `StateDirectory=`, `CacheDirectory=`, `LogsDirectory=`, or `ConfigurationDirectory=`, respectively, as an octal number. Defaults to `0755`. See \"Permissions\" in [path\\_resolution(7)](https://man7.org/linux/man-pages/man7/path_resolution.7.html) for a discussion of the meaning of permission bits.","#RuntimeDirectoryMode=",234],
[4,223,"Takes a boolean argument or `restart`. If set to `no` (the default), the directories specified in `RuntimeDirectory=` are always removed when the service stops. If set to `restart` the directories are preserved when the service is both automatically and manually restarted. Here, the automatic restart means the operation specified in `Restart=`, and manual restart means the one triggered by **systemctl restart foo.service**. If set to `yes`, then the directories are not removed when the service is stopped. Note that since the runtime directory `/run/` is a mount point of \"`tmpfs`\", then for system services the directories specified in `RuntimeDirectory=` are removed when the system is rebooted.","#RuntimeDirectoryPreserve=",235],
[4,224,"Configures a timeout on the clean-up operation requested through **systemctl clean â€¦**, see [systemctl(1)](systemctl.html) for details. Takes the usual time values and defaults to `infinity`, i.e. by default no timeout is applied. If a timeout is configured the clean operation will be aborted forcibly when the timeout is reached, potentially leaving resources on disk.","#TimeoutCleanSec=",244],
[4,225,"Sets up a new file system namespace for executed processes. These options may be used to limit access a process has to the file system. Each setting takes a space-separated list of paths relative to the host's root directory (i.e. the system running the service manager). Note that if paths contain symlinks, they are resolved relative to the root directory set with `RootDirectory=`/`RootImage=`.\n\nPaths listed in `ReadWritePaths=` are accessible from within the namespace with the same access modes as from outside of it. Paths listed in `ReadOnlyPaths=` are accessible for reading only, writing will be refused even if the usual file access controls would permit this. Nest `ReadWritePaths=` inside of `ReadOnlyPaths=` in order to provide writable subdirectories within read-only directories. Use `ReadWritePaths=` in order to allow-list specific paths for write access if `ProtectSystem=strict` is used. Note that `ReadWritePaths=` cannot be used to gain write access to a file system whose superblock is mounted read-only. On Linux, for each mount point write access is granted only if the mount point itself _and_ the file system superblock backing it are not marked read-only. `ReadWritePaths=` only controls the former, not the latter, hence a read-only file system superblock remains protected.\n\nPaths listed in `InaccessiblePaths=` will be made inaccessible for processes inside the namespace along with everything below them in the file system hierarchy. This may be more restrictive than desired, because it is not possible to nest `ReadWritePaths=`, `ReadOnlyPaths=`, `BindPaths=`, or `BindReadOnlyPaths=` inside it. For a more flexible option, see `TemporaryFileSystem=`.\n\nContent in paths listed in `NoExecPaths=` are not executable even if the usual file access controls would permit this. Nest `ExecPaths=` inside of `NoExecPaths=` in order to provide executable content within non-executable directories.\n\nNon-directory paths may be specified as well. These options may be specified more than once, in which case all paths listed will have limited access from within the namespace. If the empty string is assigned to this option, the specific list is reset, and all prior assignments have no effect.\n\nPaths in `ReadWritePaths=`, `ReadOnlyPaths=`, `InaccessiblePaths=`, `ExecPaths=` and `NoExecPaths=` may be prefixed with \"`-`\", in which case they will be ignored when they do not exist. If prefixed with \"`+`\" the paths are taken relative to the root directory of the unit, as configured with `RootDirectory=`/`RootImage=`, instead of relative to the root directory of the host (see above). When combining \"`-`\" and \"`+`\" on the same path make sure to specify \"`-`\" first, and \"`+`\" second.\n\nNote that these settings will disconnect propagation of mounts from the unit's processes to the host. This means that this setting may not be used for services which shall be able to install mount points in the main mount namespace. For `ReadWritePaths=` and `ReadOnlyPaths=`, propagation in the other direction is not affected, i.e. mounts created on the host generally appear in the unit processes' namespace, and mounts removed on the host also disappear there too. In particular, note that mount propagation from host to unit will result in unmodified mounts to be created in the unit's namespace, i.e. writable mounts appearing on the host will be writable in the unit's namespace too, even when propagated below a path marked with `ReadOnlyPaths=`! Restricting access with these options hence does not extend to submounts of a directory that are created later on. This means the lock-down offered by that setting is not complete, and does not offer full protection.\n\nNote that the effect of these settings may be undone by privileged processes. In order to set up an effective sandboxed environment for a unit it is thus recommended to combine these settings with either `CapabilityBoundingSet=~CAP_SYS_ADMIN` or `SystemCallFilter=~@mount`.\n\nPlease be extra careful when applying these options to API file systems (a list of them could be found in `MountAPIVPS=`), since they may be required for basic system functionalities. Moreover, `/run/` needs to be writable for setting up mount namespace and propagation.\n\nSimple allow-list example using these directives:\n\n\\[Service\\]\nReadOnlyPaths=/\nReadWritePaths=/var /run\nInaccessiblePaths=-/lost+found\nNoExecPaths=/\nExecPaths=/usr/sbin/my\\_daemon /usr/lib /usr/lib64\n\nThese options are only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#ReadWritePaths=",231],
[4,226,"Takes a space-separated list of mount points for temporary file systems (tmpfs). If set, a new file system namespace is set up for executed processes, and a temporary file system is mounted on each mount point. This option may be specified more than once, in which case temporary file systems are mounted on all listed mount points. If the empty string is assigned to this option, the list is reset, and all prior assignments have no effect. Each mount point may optionally be suffixed with a colon (\"`:`\") and mount options such as \"`size=10%`\" or \"`ro`\". By default, each temporary file system is mounted with \"`nodev,strictatime,mode=0755`\". These can be disabled by explicitly specifying the corresponding mount options, e.g., \"`dev`\" or \"`nostrictatime`\".\n\nThis is useful to hide files or directories not relevant to the processes invoked by the unit, while necessary files or directories can be still accessed by combining with `BindPaths=` or `BindReadOnlyPaths=`:\n\nExample: if a unit has the following,\n\nTemporaryFileSystem=/var:ro\nBindReadOnlyPaths=/var/lib/systemd\n\nthen the invoked processes by the unit cannot see any files or directories under `/var/` except for `/var/lib/systemd` or its contents.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#TemporaryFileSystem=",238],
[4,227,"Takes a boolean argument. If true, sets up a new file system namespace for the executed processes and mounts private `/tmp/` and `/var/tmp/` directories inside it that are not shared by processes outside of the namespace. This is useful to secure access to temporary files of the process, but makes sharing between processes via `/tmp/` or `/var/tmp/` impossible. If true, all temporary files created by a service in these directories will be removed after the service is stopped. Defaults to false. It is possible to run two or more units within the same private `/tmp/` and `/var/tmp/` namespace by using the `JoinsNamespaceOf=` directive, see [systemd.unit(5)](systemd.unit.html) for details. This setting is implied if `DynamicUser=` is set. For this setting, the same restrictions regarding mount propagation and privileges apply as for `ReadOnlyPaths=` and related calls, see above. Enabling this setting has the side effect of adding `Requires=` and `After=` dependencies on all mount units necessary to access `/tmp/` and `/var/tmp/`. Moreover an implicitly `After=` ordering on [systemd-tmpfiles-setup.service(8)](systemd-tmpfiles-setup.service.html) is added.\n\nNote that the implementation of this setting might be impossible (for example if mount namespaces are not available), and the unit should be written in a way that does not solely rely on this setting for security.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#PrivateTmp=",null],
[4,228,"Takes a boolean argument. If true, sets up a new `/dev/` mount for the executed processes and only adds API pseudo devices such as `/dev/null`, `/dev/zero` or `/dev/random` (as well as the pseudo TTY subsystem) to it, but no physical devices such as `/dev/sda`, system memory `/dev/mem`, system ports `/dev/port` and others. This is useful to turn off physical device access by the executed process. Defaults to false.\n\nEnabling this option will install a system call filter to block low-level I/O system calls that are grouped in the `@raw-io` set, remove `CAP_MKNOD` and `CAP_SYS_RAWIO` from the capability bounding set for the unit, and set `DevicePolicy=closed` (see [systemd.resource-control(5)](systemd.resource-control.html) for details). Note that using this setting will disconnect propagation of mounts from the service to the host (propagation in the opposite direction continues to work). This means that this setting may not be used for services which shall be able to install mount points in the main mount namespace. The new `/dev/` will be mounted read-only and 'noexec'. The latter may break old programs which try to set up executable memory by using [mmap(2)](https://man7.org/linux/man-pages/man2/mmap.2.html) of `/dev/zero` instead of using `MAP_ANON`. For this setting the same restrictions regarding mount propagation and privileges apply as for `ReadOnlyPaths=` and related calls, see above.\n\nNote that the implementation of this setting might be impossible (for example if mount namespaces are not available), and the unit should be written in a way that does not solely rely on this setting for security.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).\n\nWhen access to some but not all devices must be possible, the `DeviceAllow=` setting might be used instead. See [systemd.resource-control(5)](systemd.resource-control.html).","#PrivateDevices=",209],
[4,229,"Takes a boolean argument. If true, sets up a new network namespace for the executed processes and configures only the loopback network device \"`lo`\" inside it. No other network devices will be available to the executed process. This is useful to turn off network access by the executed process. Defaults to false. It is possible to run two or more units within the same private network namespace by using the `JoinsNamespaceOf=` directive, see [systemd.unit(5)](systemd.unit.html) for details. Note that this option will disconnect all socket families from the host, including `AF_NETLINK` and `AF_UNIX`. Effectively, for `AF_NETLINK` this means that device configuration events received from [systemd-udevd.service(8)](systemd-udevd.service.html) are not delivered to the unit's processes. And for `AF_UNIX` this has the effect that `AF_UNIX` sockets in the abstract socket namespace of the host will become unavailable to the unit's processes (however, those located in the file system will continue to be accessible).\n\nNote that the implementation of this setting might be impossible (for example if network namespaces are not available), and the unit should be written in a way that does not solely rely on this setting for security.\n\nWhen this option is enabled, `PrivateMounts=` is implied unless it is explicitly disabled, and `/sys` will be remounted to associate it with the new network namespace.\n\nWhen this option is used on a socket unit any sockets bound on behalf of this unit will be bound within a private network namespace. This may be combined with `JoinsNamespaceOf=` to listen on sockets inside of network namespaces of other services.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#PrivateNetwork=",null],
[4,230,"Takes an absolute file system path referring to a Linux network namespace pseudo-file (i.e. a file like `/proc/$PID/ns/net` or a bind mount or symlink to one). When set the invoked processes are added to the network namespace referenced by that path. The path has to point to a valid namespace file at the moment the processes are forked off. If this option is used `PrivateNetwork=` has no effect. If this option is used together with `JoinsNamespaceOf=` then it only has an effect if this unit is started before any of the listed units that have `PrivateNetwork=` or `NetworkNamespacePath=` configured, as otherwise the network namespace of those units is reused.\n\nWhen this option is enabled, `PrivateMounts=` is implied unless it is explicitly disabled, and `/sys` will be remounted to associate it with the new network namespace.\n\nWhen this option is used on a socket unit any sockets bound on behalf of this unit will be bound within the specified network namespace.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#NetworkNamespacePath=",242],
[4,231,"Takes a boolean argument. If true, sets up a new IPC namespace for the executed processes. Each IPC namespace has its own set of System V IPC identifiers and its own POSIX message queue file system. This is useful to avoid name clash of IPC identifiers. Defaults to false. It is possible to run two or more units within the same private IPC namespace by using the `JoinsNamespaceOf=` directive, see [systemd.unit(5)](systemd.unit.html) for details.\n\nNote that IPC namespacing does not have an effect on `AF_UNIX` sockets, which are the most common form of IPC used on Linux. Instead, `AF_UNIX` sockets in the file system are subject to mount namespacing, and those in the abstract namespace are subject to network namespacing. IPC namespacing only has an effect on SysV IPC (which is mostly legacy) as well as POSIX message queues (for which `AF_UNIX`/`SOCK_SEQPACKET` sockets are typically a better replacement). IPC namespacing also has no effect on POSIX shared memory (which is subject to mount namespacing) either. See [ipc\\_namespaces(7)](https://man7.org/linux/man-pages/man7/ipc_namespaces.7.html) for the details.\n\nNote that the implementation of this setting might be impossible (for example if IPC namespaces are not available), and the unit should be written in a way that does not solely rely on this setting for security.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#PrivateIPC=",248],
[4,232,"Takes an absolute file system path referring to a Linux IPC namespace pseudo-file (i.e. a file like `/proc/$PID/ns/ipc` or a bind mount or symlink to one). When set the invoked processes are added to the network namespace referenced by that path. The path has to point to a valid namespace file at the moment the processes are forked off. If this option is used `PrivateIPC=` has no effect. If this option is used together with `JoinsNamespaceOf=` then it only has an effect if this unit is started before any of the listed units that have `PrivateIPC=` or `IPCNamespacePath=` configured, as otherwise the network namespace of those units is reused.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#IPCNamespacePath=",248],
[4,233,"Takes a boolean argument. When set, it enables KSM (kernel samepage merging) for the processes. KSM is a memory-saving de-duplication feature. Anonymous memory pages with identical content can be replaced by a single write-protected page. This feature should only be enabled for jobs that share the same security domain. For details, see [Kernel Samepage Merging](https://docs.kernel.org/admin-guide/mm/ksm.html) in the kernel documentation.\n\nNote that this functionality might not be available, for example if KSM is disabled in the kernel, or the kernel doesn't support controlling KSM at the process level through [prctl(2)](https://man7.org/linux/man-pages/man2/prctl.2.html).","#MemoryKSM=",254],
[4,234,"Takes a boolean argument. If true, sets up a new user namespace for the executed processes and configures a minimal user and group mapping, that maps the \"`root`\" user and group as well as the unit's own user and group to themselves and everything else to the \"`nobody`\" user and group. This is useful to securely detach the user and group databases used by the unit from the rest of the system, and thus to create an effective sandbox environment. All files, directories, processes, IPC objects and other resources owned by users/groups not equaling \"`root`\" or the unit's own will stay visible from within the unit but appear owned by the \"`nobody`\" user and group. If this mode is enabled, all unit processes are run without privileges in the host user namespace (regardless if the unit's own user/group is \"`root`\" or not). Specifically this means that the process will have zero process capabilities on the host's user namespace, but full capabilities within the service's user namespace. Settings such as `CapabilityBoundingSet=` will affect only the latter, and there's no way to acquire additional capabilities in the host's user namespace. Defaults to off.\n\nWhen this setting is set up by a per-user instance of the service manager, the mapping of the \"`root`\" user and group to itself is omitted (unless the user manager is root). Additionally, in the per-user instance manager case, the user namespace will be set up before most other namespaces. This means that combining `PrivateUsers=``true` with other namespaces will enable use of features not normally supported by the per-user instances of the service manager.\n\nThis setting is particularly useful in conjunction with `RootDirectory=`/`RootImage=`, as the need to synchronize the user and group databases in the root directory and on the host is reduced, as the only users and groups who need to be matched are \"`root`\", \"`nobody`\" and the unit's own user and group.\n\nNote that the implementation of this setting might be impossible (for example if user namespaces are not available), and the unit should be written in a way that does not solely rely on this setting for security.","#PrivateUsers=",232],
[4,235,"Takes a boolean argument. When set, sets up a new UTS namespace for the executed processes. In addition, changing hostname or domainname is prevented. Defaults to off.\n\nNote that the implementation of this setting might be impossible (for example if UTS namespaces are not available), and the unit should be written in a way that does not solely rely on this setting for security.\n\nNote that when this option is enabled for a service hostname changes no longer propagate from the system into the service, it is hence not suitable for services that need to take notice of system hostname changes dynamically.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#ProtectHostname=",242],
[4,236,"Takes a boolean argument. If set, writes to the hardware clock or system clock will be denied. Defaults to off. Enabling this option removes `CAP_SYS_TIME` and `CAP_WAKE_ALARM` from the capability bounding set for this unit, installs a system call filter to block calls that can set the clock, and `DeviceAllow=char-rtc r` is implied. Note that the system calls are blocked altogether, the filter does not take into account that some of the calls can be used to read the clock state with some parameter combinations. Effectively, `/dev/rtc0`, `/dev/rtc1`, etc. are made read-only to the service. See [systemd.resource-control(5)](systemd.resource-control.html) for the details about `DeviceAllow=`.\n\nIt is recommended to turn this on for most services that do not need modify the clock or check its state.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#ProtectClock=",245],
[4,237,"Takes a boolean argument. If true, kernel variables accessible through `/proc/sys/`, `/sys/`, `/proc/sysrq-trigger`, `/proc/latency_stats`, `/proc/acpi`, `/proc/timer_stats`, `/proc/fs` and `/proc/irq` will be made read-only to all processes of the unit. Usually, tunable kernel variables should be initialized only at boot-time, for example with the [sysctl.d(5)](sysctl.d.html) mechanism. Few services need to write to these at runtime; it is hence recommended to turn this on for most services. For this setting the same restrictions regarding mount propagation and privileges apply as for `ReadOnlyPaths=` and related calls, see above. Defaults to off. Note that this option does not prevent indirect changes to kernel tunables effected by IPC calls to other processes. However, `InaccessiblePaths=` may be used to make relevant IPC file system objects inaccessible. If `ProtectKernelTunables=` is set, `MountAPIVFS=yes` is implied.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#ProtectKernelTunables=",232],
[4,238,"Takes a boolean argument. If true, explicit module loading will be denied. This allows module load and unload operations to be turned off on modular kernels. It is recommended to turn this on for most services that do not need special file systems or extra kernel modules to work. Defaults to off. Enabling this option removes `CAP_SYS_MODULE` from the capability bounding set for the unit, and installs a system call filter to block module system calls, also `/usr/lib/modules` is made inaccessible. For this setting the same restrictions regarding mount propagation and privileges apply as for `ReadOnlyPaths=` and related calls, see above. Note that limited automatic module loading due to user configuration or kernel mapping tables might still happen as side effect of requested user operations, both privileged and unprivileged. To disable module auto-load feature please see [sysctl.d(5)](sysctl.d.html) `kernel.modules_disabled` mechanism and `/proc/sys/kernel/modules_disabled` documentation.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#ProtectKernelModules=",232],
[4,239,"Takes a boolean argument. If true, access to the kernel log ring buffer will be denied. It is recommended to turn this on for most services that do not need to read from or write to the kernel log ring buffer. Enabling this option removes `CAP_SYSLOG` from the capability bounding set for this unit, and installs a system call filter to block the [syslog(2)](https://man7.org/linux/man-pages/man2/syslog.2.html) system call (not to be confused with the libc API [syslog(3)](https://man7.org/linux/man-pages/man3/syslog.3.html) for userspace logging). The kernel exposes its log buffer to userspace via `/dev/kmsg` and `/proc/kmsg`. If enabled, these are made inaccessible to all the processes in the unit.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#ProtectKernelLogs=",244],
[4,240,"Takes a boolean argument. If true, the Linux Control Groups ([cgroups(7)](https://man7.org/linux/man-pages/man7/cgroups.7.html)) hierarchies accessible through `/sys/fs/cgroup/` will be made read-only to all processes of the unit. Except for container managers no services should require write access to the control groups hierarchies; it is hence recommended to turn this on for most services. For this setting the same restrictions regarding mount propagation and privileges apply as for `ReadOnlyPaths=` and related calls, see above. Defaults to off. If `ProtectControlGroups=` is set, `MountAPIVFS=yes` is implied.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.","#ProtectControlGroups=",232],
[4,241,"Restricts the set of socket address families accessible to the processes of this unit. Takes \"`none`\", or a space-separated list of address family names to allow-list, such as `AF_UNIX`, `AF_INET` or `AF_INET6`. When \"`none`\" is specified, then all address families will be denied. When prefixed with \"`~`\" the listed address families will be applied as deny list, otherwise as allow list. Note that this restricts access to the [socket(2)](https://man7.org/linux/man-pages/man2/socket.2.html) system call only. Sockets passed into the process by other means (for example, by using socket activation with socket units, see [systemd.socket(5)](systemd.socket.html)) are unaffected. Also, sockets created with `socketpair()` (which creates connected AF\\_UNIX sockets only) are unaffected. Note that this option has no effect on 32-bit x86, s390, s390x, mips, mips-le, ppc, ppc-le, ppc64, ppc64-le and is ignored (but works correctly on other ABIs, including x86-64). Note that on systems supporting multiple ABIs (such as x86/x86-64) it is recommended to turn off alternative ABIs for services, so that they cannot be used to circumvent the restrictions of this option. Specifically, it is recommended to combine this option with `SystemCallArchitectures=native` or similar. By default, no restrictions apply, all address families are accessible to processes. If assigned the empty string, any previous address family restriction changes are undone. This setting does not affect commands prefixed with \"`+`\".\n\nUse this option to limit exposure of processes to remote access, in particular via exotic and sensitive network protocols, such as `AF_PACKET`. Note that in most cases, the local `AF_UNIX` address family should be included in the configured allow list as it is frequently used for local communication, including for [syslog(2)](https://man7.org/linux/man-pages/man2/syslog.2.html) logging.","#RestrictAddressFamilies=",211],
[4,242,"Restricts the set of filesystems processes of this unit can open files on. Takes a space-separated list of filesystem names. Any filesystem listed is made accessible to the unit's processes, access to filesystem types not listed is prohibited (allow-listing). If the first character of the list is \"`~`\", the effect is inverted: access to the filesystems listed is prohibited (deny-listing). If the empty string is assigned, access to filesystems is not restricted.\n\nIf you specify both types of this option (i.e. allow-listing and deny-listing), the first encountered will take precedence and will dictate the default action (allow access to the filesystem or deny it). Then the next occurrences of this option will add or delete the listed filesystems from the set of the restricted filesystems, depending on its type and the default action.\n\nExample: if a unit has the following,\n\nRestrictFileSystems=ext4 tmpfs\nRestrictFileSystems=ext2 ext4\n\nthen access to `ext4`, `tmpfs`, and `ext2` is allowed and access to other filesystems is denied.\n\nExample: if a unit has the following,\n\nRestrictFileSystems=ext4 tmpfs\nRestrictFileSystems=~ext4\n\nthen only access `tmpfs` is allowed.\n\nExample: if a unit has the following,\n\nRestrictFileSystems=~ext4 tmpfs\nRestrictFileSystems=ext4\n\nthen only access to `tmpfs` is denied.\n\nAs the number of possible filesystems is large, predefined sets of filesystems are provided. A set starts with \"`@`\" character, followed by name of the set.\n\n**TableÂ 3.Â Currently predefined filesystem sets**\n\n| Set | Description |\n| --- | --- |\n| @basic-api | Basic filesystem API. |\n| @auxiliary-api | Auxiliary filesystem API. |\n| @common-block | Common block device filesystems. |\n| @historical-block | Historical block device filesystems. |\n| @network | Well-known network filesystems. |\n| @privileged-api | Privileged filesystem API. |\n| @temporary | Temporary filesystems: tmpfs, ramfs. |\n| @known | All known filesystems defined by the kernel. This list is defined statically in systemd based on a kernel version that was available when this systemd version was released. It will become progressively more out-of-date as the kernel is updated. |\n\n  \n\nUse [systemd-analyze(1)](systemd-analyze.html)'s **filesystems** command to retrieve a list of filesystems defined on the local system.\n\nNote that this setting might not be supported on some systems (for example if the LSM eBPF hook is not enabled in the underlying kernel or if not using the unified control group hierarchy). In that case this setting has no effect.\n\nThis option cannot be bypassed by prefixing \"`+`\" to the executable path in the service unit, as it applies to the whole control group.","#RestrictFileSystems=",250],
[4,243,"Restricts access to Linux namespace functionality for the processes of this unit. For details about Linux namespaces, see [namespaces(7)](https://man7.org/linux/man-pages/man7/namespaces.7.html). Either takes a boolean argument, or a space-separated list of namespace type identifiers. If false (the default), no restrictions on namespace creation and switching are made. If true, access to any kind of namespacing is prohibited. Otherwise, a space-separated list of namespace type identifiers must be specified, consisting of any combination of: `cgroup`, `ipc`, `net`, `mnt`, `pid`, `user` and `uts`. Any namespace type listed is made accessible to the unit's processes, access to namespace types not listed is prohibited (allow-listing). By prepending the list with a single tilde character (\"`~`\") the effect may be inverted: only the listed namespace types will be made inaccessible, all unlisted ones are permitted (deny-listing). If the empty string is assigned, the default namespace restrictions are applied, which is equivalent to false. This option may appear more than once, in which case the namespace types are merged by `OR`, or by `AND` if the lines are prefixed with \"`~`\" (see examples below). Internally, this setting limits access to the [unshare(2)](https://man7.org/linux/man-pages/man2/unshare.2.html), [clone(2)](https://man7.org/linux/man-pages/man2/clone.2.html) and [setns(2)](https://man7.org/linux/man-pages/man2/setns.2.html) system calls, taking the specified flags parameters into account. Note that â€” if this option is used â€” in addition to restricting creation and switching of the specified types of namespaces (or all of them, if true) access to the `setns()` system call with a zero flags parameter is prohibited. This setting is only supported on x86, x86-64, mips, mips-le, mips64, mips64-le, mips64-n32, mips64-le-n32, ppc64, ppc64-le, s390 and s390x, and enforces no restrictions on other architectures.\n\nExample: if a unit has the following,\n\nRestrictNamespaces=cgroup ipc\nRestrictNamespaces=cgroup net\n\nthen `cgroup`, `ipc`, and `net` are set. If the second line is prefixed with \"`~`\", e.g.,\n\nRestrictNamespaces=cgroup ipc\nRestrictNamespaces=~cgroup net\n\nthen, only `ipc` is set.","#RestrictNamespaces=",233],
[4,244,"Takes a boolean argument. If set, locks down the [personality(2)](https://man7.org/linux/man-pages/man2/personality.2.html) system call so that the kernel execution domain may not be changed from the default or the personality selected with `Personality=` directive. This may be useful to improve security, because odd personality emulations may be poorly tested and source of vulnerabilities.","#LockPersonality=",235],
[4,245,"Takes a boolean argument. If set, attempts to create memory mappings that are writable and executable at the same time, or to change existing memory mappings to become executable, or mapping shared memory segments as executable, are prohibited. Specifically, a system call filter is added (or preferably, an equivalent kernel check is enabled with [prctl(2)](https://man7.org/linux/man-pages/man2/prctl.2.html)) that rejects [mmap(2)](https://man7.org/linux/man-pages/man2/mmap.2.html) system calls with both `PROT_EXEC` and `PROT_WRITE` set, [mprotect(2)](https://man7.org/linux/man-pages/man2/mprotect.2.html) or [pkey\\_mprotect(2)](https://man7.org/linux/man-pages/man2/pkey_mprotect.2.html) system calls with `PROT_EXEC` set and [shmat(2)](https://man7.org/linux/man-pages/man2/shmat.2.html) system calls with `SHM_EXEC` set. Note that this option is incompatible with programs and libraries that generate program code dynamically at runtime, including JIT execution engines, executable stacks, and code \"trampoline\" feature of various C compilers. This option improves service security, as it makes harder for software exploits to change running code dynamically. However, the protection can be circumvented, if the service can write to a filesystem, which is not mounted with `noexec` (such as `/dev/shm`), or it can use `memfd_create()`. This can be prevented by making such file systems inaccessible to the service (e.g. `InaccessiblePaths=/dev/shm`) and installing further system call filters (`SystemCallFilter=~memfd_create`). Note that this feature is fully available on x86-64, and partially on x86. Specifically, the `shmat()` protection is not available on x86. Note that on systems supporting multiple ABIs (such as x86/x86-64) it is recommended to turn off alternative ABIs for services, so that they cannot be used to circumvent the restrictions of this option. Specifically, it is recommended to combine this option with `SystemCallArchitectures=native` or similar.","#MemoryDenyWriteExecute=",231],
[4,246,"Takes a boolean argument. If set, any attempts to enable realtime scheduling in a process of the unit are refused. This restricts access to realtime task scheduling policies such as `SCHED_FIFO`, `SCHED_RR` or `SCHED_DEADLINE`. See [sched(7)](https://man7.org/linux/man-pages/man7/sched.7.html) for details about these scheduling policies. Realtime scheduling policies may be used to monopolize CPU time for longer periods of time, and may hence be used to lock up or otherwise trigger Denial-of-Service situations on the system. It is hence recommended to restrict access to realtime scheduling to the few programs that actually require them. Defaults to off.","#RestrictRealtime=",231],
[4,247,"Takes a boolean argument. If set, any attempts to set the set-user-ID (SUID) or set-group-ID (SGID) bits on files or directories will be denied (for details on these bits see [inode(7)](https://man7.org/linux/man-pages/man7/inode.7.html)). As the SUID/SGID bits are mechanisms to elevate privileges, and allow users to acquire the identity of other users, it is recommended to restrict creation of SUID/SGID files to the few programs that actually require them. Note that this restricts marking of any type of file system object with these bits, including both regular files and directories (where the SGID is a different meaning than for files, see documentation). This option is implied if `DynamicUser=` is enabled. Defaults to off.","#RestrictSUIDSGID=",242],
[4,248,"Takes a boolean parameter. If set, all System V and POSIX IPC objects owned by the user and group the processes of this unit are run as are removed when the unit is stopped. This setting only has an effect if at least one of `User=`, `Group=` and `DynamicUser=` are used. It has no effect on IPC objects owned by the root user. Specifically, this removes System V semaphores, as well as System V and POSIX shared memory segments and message queues. If multiple units use the same user or group the IPC objects are removed when the last of these units is stopped. This setting is implied if `DynamicUser=` is set.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.","#RemoveIPC=",232],
[4,249,"Takes a boolean parameter. If set, the processes of this unit will be run in their own private file system (mount) namespace with all mount propagation from the processes towards the host's main file system namespace turned off. This means any file system mount points established or removed by the unit's processes will be private to them and not be visible to the host. However, file system mount points established or removed on the host will be propagated to the unit's processes. See [mount\\_namespaces(7)](https://man7.org/linux/man-pages/man7/mount_namespaces.7.html) for details on file system namespaces. Defaults to off.\n\nWhen turned on, this executes three operations for each invoked process: a new `CLONE_NEWNS` namespace is created, after which all existing mounts are remounted to `MS_SLAVE` to disable propagation from the unit's processes to the host (but leaving propagation in the opposite direction in effect). Finally, the mounts are remounted again to the propagation mode configured with `MountFlags=`, see below.\n\nFile system namespaces are set up individually for each process forked off by the service manager. Mounts established in the namespace of the process created by `ExecStartPre=` will hence be cleaned up automatically as soon as that process exits and will not be available to subsequent processes forked off for `ExecStart=` (and similar applies to the various other commands configured for units). Similarly, `JoinsNamespaceOf=` does not permit sharing kernel mount namespaces between units, it only enables sharing of the `/tmp/` and `/var/tmp/` directories.\n\nOther file system namespace unit settings â€” `PrivateMounts=`, `PrivateTmp=`, `PrivateDevices=`, `ProtectSystem=`, `ProtectHome=`, `ReadOnlyPaths=`, `InaccessiblePaths=`, `ReadWritePaths=`, â€¦ â€” also enable file system namespacing in a fashion equivalent to this option. Hence it is primarily useful to explicitly request this behaviour if none of the other settings are used.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#PrivateMounts=",239],
[4,250,"Takes a mount propagation setting: `shared`, `slave` or `private`, which controls whether file system mount points in the file system namespaces set up for this unit's processes will receive or propagate mounts and unmounts from other file system namespaces. See [mount(2)](https://man7.org/linux/man-pages/man2/mount.2.html) for details on mount propagation, and the three propagation flags in particular.\n\nThis setting only controls the _final_ propagation setting in effect on all mount points of the file system namespace created for each process of this unit. Other file system namespacing unit settings (see the discussion in `PrivateMounts=` above) will implicitly disable mount and unmount propagation from the unit's processes towards the host by changing the propagation setting of all mount points in the unit's file system namespace to `slave` first. Setting this option to `shared` does not reestablish propagation in that case.\n\nIf not set â€“ but file system namespaces are enabled through another file system namespace unit setting â€“ `shared` mount propagation is used, but â€” as mentioned â€” as `slave` is applied first, propagation from the unit's processes to the host is still turned off.\n\nIt is not recommended to use `private` mount propagation for units, as this means temporary mounts (such as removable media) of the host will stay mounted and thus indefinitely busy in forked off processes, as unmount propagation events won't be received by the file system namespace of the unit.\n\nUsually, it is best to leave this setting unmodified, and use higher level file system namespacing options instead, in particular `PrivateMounts=`, see above.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).","#MountFlags=",null],
[4,251,"Takes a space-separated list of system call names. If this setting is used, all system calls executed by the unit processes except for the listed ones will result in immediate process termination with the `SIGSYS` signal (allow-listing). (See `SystemCallErrorNumber=` below for changing the default action). If the first character of the list is \"`~`\", the effect is inverted: only the listed system calls will result in immediate process termination (deny-listing). Deny-listed system calls and system call groups may optionally be suffixed with a colon (\"`:`\") and \"`errno`\" error number (between 0 and 4095) or errno name such as `EPERM`, `EACCES` or `EUCLEAN` (see [errno(3)](https://man7.org/linux/man-pages/man3/errno.3.html) for a full list). This value will be returned when a deny-listed system call is triggered, instead of terminating the processes immediately. Special setting \"`kill`\" can be used to explicitly specify killing. This value takes precedence over the one given in `SystemCallErrorNumber=`, see below. This feature makes use of the Secure Computing Mode 2 interfaces of the kernel ('seccomp filtering') and is useful for enforcing a minimal sandboxing environment. Note that the `execve()`, `exit()`, `exit_group()`, `getrlimit()`, `rt_sigreturn()`, `sigreturn()` system calls and the system calls for querying time and sleeping are implicitly allow-listed and do not need to be listed explicitly. This option may be specified more than once, in which case the filter masks are merged. If the empty string is assigned, the filter is reset, all prior assignments will have no effect. This does not affect commands prefixed with \"`+`\".\n\nNote that on systems supporting multiple ABIs (such as x86/x86-64) it is recommended to turn off alternative ABIs for services, so that they cannot be used to circumvent the restrictions of this option. Specifically, it is recommended to combine this option with `SystemCallArchitectures=native` or similar.\n\nNote that strict system call filters may impact execution and error handling code paths of the service invocation. Specifically, access to the `execve()` system call is required for the execution of the service binary â€” if it is blocked service invocation will necessarily fail. Also, if execution of the service binary fails for some reason (for example: missing service executable), the error handling logic might require access to an additional set of system calls in order to process and log this failure correctly. It might be necessary to temporarily disable system call filters in order to simplify debugging of such failures.\n\nIf you specify both types of this option (i.e. allow-listing and deny-listing), the first encountered will take precedence and will dictate the default action (termination or approval of a system call). Then the next occurrences of this option will add or delete the listed system calls from the set of the filtered system calls, depending of its type and the default action. (For example, if you have started with an allow list rule for `read()` and `write()`, and right after it add a deny list rule for `write()`, then `write()` will be removed from the set.)\n\nAs the number of possible system calls is large, predefined sets of system calls are provided. A set starts with \"`@`\" character, followed by name of the set.\n\n**TableÂ 4.Â Currently predefined system call sets**\n\n| Set | Description |\n| --- | --- |\n| @aio | Asynchronous I/O ([io\\_setup(2)](https://man7.org/linux/man-pages/man2/io_setup.2.html), [io\\_submit(2)](https://man7.org/linux/man-pages/man2/io_submit.2.html), and related calls) |\n| @basic-io | System calls for basic I/O: reading, writing, seeking, file descriptor duplication and closing ([read(2)](https://man7.org/linux/man-pages/man2/read.2.html), [write(2)](https://man7.org/linux/man-pages/man2/write.2.html), and related calls) |\n| @chown | Changing file ownership ([chown(2)](https://man7.org/linux/man-pages/man2/chown.2.html), [fchownat(2)](https://man7.org/linux/man-pages/man2/fchownat.2.html), and related calls) |\n| @clock | System calls for changing the system clock ([adjtimex(2)](https://man7.org/linux/man-pages/man2/adjtimex.2.html), [settimeofday(2)](https://man7.org/linux/man-pages/man2/settimeofday.2.html), and related calls) |\n| @cpu-emulation | System calls for CPU emulation functionality ([vm86(2)](https://man7.org/linux/man-pages/man2/vm86.2.html) and related calls) |\n| @debug | Debugging, performance monitoring and tracing functionality ([ptrace(2)](https://man7.org/linux/man-pages/man2/ptrace.2.html), [perf\\_event\\_open(2)](https://man7.org/linux/man-pages/man2/perf_event_open.2.html) and related calls) |\n| @file-system | File system operations: opening, creating files and directories for read and write, renaming and removing them, reading file properties, or creating hard and symbolic links |\n| @io-event | Event loop system calls ([poll(2)](https://man7.org/linux/man-pages/man2/poll.2.html), [select(2)](https://man7.org/linux/man-pages/man2/select.2.html), [epoll(7)](https://man7.org/linux/man-pages/man7/epoll.7.html), [eventfd(2)](https://man7.org/linux/man-pages/man2/eventfd.2.html) and related calls) |\n| @ipc | Pipes, SysV IPC, POSIX Message Queues and other IPC ([mq\\_overview(7)](https://man7.org/linux/man-pages/man7/mq_overview.7.html), [svipc(7)](https://man7.org/linux/man-pages/man7/svipc.7.html)) |\n| @keyring | Kernel keyring access ([keyctl(2)](https://man7.org/linux/man-pages/man2/keyctl.2.html) and related calls) |\n| @memlock | Locking of memory in RAM ([mlock(2)](https://man7.org/linux/man-pages/man2/mlock.2.html), [mlockall(2)](https://man7.org/linux/man-pages/man2/mlockall.2.html) and related calls) |\n| @module | Loading and unloading of kernel modules ([init\\_module(2)](https://man7.org/linux/man-pages/man2/init_module.2.html), [delete\\_module(2)](https://man7.org/linux/man-pages/man2/delete_module.2.html) and related calls) |\n| @mount | Mounting and unmounting of file systems ([mount(2)](https://man7.org/linux/man-pages/man2/mount.2.html), [chroot(2)](https://man7.org/linux/man-pages/man2/chroot.2.html), and related calls) |\n| @network-io | Socket I/O (including local AF\\_UNIX): [socket(7)](https://man7.org/linux/man-pages/man7/socket.7.html), [unix(7)](https://man7.org/linux/man-pages/man7/unix.7.html) |\n| @obsolete | Unusual, obsolete or unimplemented ([create\\_module(2)](https://man7.org/linux/man-pages/man2/create_module.2.html), [gtty(2)](https://man7.org/linux/man-pages/man2/gtty.2.html), â€¦) |\n| @pkey | System calls that deal with memory protection keys ([pkeys(7)](https://man7.org/linux/man-pages/man7/pkeys.7.html)) |\n| @privileged | All system calls which need super-user capabilities ([capabilities(7)](https://man7.org/linux/man-pages/man7/capabilities.7.html)) |\n| @process | Process control, execution, namespacing operations ([clone(2)](https://man7.org/linux/man-pages/man2/clone.2.html), [kill(2)](https://man7.org/linux/man-pages/man2/kill.2.html), [namespaces(7)](https://man7.org/linux/man-pages/man7/namespaces.7.html), â€¦) |\n| @raw-io | Raw I/O port access ([ioperm(2)](https://man7.org/linux/man-pages/man2/ioperm.2.html), [iopl(2)](https://man7.org/linux/man-pages/man2/iopl.2.html), `pciconfig_read()`, â€¦) |\n| @reboot | System calls for rebooting and reboot preparation ([reboot(2)](https://man7.org/linux/man-pages/man2/reboot.2.html), `kexec()`, â€¦) |\n| @resources | System calls for changing resource limits, memory and scheduling parameters ([setrlimit(2)](https://man7.org/linux/man-pages/man2/setrlimit.2.html), [setpriority(2)](https://man7.org/linux/man-pages/man2/setpriority.2.html), â€¦) |\n| @sandbox | System calls for sandboxing programs ([seccomp(2)](https://man7.org/linux/man-pages/man2/seccomp.2.html), Landlock system calls, â€¦) |\n| @setuid | System calls for changing user ID and group ID credentials, ([setuid(2)](https://man7.org/linux/man-pages/man2/setuid.2.html), [setgid(2)](https://man7.org/linux/man-pages/man2/setgid.2.html), [setresuid(2)](https://man7.org/linux/man-pages/man2/setresuid.2.html), â€¦) |\n| @signal | System calls for manipulating and handling process signals ([signal(2)](https://man7.org/linux/man-pages/man2/signal.2.html), [sigprocmask(2)](https://man7.org/linux/man-pages/man2/sigprocmask.2.html), â€¦) |\n| @swap | System calls for enabling/disabling swap devices ([swapon(2)](https://man7.org/linux/man-pages/man2/swapon.2.html), [swapoff(2)](https://man7.org/linux/man-pages/man2/swapoff.2.html)) |\n| @sync | Synchronizing files and memory to disk ([fsync(2)](https://man7.org/linux/man-pages/man2/fsync.2.html), [msync(2)](https://man7.org/linux/man-pages/man2/msync.2.html), and related calls) |\n| @system-service | A reasonable set of system calls used by common system services, excluding any special purpose calls. This is the recommended starting point for allow-listing system calls for system services, as it contains what is typically needed by system services, but excludes overly specific interfaces. For example, the following APIs are excluded: \"`@clock`\", \"`@mount`\", \"`@swap`\", \"`@reboot`\". |\n| @timer | System calls for scheduling operations by time ([alarm(2)](https://man7.org/linux/man-pages/man2/alarm.2.html), [timer\\_create(2)](https://man7.org/linux/man-pages/man2/timer_create.2.html), â€¦) |\n| @known | All system calls defined by the kernel. This list is defined statically in systemd based on a kernel version that was available when this systemd version was released. It will become progressively more out-of-date as the kernel is updated. |\n\n  \nNote, that as new system calls are added to the kernel, additional system calls might be added to the groups above. Contents of the sets may also change between systemd versions. In addition, the list of system calls depends on the kernel version and architecture for which systemd was compiled. Use **systemd-analyzeÂ syscall-filter** to list the actual list of system calls in each filter.\n\nGenerally, allow-listing system calls (rather than deny-listing) is the safer mode of operation. It is recommended to enforce system call allow lists for all long-running system services. Specifically, the following lines are a relatively safe basic choice for the majority of system services:\n\n\\[Service\\]\nSystemCallFilter=@system-service\nSystemCallErrorNumber=EPERM\n\nNote that various kernel system calls are defined redundantly: there are multiple system calls for executing the same operation. For example, the `pidfd_send_signal()` system call may be used to execute operations similar to what can be done with the older `kill()` system call, hence blocking the latter without the former only provides weak protection. Since new system calls are added regularly to the kernel as development progresses, keeping system call deny lists comprehensive requires constant work. It is thus recommended to use allow-listing instead, which offers the benefit that new system calls are by default implicitly blocked until the allow list is updated.\n\nAlso note that a number of system calls are required to be accessible for the dynamic linker to work. The dynamic linker is required for running most regular programs (specifically: all dynamic ELF binaries, which is how most distributions build packaged programs). This means that blocking these system calls (which include `open()`, `openat()` or `mmap()`) will make most programs typically shipped with generic distributions unusable.\n\nIt is recommended to combine the file system namespacing related options with `SystemCallFilter=~@mount`, in order to prohibit the unit's processes to undo the mappings. Specifically these are the options `PrivateTmp=`, `PrivateDevices=`, `ProtectSystem=`, `ProtectHome=`, `ProtectKernelTunables=`, `ProtectControlGroups=`, `ProtectKernelLogs=`, `ProtectClock=`, `ReadOnlyPaths=`, `InaccessiblePaths=` and `ReadWritePaths=`.","#SystemCallFilter=",187],
[4,252,"Takes an \"`errno`\" error number (between 1 and 4095) or errno name such as `EPERM`, `EACCES` or `EUCLEAN`, to return when the system call filter configured with `SystemCallFilter=` is triggered, instead of terminating the process immediately. See [errno(3)](https://man7.org/linux/man-pages/man3/errno.3.html) for a full list of error codes. When this setting is not used, or when the empty string or the special setting \"`kill`\" is assigned, the process will be terminated immediately when the filter is triggered.","#SystemCallErrorNumber=",209],
[4,253,"Takes a space-separated list of architecture identifiers to include in the system call filter. The known architecture identifiers are the same as for `ConditionArchitecture=` described in [systemd.unit(5)](systemd.unit.html), as well as `x32`, `mips64-n32`, `mips64-le-n32`, and the special identifier `native`. The special identifier `native` implicitly maps to the native architecture of the system (or more precisely: to the architecture the system manager is compiled for). By default, this option is set to the empty list, i.e. no filtering is applied.\n\nIf this setting is used, processes of this unit will only be permitted to call native system calls, and system calls of the specified architectures. For the purposes of this option, the x32 architecture is treated as including x86-64 system calls. However, this setting still fulfills its purpose, as explained below, on x32.\n\nSystem call filtering is not equally effective on all architectures. For example, on x86 filtering of network socket-related calls is not possible, due to ABI limitations â€” a limitation that x86-64 does not have, however. On systems supporting multiple ABIs at the same time â€” such as x86/x86-64 â€” it is hence recommended to limit the set of permitted system call architectures so that secondary ABIs may not be used to circumvent the restrictions applied to the native ABI of the system. In particular, setting `SystemCallArchitectures=native` is a good choice for disabling non-native ABIs.\n\nSystem call architectures may also be restricted system-wide via the `SystemCallArchitectures=` option in the global configuration. See [systemd-system.conf(5)](systemd-system.conf.html) for details.","#SystemCallArchitectures=",209],
[4,254,"Takes a space-separated list of system call names. If this setting is used, all system calls executed by the unit processes for the listed ones will be logged. If the first character of the list is \"`~`\", the effect is inverted: all system calls except the listed system calls will be logged. This feature makes use of the Secure Computing Mode 2 interfaces of the kernel ('seccomp filtering') and is useful for auditing or setting up a minimal sandboxing environment. This option may be specified more than once, in which case the filter masks are merged. If the empty string is assigned, the filter is reset, all prior assignments will have no effect. This does not affect commands prefixed with \"`+`\".","#SystemCallLog=",247],
[4,255,"Sets environment variables for executed processes. Each line is unquoted using the rules described in \"Quoting\" section in [systemd.syntax(7)](systemd.syntax.html) and becomes a list of variable assignments. If you need to assign a value containing spaces or the equals sign to a variable, put quotes around the whole assignment. Variable expansion is not performed inside the strings and the \"`$`\" character has no special meaning. Specifier expansion is performed, see the \"Specifiers\" section in [systemd.unit(5)](systemd.unit.html).\n\nThis option may be specified more than once, in which case all listed variables will be set. If the same variable is listed twice, the later setting will override the earlier setting. If the empty string is assigned to this option, the list of environment variables is reset, all prior assignments have no effect.\n\nThe names of the variables can contain ASCII letters, digits, and the underscore character. Variable names cannot be empty or start with a digit. In variable values, most characters are allowed, but non-printable characters are currently rejected.\n\nExample:\n\nEnvironment=\"VAR1=word1 word2\" VAR2=word3 \"VAR3=$word 5 6\"\n\ngives three variables \"`VAR1`\", \"`VAR2`\", \"`VAR3`\" with the values \"`word1 word2`\", \"`word3`\", \"`$word 5 6`\".\n\nSee [environ(7)](https://man7.org/linux/man-pages/man7/environ.7.html) for details about environment variables.\n\nNote that environment variables are not suitable for passing secrets (such as passwords, key material, â€¦) to service processes. Environment variables set for a unit are exposed to unprivileged clients via D-Bus IPC, and generally not understood as being data that requires protection. Moreover, environment variables are propagated down the process tree, including across security boundaries (such as setuid/setgid executables), and hence might leak to processes that should not have access to the secret data. Use `LoadCredential=`, `LoadCredentialEncrypted=` or `SetCredentialEncrypted=` (see below) to pass data to unit processes securely.","#Environment=",null],
[4,256,"Similar to `Environment=`, but reads the environment variables from a text file. The text file should contain newline-separated variable assignments. Empty lines, lines without an \"`=`\" separator, or lines starting with \"`;`\" or \"`#`\" will be ignored, which may be used for commenting. The file must be encoded with UTF-8. Valid characters are [unicode scalar values](https://www.unicode.org/glossary/#unicode_scalar_value) other than [unicode noncharacters](https://www.unicode.org/glossary/#noncharacter), `U+0000` `NUL`, and `U+FEFF` [unicode byte order mark](https://www.unicode.org/glossary/#byte_order_mark). Control codes other than `NUL` are allowed.\n\nIn the file, an unquoted value after the \"`=`\" is parsed with the same backslash-escape rules as [POSIX shell unquoted text](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02_01), but unlike in a shell, interior whitespace is preserved and quotes after the first non-whitespace character are preserved. Leading and trailing whitespace (space, tab, carriage return) is discarded, but interior whitespace within the line is preserved verbatim. A line ending with a backslash will be continued to the following one, with the newline itself discarded. A backslash \"`\\`\" followed by any character other than newline will preserve the following character, so that \"`\\\\`\" will become the value \"`\\`\".\n\nIn the file, a \"`'`\"-quoted value after the \"`=`\" can span multiple lines and contain any character verbatim other than single quote, like [POSIX shell single-quoted text](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02_02). No backslash-escape sequences are recognized. Leading and trailing whitespace outside of the single quotes is discarded.\n\nIn the file, a \"`\"`\"-quoted value after the \"`=`\" can span multiple lines, and the same escape sequences are recognized as in [POSIX shell double-quoted text](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02_03). Backslash (\"`\\`\") followed by any of \"``\"\\`$``\" will preserve that character. A backslash followed by newline is a line continuation, and the newline itself is discarded. A backslash followed by any other character is ignored; both the backslash and the following character are preserved verbatim. Leading and trailing whitespace outside of the double quotes is discarded.\n\nThe argument passed should be an absolute filename or wildcard expression, optionally prefixed with \"`-`\", which indicates that if the file does not exist, it will not be read and no error or warning message is logged. This option may be specified more than once in which case all specified files are read. If the empty string is assigned to this option, the list of file to read is reset, all prior assignments have no effect.\n\nThe files listed with this directive will be read shortly before the process is executed (more specifically, after all processes from a previous unit state terminated. This means you can generate these files in one unit state, and read it with this option in the next. The files are read from the file system of the service manager, before any file system changes like bind mounts take place).\n\nSettings from these files override settings made with `Environment=`. If the same variable is set twice from these files, the files will be read in the order they are specified and the later setting will override the earlier setting.","#EnvironmentFile=",null],
[4,257,"Pass environment variables set for the system service manager to executed processes. Takes a space-separated list of variable names. This option may be specified more than once, in which case all listed variables will be passed. If the empty string is assigned to this option, the list of environment variables to pass is reset, all prior assignments have no effect. Variables specified that are not set for the system manager will not be passed and will be silently ignored. Note that this option is only relevant for the system service manager, as system services by default do not automatically inherit any environment variables set for the service manager itself. However, in case of the user service manager all environment variables are passed to the executed processes anyway, hence this option is without effect for the user service manager.\n\nVariables set for invoked processes due to this setting are subject to being overridden by those configured with `Environment=` or `EnvironmentFile=`.\n\nExample:\n\nPassEnvironment=VAR1 VAR2 VAR3\n\npasses three variables \"`VAR1`\", \"`VAR2`\", \"`VAR3`\" with the values set for those variables in PID1.\n\nSee [environ(7)](https://man7.org/linux/man-pages/man7/environ.7.html) for details about environment variables.","#PassEnvironment=",228],
[4,258,"Explicitly unset environment variable assignments that would normally be passed from the service manager to invoked processes of this unit. Takes a space-separated list of variable names or variable assignments. This option may be specified more than once, in which case all listed variables/assignments will be unset. If the empty string is assigned to this option, the list of environment variables/assignments to unset is reset. If a variable assignment is specified (that is: a variable name, followed by \"`=`\", followed by its value), then any environment variable matching this precise assignment is removed. If a variable name is specified (that is a variable name without any following \"`=`\" or value), then any assignment matching the variable name, regardless of its value is removed. Note that the effect of `UnsetEnvironment=` is applied as final step when the environment list passed to executed processes is compiled. That means it may undo assignments from any configuration source, including assignments made through `Environment=` or `EnvironmentFile=`, inherited from the system manager's global set of environment variables, inherited via `PassEnvironment=`, set by the service manager itself (such as `$NOTIFY_SOCKET` and such), or set by a PAM module (in case `PAMName=` is used).\n\nSee \"Environment Variables in Spawned Processes\" below for a description of how those settings combine to form the inherited environment. See [environ(7)](https://man7.org/linux/man-pages/man7/environ.7.html) for general information about environment variables.","#UnsetEnvironment=",235],
[4,259,"Controls where file descriptor 0 (STDIN) of the executed processes is connected to. Takes one of `null`, `tty`, `tty-force`, `tty-fail`, `data`, <code>file:<em><code>path</code></em></code>, `socket` or <code>fd:<em><code>name</code></em></code>.\n\nIf `null` is selected, standard input will be connected to `/dev/null`, i.e. all read attempts by the process will result in immediate EOF.\n\nIf `tty` is selected, standard input is connected to a TTY (as configured by `TTYPath=`, see below) and the executed process becomes the controlling process of the terminal. If the terminal is already being controlled by another process, the executed process waits until the current controlling process releases the terminal.\n\n`tty-force` is similar to `tty`, but the executed process is forcefully and immediately made the controlling process of the terminal, potentially removing previous controlling processes from the terminal.\n\n`tty-fail` is similar to `tty`, but if the terminal already has a controlling process start-up of the executed process fails.\n\nThe `data` option may be used to configure arbitrary textual or binary data to pass via standard input to the executed process. The data to pass is configured via `StandardInputText=`/`StandardInputData=` (see below). Note that the actual file descriptor type passed (memory file, regular file, UNIX pipe, â€¦) might depend on the kernel and available privileges. In any case, the file descriptor is read-only, and when read returns the specified data followed by EOF.\n\nThe <code>file:<em><code>path</code></em></code> option may be used to connect a specific file system object to standard input. An absolute path following the \"`:`\" character is expected, which may refer to a regular file, a FIFO or special file. If an `AF_UNIX` socket in the file system is specified, a stream socket is connected to it. The latter is useful for connecting standard input of processes to arbitrary system services.\n\nThe `socket` option is valid in socket-activated services only, and requires the relevant socket unit file (see [systemd.socket(5)](systemd.socket.html) for details) to have `Accept=yes` set, or to specify a single socket only. If this option is set, standard input will be connected to the socket the service was activated from, which is primarily useful for compatibility with daemons designed for use with the traditional [inetd(8)](https://www.freebsd.org/cgi/man.cgi?inetd\\(8\\)) socket activation daemon (`$LISTEN_FDS` (and related) environment variables are not passed when `socket` value is configured).\n\nThe <code>fd:<em><code>name</code></em></code> option connects standard input to a specific, named file descriptor provided by a socket unit. The name may be specified as part of this option, following a \"`:`\" character (e.g. \"`fd:foobar`\"). If no name is specified, the name \"`stdin`\" is implied (i.e. \"`fd`\" is equivalent to \"`fd:stdin`\"). At least one socket unit defining the specified name must be provided via the `Sockets=` option, and the file descriptor name may differ from the name of its containing socket unit. If multiple matches are found, the first one will be used. See `FileDescriptorName=` in [systemd.socket(5)](systemd.socket.html) for more details about named file descriptors and their ordering.\n\nThis setting defaults to `null`, unless `StandardInputText=`/`StandardInputData=` are set, in which case it defaults to `data`.","#StandardInput=",null],
[4,260,"Controls where file descriptor 1 (stdout) of the executed processes is connected to. Takes one of `inherit`, `null`, `tty`, `journal`, `kmsg`, `journal+console`, `kmsg+console`, <code>file:<em><code>path</code></em></code>, <code>append:<em><code>path</code></em></code>, <code>truncate:<em><code>path</code></em></code>, `socket` or <code>fd:<em><code>name</code></em></code>.\n\n`inherit` duplicates the file descriptor of standard input for standard output.\n\n`null` connects standard output to `/dev/null`, i.e. everything written to it will be lost.\n\n`tty` connects standard output to a tty (as configured via `TTYPath=`, see below). If the TTY is used for output only, the executed process will not become the controlling process of the terminal, and will not fail or wait for other processes to release the terminal.\n\n`journal` connects standard output with the journal, which is accessible via [journalctl(1)](journalctl.html). Note that everything that is written to kmsg (see below) is implicitly stored in the journal as well, the specific option listed below is hence a superset of this one. (Also note that any external, additional syslog daemons receive their log data from the journal, too, hence this is the option to use when logging shall be processed with such a daemon.)\n\n`kmsg` connects standard output with the kernel log buffer which is accessible via [dmesg(1)](https://man7.org/linux/man-pages/man1/dmesg.1.html), in addition to the journal. The journal daemon might be configured to send all logs to kmsg anyway, in which case this option is no different from `journal`.\n\n`journal+console` and `kmsg+console` work in a similar way as the two options above but copy the output to the system console as well.\n\nThe <code>file:<em><code>path</code></em></code> option may be used to connect a specific file system object to standard output. The semantics are similar to the same option of `StandardInput=`, see above. If _`path`_ refers to a regular file on the filesystem, it is opened (created if it doesn't exist yet) for writing at the beginning of the file, but without truncating it. If standard input and output are directed to the same file path, it is opened only once â€” for reading as well as writing â€” and duplicated. This is particularly useful when the specified path refers to an `AF_UNIX` socket in the file system, as in that case only a single stream connection is created for both input and output.\n\n<code>append:<em><code>path</code></em></code> is similar to <code>file:<em><code>path</code></em></code> above, but it opens the file in append mode.\n\n<code>truncate:<em><code>path</code></em></code> is similar to <code>file:<em><code>path</code></em></code> above, but it truncates the file when opening it. For units with multiple command lines, e.g. `Type=oneshot` services with multiple `ExecStart=`, or services with `ExecCondition=`, `ExecStartPre=` or `ExecStartPost=`, the output file is reopened and therefore re-truncated for each command line. If the output file is truncated while another process still has the file open, e.g. by an `ExecReload=` running concurrently with an `ExecStart=`, and the other process continues writing to the file without adjusting its offset, then the space between the file pointers of the two processes may be filled with `NUL` bytes, producing a sparse file. Thus, <code>truncate:<em><code>path</code></em></code> is typically only useful for units where only one process runs at a time, such as services with a single `ExecStart=` and no `ExecStartPost=`, `ExecReload=`, `ExecStop=` or similar.\n\n`socket` connects standard output to a socket acquired via socket activation. The semantics are similar to the same option of `StandardInput=`, see above.\n\nThe <code>fd:<em><code>name</code></em></code> option connects standard output to a specific, named file descriptor provided by a socket unit. A name may be specified as part of this option, following a \"`:`\" character (e.g. \"<code>fd:<em><code>foobar</code></em></code>\"). If no name is specified, the name \"`stdout`\" is implied (i.e. \"`fd`\" is equivalent to \"`fd:stdout`\"). At least one socket unit defining the specified name must be provided via the `Sockets=` option, and the file descriptor name may differ from the name of its containing socket unit. If multiple matches are found, the first one will be used. See `FileDescriptorName=` in [systemd.socket(5)](systemd.socket.html) for more details about named descriptors and their ordering.\n\nIf the standard output (or error output, see below) of a unit is connected to the journal or the kernel log buffer, the unit will implicitly gain a dependency of type `After=` on `systemd-journald.socket` (also see the \"Implicit Dependencies\" section above). Also note that in this case stdout (or stderr, see below) will be an `AF_UNIX` stream socket, and not a pipe or FIFO that can be re-opened. This means when executing shell scripts the construct **echo \"hello\" > /dev/stderr** for writing text to stderr will not work. To mitigate this use the construct **echo \"hello\" >&2** instead, which is mostly equivalent and avoids this pitfall.\n\nIf `StandardInput=` is set to one of `tty`, `tty-force`, `tty-fail`, `socket`, or <code>fd:<em><code>name</code></em></code>, this setting defaults to `inherit`.\n\nIn other cases, this setting defaults to the value set with `DefaultStandardOutput=` in [systemd-system.conf(5)](systemd-system.conf.html), which defaults to `journal`. Note that setting this parameter might result in additional dependencies to be added to the unit (see above).","#StandardOutput=",null],
[4,261,"Controls where file descriptor 2 (stderr) of the executed processes is connected to. The available options are identical to those of `StandardOutput=`, with some exceptions: if set to `inherit` the file descriptor used for standard output is duplicated for standard error, while <code>fd:<em><code>name</code></em></code> will use a default file descriptor name of \"`stderr`\".\n\nThis setting defaults to the value set with `DefaultStandardError=` in [systemd-system.conf(5)](systemd-system.conf.html), which defaults to `inherit`. Note that setting this parameter might result in additional dependencies to be added to the unit (see above).","#StandardError=",null],
[4,262,"Configures arbitrary textual or binary data to pass via file descriptor 0 (STDIN) to the executed processes. These settings have no effect unless `StandardInput=` is set to `data` (which is the default if `StandardInput=` is not set otherwise, but `StandardInputText=`/`StandardInputData=` is). Use this option to embed process input data directly in the unit file.\n\n`StandardInputText=` accepts arbitrary textual data. C-style escapes for special characters as well as the usual \"`%`\"-specifiers are resolved. Each time this setting is used the specified text is appended to the per-unit data buffer, followed by a newline character (thus every use appends a new line to the end of the buffer). Note that leading and trailing whitespace of lines configured with this option is removed. If an empty line is specified the buffer is cleared (hence, in order to insert an empty line, add an additional \"`\\n`\" to the end or beginning of a line).\n\n`StandardInputData=` accepts arbitrary binary data, encoded in [Base64](https://tools.ietf.org/html/rfc2045#section-6.8). No escape sequences or specifiers are resolved. Any whitespace in the encoded version is ignored during decoding.\n\nNote that `StandardInputText=` and `StandardInputData=` operate on the same data buffer, and may be mixed in order to configure both binary and textual data for the same input stream. The textual or binary data is joined strictly in the order the settings appear in the unit file. Assigning an empty string to either will reset the data buffer.\n\nPlease keep in mind that in order to maintain readability long unit file settings may be split into multiple lines, by suffixing each line (except for the last) with a \"`\\`\" character (see [systemd.unit(5)](systemd.unit.html) for details). This is particularly useful for large data configured with these two options. Example:\n\nâ€¦\nStandardInput=data\nStandardInputData=V2XigLJyZSBubyBzdHJhbmdlcnMgdG8gbG92ZQpZb3Uga25vdyB0aGUgcnVsZXMgYW5kIHNvIGRv \\\\\n                  IEkKQSBmdWxsIGNvbW1pdG1lbnQncyB3aGF0IEnigLJtIHRoaW5raW5nIG9mCllvdSB3b3VsZG4n \\\\\n                  dCBnZXQgdGhpcyBmcm9tIGFueSBvdGhlciBndXkKSSBqdXN0IHdhbm5hIHRlbGwgeW91IGhvdyBJ \\\\\n                  J20gZmVlbGluZwpHb3R0YSBtYWtlIHlvdSB1bmRlcnN0YW5kCgpOZXZlciBnb25uYSBnaXZlIHlv \\\\\n                  dSB1cApOZXZlciBnb25uYSBsZXQgeW91IGRvd24KTmV2ZXIgZ29ubmEgcnVuIGFyb3VuZCBhbmQg \\\\\n                  ZGVzZXJ0IHlvdQpOZXZlciBnb25uYSBtYWtlIHlvdSBjcnkKTmV2ZXIgZ29ubmEgc2F5IGdvb2Ri \\\\\n                  eWUKTmV2ZXIgZ29ubmEgdGVsbCBhIGxpZSBhbmQgaHVydCB5b3UK\nâ€¦","#StandardInputText=",236],
[4,263,"Configures filtering by log level of log messages generated by this unit. Takes a **syslog** log level, one of `emerg` (lowest log level, only highest priority messages), `alert`, `crit`, `err`, `warning`, `notice`, `info`, `debug` (highest log level, also lowest priority messages). See [syslog(3)](https://man7.org/linux/man-pages/man3/syslog.3.html) for details. By default no filtering is applied (i.e. the default maximum log level is `debug`). Use this option to configure the logging system to drop log messages of a specific service above the specified level. For example, set `LogLevelMax=``info` in order to turn off debug logging of a particularly chatty unit. Note that the configured level is applied to any log messages written by any of the processes belonging to this unit, as well as any log messages written by the system manager process (PID 1) in reference to this unit, sent via any supported logging protocol. The filtering is applied early in the logging pipeline, before any kind of further processing is done. Moreover, messages which pass through this filter successfully might still be dropped by filters applied at a later stage in the logging subsystem. For example, `MaxLevelStore=` configured in [journald.conf(5)](journald.conf.html) might prohibit messages of higher log levels to be stored on disk, even though the per-unit `LogLevelMax=` permitted it to be processed.","#LogLevelMax=",236],
[4,264,"Configures additional log metadata fields to include in all log records generated by processes associated with this unit, including systemd. This setting takes one or more journal field assignments in the format \"`FIELD=VALUE`\" separated by whitespace. See [systemd.journal-fields(7)](systemd.journal-fields.html) for details on the journal field concept. Even though the underlying journal implementation permits binary field values, this setting accepts only valid UTF-8 values. To include space characters in a journal field value, enclose the assignment in double quotes (\"). The usual specifiers are expanded in all assignments (see below). Note that this setting is not only useful for attaching additional metadata to log records of a unit, but given that all fields and values are indexed may also be used to implement cross-unit log record matching. Assign an empty string to reset the list.","#LogExtraFields=",236],
[4,265,"Configures the rate limiting that is applied to log messages generated by this unit. If, in the time interval defined by `LogRateLimitIntervalSec=`, more messages than specified in `LogRateLimitBurst=` are logged by a service, all further messages within the interval are dropped until the interval is over. A message about the number of dropped messages is generated. The time specification for `LogRateLimitIntervalSec=` may be specified in the following units: \"s\", \"min\", \"h\", \"ms\", \"us\". See [systemd.time(7)](systemd.time.html) for details. The default settings are set by `RateLimitIntervalSec=` and `RateLimitBurst=` configured in [journald.conf(5)](journald.conf.html). Note that this only applies to log messages that are processed by the logging subsystem, i.e. by [systemd-journald.service(8)](systemd-journald.service.html). This means that if you connect a service's stderr directly to a file via `StandardOutput=file:â€¦` or a similar setting, the rate limiting will not be applied to messages written that way (but it will be enforced for messages generated via [syslog(3)](https://man7.org/linux/man-pages/man3/syslog.3.html) and similar functions).","#LogRateLimitIntervalSec=",240],
[4,266,"Define an extended regular expression to filter log messages based on the `MESSAGE=` field of the structured message. If the first character of the pattern is \"`~`\", log entries matching the pattern should be discarded. This option takes a single pattern as an argument but can be used multiple times to create a list of allowed and denied patterns. If the empty string is assigned, the filter is reset, and all prior assignments will have no effect.\n\nBecause the \"`~`\" character is used to define denied patterns, it must be replaced with \"`\\x7e`\" to allow a message starting with \"`~`\". For example, \"`~foobar`\" would add a pattern matching \"`foobar`\" to the deny list, while \"`\\x7efoobar`\" would add a pattern matching \"`~foobar`\" to the allow list.\n\nLog messages are tested against denied patterns (if any), then against allowed patterns (if any). If a log message matches any of the denied patterns, it will be discarded, whatever the allowed patterns. Then, remaining log messages are tested against allowed patterns. Messages matching against none of the allowed pattern are discarded. If no allowed patterns are defined, then all messages are processed directly after going through denied filters.\n\nFiltering is based on the unit for which `LogFilterPatterns=` is defined, meaning log messages coming from [systemd(1)](systemd.html) about the unit are not taken into account. Filtered log messages won't be forwarded to traditional syslog daemons, the kernel log buffer (kmsg), the systemd console, or sent as wall messages to all logged-in users.","#LogFilterPatterns=",253],
[4,267,"Run the unit's processes in the specified journal namespace. Expects a short user-defined string identifying the namespace. If not used the processes of the service are run in the default journal namespace, i.e. their log stream is collected and processed by `systemd-journald.service`. If this option is used any log data generated by processes of this unit (regardless if via the `syslog()`, journal native logging or stdout/stderr logging) is collected and processed by an instance of the `systemd-journald@.service` template unit, which manages the specified namespace. The log data is stored in a data store independent from the default log namespace's data store. See [systemd-journald.service(8)](systemd-journald.service.html) for details about journal namespaces.\n\nInternally, journal namespaces are implemented through Linux mount namespacing and over-mounting the directory that contains the relevant `AF_UNIX` sockets used for logging in the unit's mount namespace. Since mount namespaces are used this setting disconnects propagation of mounts from the unit's processes to the host, similarly to how `ReadOnlyPaths=` and similar settings describe above work. Journal namespaces may hence not be used for services that need to establish mount points on the host.\n\nWhen this option is used the unit will automatically gain ordering and requirement dependencies on the two socket units associated with the `systemd-journald@.service` instance so that they are automatically established prior to the unit starting up. Note that when this option is used log output of this service does not appear in the regular [journalctl(1)](journalctl.html) output, unless the `--namespace=` option is used.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.","#LogNamespace=",245],
[4,268,"Sets the process name (\"**syslog** tag\") to prefix log lines sent to the logging system or the kernel log buffer with. If not set, defaults to the process name of the executed process. This option is only useful when `StandardOutput=` or `StandardError=` are set to `journal` or `kmsg` (or to the same settings in combination with `+console`) and only applies to log messages written to stdout or stderr.","#SyslogIdentifier=",null],
[4,269,"Sets the **syslog** facility identifier to use when logging. One of `kern`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6` or `local7`. See [syslog(3)](https://man7.org/linux/man-pages/man3/syslog.3.html) for details. This option is only useful when `StandardOutput=` or `StandardError=` are set to `journal` or `kmsg` (or to the same settings in combination with `+console`), and only applies to log messages written to stdout or stderr. Defaults to `daemon`.","#SyslogFacility=",null],
[4,270,"The default **syslog** log level to use when logging to the logging system or the kernel log buffer. One of `emerg`, `alert`, `crit`, `err`, `warning`, `notice`, `info`, `debug`. See [syslog(3)](https://man7.org/linux/man-pages/man3/syslog.3.html) for details. This option is only useful when `StandardOutput=` or `StandardError=` are set to `journal` or `kmsg` (or to the same settings in combination with `+console`), and only applies to log messages written to stdout or stderr. Note that individual lines output by executed processes may be prefixed with a different log level which can be used to override the default log level specified here. The interpretation of these prefixes may be disabled with `SyslogLevelPrefix=`, see below. For details, see [sd-daemon(3)](sd-daemon.html). Defaults to `info`.","#SyslogLevel=",null],
[4,271,"Takes a boolean argument. If true and `StandardOutput=` or `StandardError=` are set to `journal` or `kmsg` (or to the same settings in combination with `+console`), log lines written by the executed process that are prefixed with a log level will be processed with this log level set but the prefix removed. If set to false, the interpretation of these prefixes is disabled and the logged lines are passed on as-is. This only applies to log messages written to stdout or stderr. For details about this prefixing see [sd-daemon(3)](sd-daemon.html). Defaults to true.","#SyslogLevelPrefix=",null],
[4,272,"Sets the terminal device node to use if standard input, output, or error are connected to a TTY (see above). Defaults to `/dev/console`.","#TTYPath=",null],
[4,273,"Reset the terminal device specified with `TTYPath=` before and after execution. Defaults to \"`no`\".","#TTYReset=",null],
[4,274,"Disconnect all clients which have opened the terminal device specified with `TTYPath=` before and after execution. Defaults to \"`no`\".","#TTYVHangup=",null],
[4,275,"Configure the size of the TTY specified with `TTYPath=`. If unset or set to the empty string, the kernel default is used.","#TTYRows=",250],
[4,276,"If the terminal device specified with `TTYPath=` is a virtual console terminal, try to deallocate the TTY before and after execution. This ensures that the screen and scrollback buffer is cleared. Defaults to \"`no`\".","#TTYVTDisallocate=",null],
[4,277,"Pass a credential to the unit. Credentials are limited-size binary or textual objects that may be passed to unit processes. They are primarily used for passing cryptographic keys (both public and private) or certificates, user account information or identity information from host to services. The data is accessible from the unit's processes via the file system, at a read-only location that (if possible and permitted) is backed by non-swappable memory. The data is only accessible to the user associated with the unit, via the `User=`/`DynamicUser=` settings (as well as the superuser). When available, the location of credentials is exported as the `$CREDENTIALS_DIRECTORY` environment variable to the unit's processes.\n\nThe `LoadCredential=` setting takes a textual ID to use as name for a credential plus a file system path, separated by a colon. The ID must be a short ASCII string suitable as filename in the filesystem, and may be chosen freely by the user. If the specified path is absolute it is opened as regular file and the credential data is read from it. If the absolute path refers to an `AF_UNIX` stream socket in the file system a connection is made to it (only once at unit start-up) and the credential data read from the connection, providing an easy IPC integration point for dynamically transferring credentials from other services.\n\nIf the specified path is not absolute and itself qualifies as valid credential identifier it is attempted to find a credential that the service manager itself received under the specified name â€” which may be used to propagate credentials from an invoking environment (e.g. a container manager that invoked the service manager) into a service. If no matching system credential is found, the directories `/etc/credstore/`, `/run/credstore/` and `/usr/lib/credstore/` are searched for files under the credential's name â€” which hence are recommended locations for credential data on disk. If `LoadCredentialEncrypted=` is used `/run/credstore.encrypted/`, `/etc/credstore.encrypted/`, and `/usr/lib/credstore.encrypted/` are searched as well.\n\nIf the file system path is omitted it is chosen identical to the credential name, i.e. this is a terse way to declare credentials to inherit from the service manager into a service. This option may be used multiple times, each time defining an additional credential to pass to the unit.\n\nIf an absolute path referring to a directory is specified, every file in that directory (recursively) will be loaded as a separate credential. The ID for each credential will be the provided ID suffixed with \"`_$FILENAME`\" (e.g., \"`Key_file1`\"). When loading from a directory, symlinks will be ignored.\n\nThe contents of the file/socket may be arbitrary binary or textual data, including newline characters and `NUL` bytes.\n\nThe `LoadCredentialEncrypted=` setting is identical to `LoadCredential=`, except that the credential data is decrypted and authenticated before being passed on to the executed processes. Specifically, the referenced path should refer to a file or socket with an encrypted credential, as implemented by [systemd-creds(1)](systemd-creds.html). This credential is loaded, decrypted, authenticated and then passed to the application in plaintext form, in the same way a regular credential specified via `LoadCredential=` would be. A credential configured this way may be symmetrically encrypted/authenticated with a secret key derived from the system's TPM2 security chip, or with a secret key stored in `/var/lib/systemd/credentials.secret`, or with both. Using encrypted and authenticated credentials improves security as credentials are not stored in plaintext and only authenticated and decrypted into plaintext the moment a service requiring them is started. Moreover, credentials may be bound to the local hardware and installations, so that they cannot easily be analyzed offline, or be generated externally. When `DevicePolicy=` is set to \"`closed`\" or \"`strict`\", or set to \"`auto`\" and `DeviceAllow=` is set, or `PrivateDevices=` is set, then this setting adds `/dev/tpmrm0` with `rw` mode to `DeviceAllow=`. See [systemd.resource-control(5)](systemd.resource-control.html) for the details about `DevicePolicy=` or `DeviceAllow=`.\n\nThe credential files/IPC sockets must be accessible to the service manager, but don't have to be directly accessible to the unit's processes: the credential data is read and copied into separate, read-only copies for the unit that are accessible to appropriately privileged processes. This is particularly useful in combination with `DynamicUser=` as this way privileged data can be made available to processes running under a dynamic UID (i.e. not a previously known one) without having to open up access to all users.\n\nIn order to reference the path a credential may be read from within a `ExecStart=` command line use \"`${CREDENTIALS_DIRECTORY}/mycred`\", e.g. \"`ExecStart=cat ${CREDENTIALS_DIRECTORY}/mycred`\". In order to reference the path a credential may be read from within a `Environment=` line use \"`%d/mycred`\", e.g. \"`Environment=MYCREDPATH=%d/mycred`\". For system services the path may also be referenced as \"<code>/run/credentials/<em><code>UNITNAME</code></em></code>\" in cases where no interpolation is possible, e.g. configuration files of software that does not yet support credentials natively. `$CREDENTIALS_DIRECTORY` is considered the primary interface to look for credentials, though, since it also works for user services.\n\nCurrently, an accumulated credential size limit of 1 MB per unit is enforced.\n\nThe service manager itself may receive system credentials that can be propagated to services from a hosting container manager or VM hypervisor. See the [Container Interface](https://systemd.io/CONTAINER_INTERFACE) documentation for details about the former. For the latter, pass [DMI/SMBIOS](https://www.dmtf.org/standards/smbios) OEM string table entries (field type 11) with a prefix of \"`io.systemd.credential:`\" or \"`io.systemd.credential.binary:`\". In both cases a key/value pair separated by \"`=`\" is expected, in the latter case the right-hand side is Base64 decoded when parsed (thus permitting binary data to be passed in). Example [qemu](https://www.qemu.org/docs/master/system/index.html) switch: \"`-smbios type=11,value=io.systemd.credential:xx=yy`\", or \"`-smbios type=11,value=io.systemd.credential.binary:rick=TmV2ZXIgR29ubmEgR2l2ZSBZb3UgVXA=`\". Alternatively, use the **qemu** \"`fw_cfg`\" node \"`opt/io.systemd.credentials/`\". Example **qemu** switch: \"`-fw_cfg name=opt/io.systemd.credentials/mycred,string=supersecret`\". They may also be passed from the UEFI firmware environment via [systemd-stub(7)](systemd-stub.html), from the initrd (see [systemd(1)](systemd.html)), or be specified on the kernel command line using the \"`systemd.set_credential=`\" and \"`systemd.set_credential_binary=`\" switches (see [systemd(1)](systemd.html) â€“ this is not recommended since unprivileged userspace can read the kernel command line).\n\nIf referencing an `AF_UNIX` stream socket to connect to, the connection will originate from an abstract namespace socket, that includes information about the unit and the credential ID in its socket name. Use [getpeername(2)](https://man7.org/linux/man-pages/man2/getpeername.2.html) to query this information. The returned socket name is formatted as `NUL` _`RANDOM`_ \"`/unit/`\" _`UNIT`_ \"`/`\" _`ID`_, i.e. a `NUL` byte (as required for abstract namespace socket names), followed by a random string (consisting of alphadecimal characters), followed by the literal string \"`/unit/`\", followed by the requesting unit name, followed by the literal character \"`/`\", followed by the textual credential ID requested. Example: \"`\\0adf9d86b6eda275e/unit/foobar.service/credx`\" in case the credential \"`credx`\" is requested for a unit \"`foobar.service`\". This functionality is useful for using a single listening socket to serve credentials to multiple consumers.\n\nFor further information see [System and Service Credentials](https://systemd.io/CREDENTIALS) documentation.","#LoadCredential=ID:PATH",247],
[4,278,"Pass one or more credentials to the unit. Takes a credential name for which we'll attempt to find a credential that the service manager itself received under the specified name â€” which may be used to propagate credentials from an invoking environment (e.g. a container manager that invoked the service manager) into a service. If the credential name is a glob, all credentials matching the glob are passed to the unit. Matching credentials are searched for in the system credentials, the encrypted system credentials, and under `/etc/credstore/`, `/run/credstore/`, `/usr/lib/credstore/`, `/run/credstore.encrypted/`, `/etc/credstore.encrypted/`, and `/usr/lib/credstore.encrypted/` in that order. When multiple credentials of the same name are found, the first one found is used.\n\nThe globbing expression implements a restrictive subset of [glob(7)](https://man7.org/linux/man-pages/man7/glob.7.html): only a single trailing \"`*`\" wildcard may be specified. Both \"`?`\" and \"`[]`\" wildcards are not permitted, nor are \"`*`\" wildcards anywhere except at the end of the glob expression.\n\nWhen multiple credentials of the same name are found, credentials found by `LoadCredential=` and `LoadCredentialEncrypted=` take priority over credentials found by `ImportCredential=`.","#ImportCredential=GLOB",254],
[4,279,"The `SetCredential=` setting is similar to `LoadCredential=` but accepts a literal value to use as data for the credential, instead of a file system path to read the data from. Do not use this option for data that is supposed to be secret, as it is accessible to unprivileged processes via IPC. It's only safe to use this for user IDs, public key material and similar non-sensitive data. For everything else use `LoadCredential=`. In order to embed binary data into the credential data use C-style escaping (i.e. \"`\\n`\" to embed a newline, or \"`\\x00`\" to embed a `NUL` byte).\n\nThe `SetCredentialEncrypted=` setting is identical to `SetCredential=` but expects an encrypted credential in literal form as value. This allows embedding confidential credentials securely directly in unit files. Use [systemd-creds(1)](systemd-creds.html)' `-p` switch to generate suitable `SetCredentialEncrypted=` lines directly from plaintext credentials. For further details see `LoadCredentialEncrypted=` above.\n\nWhen multiple credentials of the same name are found, credentials found by `LoadCredential=`, `LoadCredentialEncrypted=` and `ImportCredential=` take priority over credentials found by `SetCredential=`. As such, `SetCredential=` will act as default if no credentials are found by any of the former. In this case not being able to retrieve the credential from the path specified in `LoadCredential=` or `LoadCredentialEncrypted=` is not considered fatal.","#SetCredential=ID:VALUE",247],
[4,280,"Takes a four character identifier string for an [utmp(5)](https://man7.org/linux/man-pages/man5/utmp.5.html) and wtmp entry for this service. This should only be set for services such as **getty** implementations (such as [agetty(8)](http://linux.die.net/man/8/agetty)) where utmp/wtmp entries must be created and cleared before and after execution, or for services that shall be executed as if they were run by a **getty** process (see below). If the configured string is longer than four characters, it is truncated and the terminal four characters are used. This setting interprets %I style string replacements. This setting is unset by default, i.e. no utmp/wtmp entries are created or cleaned up for this service.","#UtmpIdentifier=",null],
[4,281,"Takes one of \"`init`\", \"`login`\" or \"`user`\". If `UtmpIdentifier=` is set, controls which type of [utmp(5)](https://man7.org/linux/man-pages/man5/utmp.5.html)/wtmp entries for this service are generated. This setting has no effect unless `UtmpIdentifier=` is set too. If \"`init`\" is set, only an `INIT_PROCESS` entry is generated and the invoked process must implement a **getty**\\-compatible utmp/wtmp logic. If \"`login`\" is set, first an `INIT_PROCESS` entry, followed by a `LOGIN_PROCESS` entry is generated. In this case, the invoked process must implement a [login(1)](http://linux.die.net/man/1/login)\\-compatible utmp/wtmp logic. If \"`user`\" is set, first an `INIT_PROCESS` entry, then a `LOGIN_PROCESS` entry and finally a `USER_PROCESS` entry is generated. In this case, the invoked process may be any process that is suitable to be run as session leader. Defaults to \"`init`\".","#UtmpMode=",225],
[2,"AmbientCapabilities",[],196,42,3],
[2,"AppArmorProfile",[],200,42,3],
[2,"BindPaths",[],186,42,3],
[2,"BindReadOnlyPaths",[],186,42,3],
[2,"CPUAffinity",[],214,42,3],
[2,"CPUSchedulingPolicy",[],211,42,3],
[2,"CPUSchedulingPriority",[],212,42,3],
[2,"CPUSchedulingResetOnFork","b",213,42,3],
[2,"CacheDirectory",[],221,42,3],
[2,"CacheDirectoryMode",[],222,42,3],
[2,"CapabilityBoundingSet",[],195,42,3],
[2,"ConfigurationDirectory",[],221,42,3],
[2,"ConfigurationDirectoryMode",[],222,42,3],
[2,"CoredumpFilter",[],204,42,3],
[2,"DynamicUser","b",191,42,3],
[2,"Environment",[],255,42,3],
[2,"EnvironmentFile",[],256,42,3],
[2,"ExecPaths",[],225,42,3],
[2,"ExecSearchPath",[],173,42,3],
[2,"ExtensionDirectories",[],189,42,3],
[2,"ExtensionImagePolicy",[],182,42,3],
[2,"ExtensionImages",[],188,42,3],
[2,"Group",[],190,42,3],
[2,"IOSchedulingClass",[],217,42,3],
[2,"IOSchedulingPriority",[],218,42,3],
[2,"IPCNamespacePath",[],232,42,3],
[2,"IgnoreSIGPIPE","b",209,42,3],
[2,"ImportCredential",["GLOB"],278,42,3],
[2,"InaccessiblePaths",[],225,42,3],
[2,"KeyringMode",[],205,42,3],
[2,"LimitAS",[],202,42,3],
[2,"LimitCORE",[],202,42,3],
[2,"LimitCPU",[],202,42,3],
[2,"LimitDATA",[],202,42,3],
[2,"LimitFSIZE",[],202,42,3],
[2,"LimitLOCKS",[],202,42,3],
[2,"LimitMEMLOCK",[],202,42,3],
[2,"LimitMSGQUEUE",[],202,42,3],
[2,"LimitNICE",[],202,42,3],
[2,"LimitNOFILE",[],202,42,3],
[2,"LimitNPROC",[],202,42,3],
[2,"LimitRSS",[],202,42,3],
[2,"LimitRTPRIO",[],202,42,3],
[2,"LimitRTTIME",[],202,42,3],
[2,"LimitSIGPENDING",[],202,42,3],
[2,"LimitSTACK",[],202,42,3],
[2,"LoadCredential",["ID[:PATH]"],277,42,3],
[2,"LoadCredentialEncrypted",["ID[:PATH]"],277,42,3],
[2,"LockPersonality","b",244,42,3],
[2,"LogExtraFields",[],264,42,3],
[2,"LogFilterPatterns",[],266,42,3],
[2,"LogLevelMax",[],263,42,3],
[2,"LogNamespace",[],267,42,3],
[2,"LogRateLimitBurst",[],265,42,3],
[2,"LogRateLimitIntervalSec",[],265,42,3],
[2,"LogsDirectory",[],221,42,3],
[2,"LogsDirectoryMode",[],222,42,3],
[2,"MemoryDenyWriteExecute","b",245,42,3],
[2,"MemoryKSM","b",233,42,3],
[2,"MountAPIVFS","b",183,42,3],
[2,"MountFlags",[],250,42,3],
[2,"MountImagePolicy",[],182,42,3],
[2,"MountImages",[],187,42,3],
[2,"NUMAMask",[],216,42,3],
[2,"NUMAPolicy",[],215,42,3],
[2,"NetworkNamespacePath",[],230,42,3],
[2,"Nice",[],210,42,3],
[2,"NoExecPaths",[],225,42,3],
[2,"NoNewPrivileges","b",197,42,3],
[2,"OOMScoreAdjust",[],206,42,3],
[2,"PAMName",[],194,42,3],
[2,"PassEnvironment",[],257,42,3],
[2,"Personality",[],208,42,3],
[2,"PrivateDevices","b",228,42,3],
[2,"PrivateIPC","b",231,42,3],
[2,"PrivateMounts","b",249,42,3],
[2,"PrivateNetwork","b",229,42,3],
[2,"PrivateTmp","b",227,42,3],
[2,"PrivateUsers","b",234,42,3],
[2,"ProcSubset",[],185,42,3],
[2,"ProtectClock","b",236,42,3],
[2,"ProtectControlGroups","b",240,42,3],
[2,"ProtectHome","b",220,42,3],
[2,"ProtectHostname","b",235,42,3],
[2,"ProtectKernelLogs","b",239,42,3],
[2,"ProtectKernelModules","b",238,42,3],
[2,"ProtectKernelTunables","b",237,42,3],
[2,"ProtectProc",[],184,42,3],
[2,"ProtectSystem","b",219,42,3],
[2,"ReadOnlyPaths",[],225,42,3],
[2,"ReadWritePaths",[],225,42,3],
[2,"RemoveIPC","b",248,42,3],
[2,"RestrictAddressFamilies",[],241,42,3],
[2,"RestrictFileSystems",[],242,42,3],
[2,"RestrictNamespaces","b",243,42,3],
[2,"RestrictRealtime","b",246,42,3],
[2,"RestrictSUIDSGID","b",247,42,3],
[2,"RootDirectory",[],175,42,3],
[2,"RootEphemeral","b",178,42,3],
[2,"RootHash",[],179,42,3],
[2,"RootHashSignature",[],180,42,3],
[2,"RootImage",[],176,42,3],
[2,"RootImageOptions",[],177,42,3],
[2,"RootImagePolicy",[],182,42,3],
[2,"RootVerity",[],181,42,3],
[2,"RuntimeDirectory",[],221,42,3],
[2,"RuntimeDirectoryMode",[],222,42,3],
[2,"RuntimeDirectoryPreserve","b",223,42,3],
[2,"SELinuxContext",[],199,42,3],
[2,"SecureBits",[],198,42,3],
[2,"SetCredential",["ID:VALUE"],279,42,3],
[2,"SetCredentialEncrypted",["ID:VALUE"],279,42,3],
[2,"SetLoginEnvironment","b",193,42,3],
[2,"SmackProcessLabel",[],201,42,3],
[2,"StandardError",[],261,42,3],
[2,"StandardInput",[],259,42,3],
[2,"StandardInputData",[],262,42,3],
[2,"StandardInputText",[],262,42,3],
[2,"StandardOutput",[],260,42,3],
[2,"StateDirectory",[],221,42,3],
[2,"StateDirectoryMode",[],222,42,3],
[2,"SupplementaryGroups",[],192,42,3],
[2,"SyslogFacility",[],269,42,3],
[2,"SyslogIdentifier",[],268,42,3],
[2,"SyslogLevel",[],270,42,3],
[2,"SyslogLevelPrefix","b",271,42,3],
[2,"SystemCallArchitectures",[],253,42,3],
[2,"SystemCallErrorNumber",[],252,42,3],
[2,"SystemCallFilter",[],251,42,3],
[2,"SystemCallLog",[],254,42,3],
[2,"TTYColumns",[],275,42,3],
[2,"TTYPath",[],272,42,3],
[2,"TTYReset",[],273,42,3],
[2,"TTYRows",[],275,42,3],
[2,"TTYVHangup",[],274,42,3],
[2,"TTYVTDisallocate",[],276,42,3],
[2,"TemporaryFileSystem",[],226,42,3],
[2,"TimeoutCleanSec",[],224,42,3],
[2,"TimerSlackNSec",[],207,42,3],
[2,"UMask",[],203,42,3],
[2,"UnsetEnvironment",[],258,42,3],
[2,"User",[],190,42,3],
[2,"UtmpIdentifier",[],280,42,3],
[2,"UtmpMode",[],281,42,3],
[2,"WorkingDirectory",[],174,42,3],
[3,43,"systemd.journal-fields(7)","systemd.journal-fields â€” Special journal fields","systemd.journal-fields.html"],
[4,282,"The human-readable message string for this entry. This is supposed to be the primary text shown to the user. It is usually not translated (but might be in some cases), and is not supposed to be parsed for metadata. In order to encode multiple lines in a single log entry, separate them by newline characters (ASCII code 10), but encode them as a single `MESSAGE=` field. Do not add multiple values of this field type to the same entry (also see above), as consuming applications generally do not expect this and are unlikely to show all values in that case.","#MESSAGE=",null],
[4,283,"A 128-bit message identifier ID for recognizing certain message types, if this is desirable. This should contain a 128-bit ID formatted as a lower-case hexadecimal string, without any separating dashes or suchlike. This is recommended to be a UUID-compatible ID, but this is not enforced, and formatted differently. Developers can generate a new ID for this purpose with **systemd-id128 new**.","#MESSAGE_ID=",null],
[4,284,"A priority value between 0 (\"`emerg`\") and 7 (\"`debug`\") formatted as a decimal string. This field is compatible with syslog's priority concept.","#PRIORITY=",null],
[4,285,"The code location generating this message, if known. Contains the source filename, the line number and the function name.","#CODE_FILE=",null],
[4,286,"The low-level Unix error number causing this entry, if any. Contains the numeric value of [errno(3)](https://man7.org/linux/man-pages/man3/errno.3.html) formatted as a decimal string.","#ERRNO=",188],
[4,287,"A randomized, unique 128-bit ID identifying each runtime cycle of the unit. This is different from `_SYSTEMD_INVOCATION_ID` in that it is only used for messages coming from systemd code (e.g. logs from the system/user manager or from forked processes performing systemd-related setup).","#INVOCATION_ID=",245],
[4,288,"Syslog compatibility fields containing the facility (formatted as decimal string), the identifier string (i.e. \"tag\"), the client PID, and the timestamp as specified in the original datagram. (Note that the tag is usually derived from glibc's `program_invocation_short_name` variable, see [program\\_invocation\\_short\\_name(3)](http://linux.die.net/man/3/program_invocation_short_name).)\n\nNote that the journal service does not validate the values of any structured journal fields whose name is not prefixed with an underscore, and this includes any syslog related fields such as these. Hence, applications that supply a facility, PID, or log level are expected to do so properly formatted, i.e. as numeric integers formatted as decimal strings.","#SYSLOG_FACILITY=",null],
[4,289,"The original contents of the syslog line as received in the syslog datagram. This field is only included if the `MESSAGE=` field was modified compared to the original payload or the timestamp could not be located properly and is not included in `SYSLOG_TIMESTAMP=`. Message truncation occurs when the message contains leading or trailing whitespace (trailing and leading whitespace is stripped), or it contains an embedded `NUL` byte (the `NUL` byte and anything after it is not included). Thus, the original syslog line is either stored as `SYSLOG_RAW=` or it can be recreated based on the stored priority and facility, timestamp, identifier, and the message payload in `MESSAGE=`.","#SYSLOG_RAW=",240],
[4,290,"A documentation URL with further information about the topic of the log message. Tools such as **journalctl** will include a hyperlink to a URL specified this way in their output. Should be an \"`http://`\", \"`https://`\", \"`file:/`\", \"`man:`\" or \"`info:`\" URL.","#DOCUMENTATION=",246],
[4,291,"The numeric thread ID (TID) the log message originates from.","#TID=",247],
[4,292,"The name of a unit. Used by the system and user managers when logging about specific units.\n\nWhen <code>--unit=<em><code>name</code></em></code> or <code>--user-unit=<em><code>name</code></em></code> are used with [journalctl(1)](journalctl.html), a match pattern that includes \"<code>UNIT=<em><code>name</code></em>.service</code>\" or \"<code>USER_UNIT=<em><code>name</code></em>.service</code>\" will be generated.","#UNIT=",251],
[4,293,"The process, user, and group ID of the process the journal entry originates from formatted as a decimal string. Note that entries obtained via \"`stdout`\" or \"`stderr`\" of forked processes will contain credentials valid for a parent process (that initiated the connection to **systemd-journald**).","#_PID=",null],
[4,294,"The name, the executable path, and the command line of the process the journal entry originates from.","#_COMM=",null],
[4,295,"The effective [capabilities(7)](https://man7.org/linux/man-pages/man7/capabilities.7.html) of the process the journal entry originates from.","#_CAP_EFFECTIVE=",206],
[4,296,"The session and login UID of the process the journal entry originates from, as maintained by the kernel audit subsystem.","#_AUDIT_SESSION=",null],
[4,297,"The control group path in the systemd hierarchy, the systemd slice unit name, the systemd unit name, the unit name in the systemd user manager (if any), the systemd session ID (if any), and the owner UID of the systemd user unit or systemd session (if any) of the process the journal entry originates from.","#_SYSTEMD_CGROUP=",null],
[4,298,"The SELinux security context (label) of the process the journal entry originates from.","#_SELINUX_CONTEXT=",null],
[4,299,"The earliest trusted timestamp of the message, if any is known that is different from the reception time of the journal. This is the time in microseconds since the epoch UTC, formatted as a decimal string.","#_SOURCE_REALTIME_TIMESTAMP=",null],
[4,300,"The kernel boot ID for the boot the message was generated in, formatted as a 128-bit hexadecimal string.","#_BOOT_ID=",null],
[4,301,"The machine ID of the originating host, as available in [machine-id(5)](machine-id.html).","#_MACHINE_ID=",null],
[4,302,"The invocation ID for the runtime cycle of the unit the message was generated in, as available to processes of the unit in `$INVOCATION_ID` (see [systemd.exec(5)](systemd.exec.html)).","#_SYSTEMD_INVOCATION_ID=",233],
[4,303,"The name of the originating host.","#_HOSTNAME=",null],
[4,304,"How the entry was received by the journal service. Valid transports are:\n\n`audit` [Â¶](#%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20audit%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20 \"Permalink to this term\")\n\nfor those read from the kernel audit subsystem\n\nAdded in version 227.\n\n`driver` [Â¶](#%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20driver%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20 \"Permalink to this term\")\n\nfor internally generated messages\n\nAdded in version 205.\n\n`syslog` [Â¶](#%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20syslog%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20 \"Permalink to this term\")\n\nfor those received via the local syslog socket with the syslog protocol\n\nAdded in version 205.\n\n`journal` [Â¶](#%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20journal%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20 \"Permalink to this term\")\n\nfor those received via the native journal protocol\n\nAdded in version 205.\n\n`stdout` [Â¶](#%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20stdout%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20 \"Permalink to this term\")\n\nfor those read from a service's standard output or error output\n\nAdded in version 205.\n\n`kernel` [Â¶](#%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20kernel%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20 \"Permalink to this term\")\n\nfor those read from the kernel","#_TRANSPORT=",205],
[4,305,"Only applies to \"`_TRANSPORT=stdout`\" records: specifies a randomized 128-bit ID assigned to the stream connection when it was first created. This ID is useful to reconstruct individual log streams from the log records: all log records carrying the same stream ID originate from the same stream.","#_STREAM_ID=",235],
[4,306,"Only applies to \"`_TRANSPORT=stdout`\" records: indicates that the log message in the standard output/error stream was not terminated with a normal newline character (\"`\\n`\", i.e. ASCII 10). Specifically, when set this field is one of `nul` (in case the line was terminated by a `NUL` byte), `line-max` (in case the maximum log line length was reached, as configured with `LineMax=` in [journald.conf(5)](journald.conf.html)), `eof` (if this was the last log record of a stream and the stream ended without a final newline character), or `pid-change` (if the process which generated the log output changed in the middle of a line). Note that this record is not generated when a normal newline character was used for marking the log line end.","#_LINE_BREAK=",235],
[4,307,"If this file was written by a **systemd-journald** instance managing a journal namespace that is not the default, this field contains the namespace identifier. See [systemd-journald.service(8)](systemd-journald.service.html) for details about journal namespaces.","#_NAMESPACE=",245],
[4,308,"A string field that specifies the runtime scope in which the message was logged. If \"`initrd`\", the log message was processed while the system was running inside the initrd. If \"`system`\", the log message was generated after the system switched execution to the host root filesystem.","#_RUNTIME_SCOPE=",252],
[4,309,"The kernel device name. If the entry is associated to a block device, contains the major and minor numbers of the device node, separated by \"`:`\" and prefixed by \"`b`\". Similarly for character devices, but prefixed by \"`c`\". For network devices, this is the interface index prefixed by \"`n`\". For all other devices, this is the subsystem name prefixed by \"`+`\", followed by \"`:`\", followed by the kernel device name.","#_KERNEL_DEVICE=",189],
[4,310,"The kernel subsystem name.","#_KERNEL_SUBSYSTEM=",189],
[4,311,"The kernel device name as it shows up in the device tree below `/sys/`.","#_UDEV_SYSNAME=",189],
[4,312,"The device node path of this device in `/dev/`.","#_UDEV_DEVNODE=",189],
[4,313,"Additional symlink names pointing to the device node in `/dev/`. This field is frequently set more than once per entry.","#_UDEV_DEVLINK=",189],
[4,314,"Used to annotate messages containing coredumps from system and session units. See [coredumpctl(1)](coredumpctl.html).","#COREDUMP_UNIT=",198],
[4,315,"PID of the program that this message pertains to.","#OBJECT_PID=PID",205],
[4,316,"These are additional fields added automatically by **systemd-journald**. Their meaning is the same as `_UID=`, `_GID=`, `_COMM=`, `_EXE=`, `_CMDLINE=`, `_AUDIT_SESSION=`, `_AUDIT_LOGINUID=`, `_SYSTEMD_CGROUP=`, `_SYSTEMD_SESSION=`, `_SYSTEMD_UNIT=`, `_SYSTEMD_USER_UNIT=`, and `_SYSTEMD_OWNER_UID=` as described above, except that the process identified by _`PID`_ is described, instead of the process which logged the message.","#OBJECT_UID=",205],
[4,317,"The cursor for the entry. A cursor is an opaque text string that uniquely describes the position of an entry in the journal and is portable across machines, platforms and journal files.","#__CURSOR=",null],
[4,318,"The wallclock time (`CLOCK_REALTIME`) at the point in time the entry was received by the journal, in microseconds since the epoch UTC, formatted as a decimal string. This has different properties from \"`_SOURCE_REALTIME_TIMESTAMP=`\", as it is usually a bit later but more likely to be monotonic.","#__REALTIME_TIMESTAMP=",null],
[4,319,"The monotonic time (`CLOCK_MONOTONIC`) at the point in time the entry was received by the journal in microseconds, formatted as a decimal string. To be useful as an address for the entry, this should be combined with the boot ID in \"`_BOOT_ID=`\".","#__MONOTONIC_TIMESTAMP=",null],
[4,320,"The sequence number (and associated sequence number ID) of this journal entry in the journal file it originates from. See [sd\\_journal\\_get\\_seqnum(3)](sd_journal_get_seqnum.html) for details.","#__SEQNUM=",254],
[2,"CODE_FILE",[],285,43,null],
[2,"CODE_FUNC",[],285,43,null],
[2,"CODE_LINE",[],285,43,null],
[2,"COREDUMP_UNIT",[],314,43,null],
[2,"COREDUMP_USER_UNIT",[],314,43,null],
[2,"DOCUMENTATION",[],290,43,null],
[2,"ERRNO",[],286,43,null],
[2,"INVOCATION_ID",[],287,43,null],
[2,"MESSAGE",[],282,43,null],
[2,"MESSAGE_ID",[],283,43,null],
[2,"OBJECT_AUDIT_LOGINUID",[],316,43,null],
[2,"OBJECT_AUDIT_SESSION",[],316,43,null],
[2,"OBJECT_CMDLINE",[],316,43,null],
[2,"OBJECT_COMM",[],316,43,null],
[2,"OBJECT_EXE",[],316,43,null],
[2,"OBJECT_GID",[],316,43,null],
[2,"OBJECT_PID",["PID"],315,43,null],
[2,"OBJECT_SYSTEMD_CGROUP",[],316,43,null],
[2,"OBJECT_SYSTEMD_OWNER_UID",[],316,43,null],
[2,"OBJECT_SYSTEMD_SESSION",[],316,43,null],
[2,"OBJECT_SYSTEMD_UNIT",[],316,43,null],
[2,"OBJECT_SYSTEMD_USER_UNIT",[],316,43,null],
[2,"OBJECT_UID",[],316,43,null],
[2,"PRIORITY",[],284,43,null],
[2,"SYSLOG_FACILITY",[],288,43,null],
[2,"SYSLOG_IDENTIFIER",[],288,43,null],
[2,"SYSLOG_PID",[],288,43,null],
[2,"SYSLOG_RAW",[],289,43,null],
[2,"SYSLOG_TIMESTAMP",[],288,43,null],
[2,"TID",[],291,43,null],
[2,"UNIT",[],292,43,null],
[2,"USER_INVOCATION_ID",[],287,43,null],
[2,"USER_UNIT",[],292,43,null],
[2,"_AUDIT_LOGINUID",[],296,43,null],
[2,"_AUDIT_SESSION",[],296,43,null],
[2,"_BOOT_ID",[],300,43,null],
[2,"_CAP_EFFECTIVE",[],295,43,null],
[2,"_CMDLINE",[],294,43,null],
[2,"_COMM",[],294,43,null],
[2,"_EXE",[],294,43,null],
[2,"_GID",[],293,43,null],
[2,"_HOSTNAME",[],303,43,null],
[2,"_KERNEL_DEVICE",[],309,43,null],
[2,"_KERNEL_SUBSYSTEM",[],310,43,null],
[2,"_LINE_BREAK",[],306,43,null],
[2,"_MACHINE_ID",[],301,43,null],
[2,"_NAMESPACE",[],307,43,null],
[2,"_PID",[],293,43,null],
[2,"_RUNTIME_SCOPE",[],308,43,null],
[2,"_SELINUX_CONTEXT",[],298,43,null],
[2,"_SOURCE_REALTIME_TIMESTAMP",[],299,43,null],
[2,"_STREAM_ID",[],305,43,null],
[2,"_SYSTEMD_CGROUP",[],297,43,null],
[2,"_SYSTEMD_INVOCATION_ID",[],302,43,null],
[2,"_SYSTEMD_OWNER_UID",[],297,43,null],
[2,"_SYSTEMD_SESSION",[],297,43,null],
[2,"_SYSTEMD_SLICE",[],297,43,null],
[2,"_SYSTEMD_UNIT",[],297,43,null],
[2,"_SYSTEMD_USER_SLICE",[],297,43,null],
[2,"_SYSTEMD_USER_UNIT",[],297,43,null],
[2,"_TRANSPORT",[],304,43,null],
[2,"_UDEV_DEVLINK",[],313,43,null],
[2,"_UDEV_DEVNODE",[],312,43,null],
[2,"_UDEV_SYSNAME",[],311,43,null],
[2,"_UID",[],293,43,null],
[2,"__CURSOR",[],317,43,null],
[2,"__MONOTONIC_TIMESTAMP",[],319,43,null],
[2,"__REALTIME_TIMESTAMP",[],318,43,null],
[2,"__SEQNUM",[],320,43,null],
[2,"__SEQNUM_ID",[],320,43,null],
[3,44,"systemd.kill(5)","systemd.kill â€” Process killing procedure configuration","systemd.kill.html"],
[6,4,"group[kill]"],
[4,321,"Specifies how processes of this unit shall be killed. One of `control-group`, `mixed`, `process`, `none`.\n\nIf set to `control-group`, all remaining processes in the control group of this unit will be killed on unit stop (for services: after the stop command is executed, as configured with `ExecStop=`). If set to `mixed`, the `SIGTERM` signal (see below) is sent to the main process while the subsequent `SIGKILL` signal (see below) is sent to all remaining processes of the unit's control group. If set to `process`, only the main process itself is killed (not recommended!). If set to `none`, no process is killed (strongly recommended against!). In this case, only the stop command will be executed on unit stop, but no process will be killed otherwise. Processes remaining alive after stop are left in their control group and the control group continues to exist after stop unless empty.\n\nNote that it is not recommended to set `KillMode=` to `process` or even `none`, as this allows processes to escape the service manager's lifecycle and resource management, and to remain running even while their service is considered stopped and is assumed to not consume any resources.\n\nProcesses will first be terminated via `SIGTERM` (unless the signal to send is changed via `KillSignal=` or `RestartKillSignal=`). Optionally, this is immediately followed by a `SIGHUP` (if enabled with `SendSIGHUP=`). If processes still remain after:\n\n*   the main process of a unit has exited (applies to `KillMode=`: `mixed`)\n    \n*   the delay configured via the `TimeoutStopSec=` has passed (applies to `KillMode=`: `control-group`, `mixed`, `process`)\n    \n\nthe termination request is repeated with the `SIGKILL` signal or the signal specified via `FinalKillSignal=` (unless this is disabled via the `SendSIGKILL=` option). See [kill(2)](https://man7.org/linux/man-pages/man2/kill.2.html) for more information.\n\nDefaults to `control-group`.","#KillMode=",187],
[4,322,"Specifies which signal to use when stopping a service. This controls the signal that is sent as first step of shutting down a unit (see above), and is usually followed by `SIGKILL` (see above and below). For a list of valid signals, see [signal(7)](https://man7.org/linux/man-pages/man7/signal.7.html). Defaults to `SIGTERM`.\n\nNote that, right after sending the signal specified in this setting, systemd will always send `SIGCONT`, to ensure that even suspended tasks can be terminated cleanly.","#KillSignal=",187],
[4,323,"Specifies which signal to use when restarting a service. The same as `KillSignal=` described above, with the exception that this setting is used in a restart job. Not set by default, and the value of `KillSignal=` is used.","#RestartKillSignal=",244],
[4,324,"Specifies whether to send `SIGHUP` to remaining processes immediately after sending the signal configured with `KillSignal=`. This is useful to indicate to shells and shell-like programs that their connection has been severed. Takes a boolean value. Defaults to \"`no`\".","#SendSIGHUP=",207],
[4,325,"Specifies whether to send `SIGKILL` (or the signal specified by `FinalKillSignal=`) to remaining processes after a timeout, if the normal shutdown procedure left processes of the service around. When disabled, a `KillMode=` of `control-group` or `mixed` service will not restart if processes from prior services exist within the control group. Takes a boolean value. Defaults to \"`yes`\".","#SendSIGKILL=",187],
[4,326,"Specifies which signal to send to remaining processes after a timeout if `SendSIGKILL=` is enabled. The signal configured here should be one that is not typically caught and processed by services (`SIGTERM` is not suitable). Developers can find it useful to use this to generate a coredump to troubleshoot why a service did not terminate upon receiving the initial `SIGTERM` signal. This can be achieved by configuring `LimitCORE=` and setting `FinalKillSignal=` to either `SIGQUIT` or `SIGABRT`. Defaults to `SIGKILL`.","#FinalKillSignal=",240],
[4,327,"Specifies which signal to use to terminate the service when the watchdog timeout expires (enabled through `WatchdogSec=`). Defaults to `SIGABRT`.","#WatchdogSignal=",240],
[2,"FinalKillSignal",[],326,44,4],
[2,"KillMode",[],321,44,4],
[2,"KillSignal",[],322,44,4],
[2,"RestartKillSignal",[],323,44,4],
[2,"SendSIGHUP","b",324,44,4],
[2,"SendSIGKILL","b",325,44,4],
[2,"WatchdogSignal",[],327,44,4],
[3,47,"systemd.net-naming-scheme(7)","systemd.net-naming-scheme â€” Network device naming schemes","systemd.net-naming-scheme.html"],
[4,328,"This name is set based on the numeric ordering information given by the firmware for on-board devices. Different schemes are used depending on the firmware type, as described in the table below.\n\n**TableÂ 2.Â On-board naming schemes**\n\n| Format | Description |\n| --- | --- |\n| _`prefix`_`o`_`number`_ | PCI on-board index |\n| _`prefix`_`d`_`number`_ | Devicetree alias index |","#ID_NET_NAME_ONBOARD=prefixonumber",243],
[4,329,"This property is set based on textual label given by the firmware for on-board devices. The name consists of the prefix concatenated with the label. This is only available for PCI devices.","#ID_NET_LABEL_ONBOARD=prefix%20label",243],
[4,330,"This name consists of the prefix, letter `x`, and 12 hexadecimal digits of the MAC address. It is available if the device has a fixed MAC address. Because this name is based on an attribute of the card itself, it remains \"stable\" when the device is moved (even between machines), but will change when the hardware is replaced.","#ID_NET_NAME_MAC=prefixxAABBCCDDEEFF",243],
[4,331,"This property describes the slot position. Different schemes are used depending on the bus type, as described in the table below. In case of USB, BCMA, and SR-VIO devices, the full name consists of the prefix, PCI slot identifier, and USB or BCMA or SR-VIO slot identifier. The first two parts are denoted as \"â€¦\" in the table below.\n\n**TableÂ 3.Â Slot naming schemes**\n\n| Format | Description |\n| --- | --- |\n| _`prefix`_Â \\[`P`_`domain`_\\]Â `s`_`slot`_Â \\[`f`_`function`_\\]Â \\[`n`_`port_name`_Â |Â `d`_`dev_port`_\\] | PCI slot number |\n| _`prefix`_Â `v`_`slot`_ | VIO slot number (IBM PowerVM) |\n| _`prefix`_Â `X`_`number`_ | VIF interface number (Xen) |\n| â€¦Â `b`_`number`_ | Broadcom bus (BCMA) core number |\n| â€¦Â `u`_`port`_â€¦Â \\[`c`_`config`_\\]Â \\[`i`_`interface`_\\] | USB port number chain |\n| â€¦Â `v`_`slot`_ | SR-VIO slot number |\n| â€¦Â `r`_`slot`_ | SR-IOV slot number |\n\n  \n\nThe PCI domain is only prepended when it is not 0. All multi-function PCI devices will carry the <code>f<em><code>function</code></em></code> number in the device name, including the function 0 device. For non-multi-function devices, the number is suppressed if 0. The port name _`port_name`_ is used, or the port number `d`_`dev_port`_ if the name is not known.\n\nFor BCMA devices, the core number is suppressed when 0.\n\nFor USB devices the full chain of port numbers of hubs is composed. If the name gets longer than the maximum number of 15 characters, the name is not exported. The usual USB configuration number 1 and interface number 0 values are suppressed.\n\nSR-IOV virtual devices are named based on the name of the parent interface, with a suffix of `v` and the virtual device number, with any leading zeros removed. The bus number is ignored.\n\nSR-IOV virtual device representors are named based on the name of the physical device interface, with a suffix of `r` and the number of the virtual device that is linked to the particular representor, with any leading zeros removed. The physical port name and the bus number are ignored.\n\nIn some configurations a parent PCI bridge of a given network controller may be associated with a slot. In such case we don't generate this device property to avoid possible naming conflicts.","#ID_NET_NAME_SLOT=prefix%5BPdomain%5Dsslot%5Bffunction%5D%5Bnport_name%7Cddev_port%5D",243],
[4,332,"This property describes the device installation location. Different schemes are used depending on the bus type, as described in the table below. For BCMA and USB devices, PCI path information must known, and the full name consists of the prefix, PCI slot identifier, and USB or BCMA location. The first two parts are denoted as \"â€¦\" in the table below.\n\n**TableÂ 4.Â Path naming schemes**\n\n| Format | Description |\n| --- | --- |\n| _`prefix`_Â `c`_`bus_id`_ | CCW or grouped CCW device identifier |\n| _`prefix`_Â `a`_`vendor`_Â _`model`_Â `i`_`instance`_ | ACPI path names for ARM64 platform devices |\n| _`prefix`_Â `i`_`address`_Â `n`_`port_name`_ | Netdevsim (simulated networking device) device number and port name |\n| _`prefix`_Â \\[`P`_`domain`_\\]Â `p`_`bus`_Â `s`_`slot`_Â \\[`f`_`function`_\\]Â \\[`n`_`phys_port_name`_Â |Â `d`_`dev_port`_\\] | PCI geographical location |\n| â€¦Â `b`_`number`_ | Broadcom bus (BCMA) core number |\n| â€¦Â `u`_`port`_â€¦Â \\[`c`_`config`_\\]Â \\[`i`_`interface`_\\] | USB port number chain |\n\n  \n\nCCW and grouped CCW devices are found in IBM System Z mainframes. Any leading zeros and dots are suppressed.\n\nFor PCI, BCMA, and USB devices, the same rules as described above for slot naming are used.","#ID_NET_NAME_PATH=prefixcbus_id",243],
[2,"ID_NET_LABEL_ONBOARD",["prefix label"],329,47,null],
[2,"ID_NET_NAME_MAC",["prefixxAABBCCDDEEFF"],330,47,null],
[2,"ID_NET_NAME_ONBOARD",["prefixonumber","prefixdnumber"],328,47,null],
[2,"ID_NET_NAME_PATH",["prefixcbus_id","prefixavendormodeliinstance","prefixiaddressnport_name","prefixuportâ€¦","prefix[Pdomain]pbussslot[ffunction][nphys_port_name|ddev_port]","prefix[Pdomain]pbussslot[ffunction][nphys_port_name|ddev_port]bnumber","prefix[Pdomain]pbussslot[ffunction][nphys_port_name|ddev_port]uportâ€¦[cconfig][iinterface]"],332,47,null],
[2,"ID_NET_NAME_SLOT",["prefix[Pdomain]sslot[ffunction][nport_name|ddev_port]","prefixvslot","prefixxslot","prefix[Pdomain]sslot[ffunction][nport_name|ddev_port]bnumber","prefix[Pdomain]sslot[ffunction][nport_name|ddev_port]uportâ€¦[cconfig][iinterface]","prefix[Pdomain]sslot[ffunction][nport_name|ddev_port]vslot","prefix[Pdomain]sslot[ffunction][nport_name|ddev_port]rslot"],331,47,null],
[3,52,"systemd.resource-control(5)","systemd.resource-control â€” Resource control unit settings","systemd.resource-control.html"],
[6,5,"group[resource-control]"],
[4,333,"Turn on CPU usage accounting for this unit. Takes a boolean argument. Note that turning on CPU accounting for one unit will also implicitly turn it on for all units contained in the same slice and for all its parent slices and the units contained therein. The system default for this setting may be controlled with `DefaultCPUAccounting=` in [systemd-system.conf(5)](systemd-system.conf.html).\n\nUnder the unified cgroup hierarchy, CPU accounting is available for all units and this setting has no effect.","#CPUAccounting=",208],
[4,334,"These settings control the `cpu` controller in the unified hierarchy.\n\nThese options accept an integer value or a the special string \"idle\":\n\n*   If set to an integer value, assign the specified CPU time weight to the processes executed, if the unified control group hierarchy is used on the system. These options control the \"`cpu.weight`\" control group attribute. The allowed range is 1 to 10000. Defaults to unset, but the kernel default is 100. For details about this control group attribute, see [Control Groups v2](https://docs.kernel.org/admin-guide/cgroup-v2.html) and [CFS Scheduler](https://docs.kernel.org/scheduler/sched-design-CFS.html). The available CPU time is split up among all units within one slice relative to their CPU time weight. A higher weight means more CPU time, a lower weight means less.\n    \n*   If set to the special string \"idle\", mark the cgroup for \"idle scheduling\", which means that it will get CPU resources only when there are no processes not marked in this way to execute in this cgroup or its siblings. This setting corresponds to the \"`cpu.idle`\" cgroup attribute.\n    \n    Note that this value only has an effect on cgroup-v2, for cgroup-v1 it is equivalent to the minimum weight.\n    \n\nWhile `StartupCPUWeight=` applies to the startup and shutdown phases of the system, `CPUWeight=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupCPUWeight=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.\n\nIn addition to the resource allocation performed by the `cpu` controller, the kernel may automatically divide resources based on session-id grouping, see \"The autogroup feature\" in [sched(7)](https://man7.org/linux/man-pages/man7/sched.7.html). The effect of this feature is similar to the `cpu` controller with no explicit configuration, so users should be careful to not mistake one for the other.","#CPUWeight=weight",232],
[4,335,"This setting controls the `cpu` controller in the unified hierarchy.\n\nAssign the specified CPU time quota to the processes executed. Takes a percentage value, suffixed with \"%\". The percentage specifies how much CPU time the unit shall get at maximum, relative to the total CPU time available on one CPU. Use values > 100% for allotting CPU time on more than one CPU. This controls the \"`cpu.max`\" attribute on the unified control group hierarchy and \"`cpu.cfs_quota_us`\" on legacy. For details about these control group attributes, see [Control Groups v2](https://docs.kernel.org/admin-guide/cgroup-v2.html) and [CFS Bandwidth Control](https://docs.kernel.org/scheduler/sched-bwc.html). Setting `CPUQuota=` to an empty value unsets the quota.\n\nExample: `CPUQuota=20%` ensures that the executed processes will never get more than 20% CPU time on one CPU.","#CPUQuota=",213],
[4,336,"This setting controls the `cpu` controller in the unified hierarchy.\n\nAssign the duration over which the CPU time quota specified by `CPUQuota=` is measured. Takes a time duration value in seconds, with an optional suffix such as \"ms\" for milliseconds (or \"s\" for seconds.) The default setting is 100ms. The period is clamped to the range supported by the kernel, which is \\[1ms, 1000ms\\]. Additionally, the period is adjusted up so that the quota interval is also at least 1ms. Setting `CPUQuotaPeriodSec=` to an empty value resets it to the default.\n\nThis controls the second field of \"`cpu.max`\" attribute on the unified control group hierarchy and \"`cpu.cfs_period_us`\" on legacy. For details about these control group attributes, see [Control Groups v2](https://docs.kernel.org/admin-guide/cgroup-v2.html) and [CFS Scheduler](https://docs.kernel.org/scheduler/sched-design-CFS.html).\n\nExample: `CPUQuotaPeriodSec=10ms` to request that the CPU quota is measured in periods of 10ms.","#CPUQuotaPeriodSec=",242],
[4,337,"This setting controls the `cpuset` controller in the unified hierarchy.\n\nRestrict processes to be executed on specific CPUs. Takes a list of CPU indices or ranges separated by either whitespace or commas. CPU ranges are specified by the lower and upper CPU indices separated by a dash.\n\nSetting `AllowedCPUs=` or `StartupAllowedCPUs=` doesn't guarantee that all of the CPUs will be used by the processes as it may be limited by parent units. The effective configuration is reported as `EffectiveCPUs=`.\n\nWhile `StartupAllowedCPUs=` applies to the startup and shutdown phases of the system, `AllowedCPUs=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupAllowedCPUs=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.\n\nThis setting is supported only with the unified control group hierarchy.","#AllowedCPUs=",244],
[4,338,"This setting controls the `memory` controller in the unified hierarchy.\n\nTurn on process and kernel memory accounting for this unit. Takes a boolean argument. Note that turning on memory accounting for one unit will also implicitly turn it on for all units contained in the same slice and for all its parent slices and the units contained therein. The system default for this setting may be controlled with `DefaultMemoryAccounting=` in [systemd-system.conf(5)](systemd-system.conf.html).","#MemoryAccounting=",208],
[4,339,"These settings control the `memory` controller in the unified hierarchy.\n\nSpecify the memory usage protection of the executed processes in this unit. When reclaiming memory, the unit is treated as if it was using less memory resulting in memory to be preferentially reclaimed from unprotected units. Using `MemoryLow=` results in a weaker protection where memory may still be reclaimed to avoid invoking the OOM killer in case there is no other reclaimable memory.\n\nFor a protection to be effective, it is generally required to set a corresponding allocation on all ancestors, which is then distributed between children (with the exception of the root slice). Any `MemoryMin=` or `MemoryLow=` allocation that is not explicitly distributed to specific children is used to create a shared protection for all children. As this is a shared protection, the children will freely compete for the memory.\n\nTakes a memory size in bytes. If the value is suffixed with K, M, G or T, the specified memory size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively. Alternatively, a percentage value may be specified, which is taken relative to the installed physical memory on the system. If assigned the special value \"`infinity`\", all available memory is protected, which may be useful in order to always inherit all of the protection afforded by ancestors. This controls the \"`memory.min`\" or \"`memory.low`\" control group attribute. For details about this control group attribute, see [Memory Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#memory-interface-files).\n\nUnits may have their children use a default \"`memory.min`\" or \"`memory.low`\" value by specifying `DefaultMemoryMin=` or `DefaultMemoryLow=`, which has the same semantics as `MemoryMin=` and `MemoryLow=`, or `DefaultStartupMemoryLow=` which has the same semantics as `StartupMemoryLow=`. This setting does not affect \"`memory.min`\" or \"`memory.low`\" in the unit itself. Using it to set a default child allocation is only useful on kernels older than 5.7, which do not support the \"`memory_recursiveprot`\" cgroup2 mount option.\n\nWhile `StartupMemoryLow=` applies to the startup and shutdown phases of the system, `MemoryMin=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupMemoryLow=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.","#MemoryMin=bytes,%20MemoryLow=bytes",240],
[4,340,"These settings control the `memory` controller in the unified hierarchy.\n\nSpecify the throttling limit on memory usage of the executed processes in this unit. Memory usage may go above the limit if unavoidable, but the processes are heavily slowed down and memory is taken away aggressively in such cases. This is the main mechanism to control memory usage of a unit.\n\nTakes a memory size in bytes. If the value is suffixed with K, M, G or T, the specified memory size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively. Alternatively, a percentage value may be specified, which is taken relative to the installed physical memory on the system. If assigned the special value \"`infinity`\", no memory throttling is applied. This controls the \"`memory.high`\" control group attribute. For details about this control group attribute, see [Memory Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#memory-interface-files).\n\nWhile `StartupMemoryHigh=` applies to the startup and shutdown phases of the system, `MemoryHigh=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupMemoryHigh=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.","#MemoryHigh=bytes",231],
[4,341,"These settings control the `memory` controller in the unified hierarchy.\n\nSpecify the absolute limit on memory usage of the executed processes in this unit. If memory usage cannot be contained under the limit, out-of-memory killer is invoked inside the unit. It is recommended to use `MemoryHigh=` as the main control mechanism and use `MemoryMax=` as the last line of defense.\n\nTakes a memory size in bytes. If the value is suffixed with K, M, G or T, the specified memory size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively. Alternatively, a percentage value may be specified, which is taken relative to the installed physical memory on the system. If assigned the special value \"`infinity`\", no memory limit is applied. This controls the \"`memory.max`\" control group attribute. For details about this control group attribute, see [Memory Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#memory-interface-files).\n\nWhile `StartupMemoryMax=` applies to the startup and shutdown phases of the system, `MemoryMax=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupMemoryMax=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.","#MemoryMax=bytes",231],
[4,342,"These settings control the `memory` controller in the unified hierarchy.\n\nSpecify the absolute limit on swap usage of the executed processes in this unit.\n\nTakes a swap size in bytes. If the value is suffixed with K, M, G or T, the specified swap size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively. If assigned the special value \"`infinity`\", no swap limit is applied. These settings control the \"`memory.swap.max`\" control group attribute. For details about this control group attribute, see [Memory Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#memory-interface-files).\n\nWhile `StartupMemorySwapMax=` applies to the startup and shutdown phases of the system, `MemorySwapMax=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupMemorySwapMax=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.","#MemorySwapMax=bytes",232],
[4,343,"These settings control the `memory` controller in the unified hierarchy.\n\nSpecify the absolute limit on zswap usage of the processes in this unit. Zswap is a lightweight compressed cache for swap pages. It takes pages that are in the process of being swapped out and attempts to compress them into a dynamically allocated RAM-based memory pool. If the limit specified is hit, no entries from this unit will be stored in the pool until existing entries are faulted back or written out to disk. See the kernel's [Zswap](https://www.kernel.org/doc/html/latest/admin-guide/mm/zswap.html) documentation for more details.\n\nTakes a size in bytes. If the value is suffixed with K, M, G or T, the specified size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively. If assigned the special value \"`infinity`\", no limit is applied. These settings control the \"`memory.zswap.max`\" control group attribute. For details about this control group attribute, see [Memory Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#memory-interface-files).\n\nWhile `StartupMemoryZSwapMax=` applies to the startup and shutdown phases of the system, `MemoryZSwapMax=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupMemoryZSwapMax=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.","#MemoryZSwapMax=bytes",253],
[4,344,"These settings control the `cpuset` controller in the unified hierarchy.\n\nRestrict processes to be executed on specific memory NUMA nodes. Takes a list of memory NUMA nodes indices or ranges separated by either whitespace or commas. Memory NUMA nodes ranges are specified by the lower and upper NUMA nodes indices separated by a dash.\n\nSetting `AllowedMemoryNodes=` or `StartupAllowedMemoryNodes=` doesn't guarantee that all of the memory NUMA nodes will be used by the processes as it may be limited by parent units. The effective configuration is reported as `EffectiveMemoryNodes=`.\n\nWhile `StartupAllowedMemoryNodes=` applies to the startup and shutdown phases of the system, `AllowedMemoryNodes=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupAllowedMemoryNodes=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.\n\nThis setting is supported only with the unified control group hierarchy.","#AllowedMemoryNodes=",244],
[4,345,"This setting controls the `pids` controller in the unified hierarchy.\n\nTurn on task accounting for this unit. Takes a boolean argument. If enabled, the kernel will keep track of the total number of tasks in the unit and its children. This number includes both kernel threads and userspace processes, with each thread counted individually. Note that turning on tasks accounting for one unit will also implicitly turn it on for all units contained in the same slice and for all its parent slices and the units contained therein. The system default for this setting may be controlled with `DefaultTasksAccounting=` in [systemd-system.conf(5)](systemd-system.conf.html).","#TasksAccounting=",227],
[4,346,"This setting controls the `pids` controller in the unified hierarchy.\n\nSpecify the maximum number of tasks that may be created in the unit. This ensures that the number of tasks accounted for the unit (see above) stays below a specific limit. This either takes an absolute number of tasks or a percentage value that is taken relative to the configured maximum number of tasks on the system. If assigned the special value \"`infinity`\", no tasks limit is applied. This controls the \"`pids.max`\" control group attribute. For details about this control group attribute, the [pids controller](https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v2.html#pid) .\n\nThe system default for this setting may be controlled with `DefaultTasksMax=` in [systemd-system.conf(5)](systemd-system.conf.html).","#TasksMax=N",227],
[4,347,"This setting controls the `io` controller in the unified hierarchy.\n\nTurn on Block I/O accounting for this unit, if the unified control group hierarchy is used on the system. Takes a boolean argument. Note that turning on block I/O accounting for one unit will also implicitly turn it on for all units contained in the same slice and all for its parent slices and the units contained therein. The system default for this setting may be controlled with `DefaultIOAccounting=` in [systemd-system.conf(5)](systemd-system.conf.html).","#IOAccounting=",230],
[4,348,"These settings control the `io` controller in the unified hierarchy.\n\nSet the default overall block I/O weight for the executed processes, if the unified control group hierarchy is used on the system. Takes a single weight value (between 1 and 10000) to set the default block I/O weight. This controls the \"`io.weight`\" control group attribute, which defaults to 100. For details about this control group attribute, see [IO Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#io-interface-files). The available I/O bandwidth is split up among all units within one slice relative to their block I/O weight. A higher weight means more I/O bandwidth, a lower weight means less.\n\nWhile `StartupIOWeight=` applies to the startup and shutdown phases of the system, `IOWeight=` applies to the later runtime of the system, and if the former is not set also to the startup and shutdown phases. This allows prioritizing specific services at boot-up and shutdown differently than during runtime.","#IOWeight=weight",230],
[4,349,"This setting controls the `io` controller in the unified hierarchy.\n\nSet the per-device overall block I/O weight for the executed processes, if the unified control group hierarchy is used on the system. Takes a space-separated pair of a file path and a weight value to specify the device specific weight value, between 1 and 10000. (Example: \"`/dev/sda 1000`\"). The file path may be specified as path to a block device node or as any other file, in which case the backing block device of the file system of the file is determined. This controls the \"`io.weight`\" control group attribute, which defaults to 100. Use this option multiple times to set weights for multiple devices. For details about this control group attribute, see [IO Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#io-interface-files).\n\nThe specified device node should reference a block device that has an I/O scheduler associated, i.e. should not refer to partition or loopback block devices, but to the originating, physical device. When a path to a regular file or directory is specified it is attempted to discover the correct originating device backing the file system of the specified path. This works correctly only for simpler cases, where the file system is directly placed on a partition or physical block device, or where simple 1:1 encryption using dm-crypt/LUKS is used. This discovery does not cover complex storage and in particular RAID and volume management storage devices.","#IODeviceWeight=device%20weight",230],
[4,350,"These settings control the `io` controller in the unified hierarchy.\n\nSet the per-device overall block I/O bandwidth maximum limit for the executed processes, if the unified control group hierarchy is used on the system. This limit is not work-conserving and the executed processes are not allowed to use more even if the device has idle capacity. Takes a space-separated pair of a file path and a bandwidth value (in bytes per second) to specify the device specific bandwidth. The file path may be a path to a block device node, or as any other file in which case the backing block device of the file system of the file is used. If the bandwidth is suffixed with K, M, G, or T, the specified bandwidth is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes, respectively, to the base of 1000. (Example: \"/dev/disk/by-path/pci-0000:00:1f.2-scsi-0:0:0:0 5M\"). This controls the \"`io.max`\" control group attributes. Use this option multiple times to set bandwidth limits for multiple devices. For details about this control group attribute, see [IO Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#io-interface-files).\n\nSimilar restrictions on block device discovery as for `IODeviceWeight=` apply, see above.","#IOReadBandwidthMax=device%20bytes",230],
[4,351,"These settings control the `io` controller in the unified hierarchy.\n\nSet the per-device overall block I/O IOs-Per-Second maximum limit for the executed processes, if the unified control group hierarchy is used on the system. This limit is not work-conserving and the executed processes are not allowed to use more even if the device has idle capacity. Takes a space-separated pair of a file path and an IOPS value to specify the device specific IOPS. The file path may be a path to a block device node, or as any other file in which case the backing block device of the file system of the file is used. If the IOPS is suffixed with K, M, G, or T, the specified IOPS is parsed as KiloIOPS, MegaIOPS, GigaIOPS, or TeraIOPS, respectively, to the base of 1000. (Example: \"/dev/disk/by-path/pci-0000:00:1f.2-scsi-0:0:0:0 1K\"). This controls the \"`io.max`\" control group attributes. Use this option multiple times to set IOPS limits for multiple devices. For details about this control group attribute, see [IO Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#io-interface-files).\n\nSimilar restrictions on block device discovery as for `IODeviceWeight=` apply, see above.","#IOReadIOPSMax=device%20IOPS",230],
[4,352,"This setting controls the `io` controller in the unified hierarchy.\n\nSet the per-device average target I/O latency for the executed processes, if the unified control group hierarchy is used on the system. Takes a file path and a timespan separated by a space to specify the device specific latency target. (Example: \"/dev/sda 25ms\"). The file path may be specified as path to a block device node or as any other file, in which case the backing block device of the file system of the file is determined. This controls the \"`io.latency`\" control group attribute. Use this option multiple times to set latency target for multiple devices. For details about this control group attribute, see [IO Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#io-interface-files).\n\nImplies \"`IOAccounting=yes`\".\n\nThese settings are supported only if the unified control group hierarchy is used.\n\nSimilar restrictions on block device discovery as for `IODeviceWeight=` apply, see above.","#IODeviceLatencyTargetSec=device%20target",240],
[4,353,"Takes a boolean argument. If true, turns on IPv4 and IPv6 network traffic accounting for packets sent or received by the unit. When this option is turned on, all IPv4 and IPv6 sockets created by any process of the unit are accounted for.\n\nWhen this option is used in socket units, it applies to all IPv4 and IPv6 sockets associated with it (including both listening and connection sockets where this applies). Note that for socket-activated services, this configuration setting and the accounting data of the service unit and the socket unit are kept separate, and displayed separately. No propagation of the setting and the collected statistics is done, in either direction. Moreover, any traffic sent or received on any of the socket unit's sockets is accounted to the socket unit â€” and never to the service unit it might have activated, even if the socket is used by it.\n\nThe system default for this setting may be controlled with `DefaultIPAccounting=` in [systemd-system.conf(5)](systemd-system.conf.html).","#IPAccounting=",235],
[4,354,"Turn on network traffic filtering for IP packets sent and received over `AF_INET` and `AF_INET6` sockets. Both directives take a space separated list of IPv4 or IPv6 addresses, each optionally suffixed with an address prefix length in bits after a \"`/`\" character. If the suffix is omitted, the address is considered a host address, i.e. the filter covers the whole address (32 bits for IPv4, 128 bits for IPv6).\n\nThe access lists configured with this option are applied to all sockets created by processes of this unit (or in the case of socket units, associated with it). The lists are implicitly combined with any lists configured for any of the parent slice units this unit might be a member of. By default both access lists are empty. Both ingress and egress traffic is filtered by these settings. In case of ingress traffic the source IP address is checked against these access lists, in case of egress traffic the destination IP address is checked. The following rules are applied in turn:\n\n*   Access is granted when the checked IP address matches an entry in the `IPAddressAllow=` list.\n    \n*   Otherwise, access is denied when the checked IP address matches an entry in the `IPAddressDeny=` list.\n    \n*   Otherwise, access is granted.\n    \n\nIn order to implement an allow-listing IP firewall, it is recommended to use a `IPAddressDeny=``any` setting on an upper-level slice unit (such as the root slice `-.slice` or the slice containing all system services `system.slice` â€“ see [systemd.special(7)](systemd.special.html) for details on these slice units), plus individual per-service `IPAddressAllow=` lines permitting network access to relevant services, and only them.\n\nNote that for socket-activated services, the IP access list configured on the socket unit applies to all sockets associated with it directly, but not to any sockets created by the ultimately activated services for it. Conversely, the IP access list configured for the service is not applied to any sockets passed into the service via socket activation. Thus, it is usually a good idea to replicate the IP access lists on both the socket and the service unit. Nevertheless, it may make sense to maintain one list more open and the other one more restricted, depending on the use case.\n\nIf these settings are used multiple times in the same unit the specified lists are combined. If an empty string is assigned to these settings the specific access list is reset and all previous settings undone.\n\nIn place of explicit IPv4 or IPv6 address and prefix length specifications a small set of symbolic names may be used. The following names are defined:\n\n**TableÂ 1.Â Special address/network names**\n\n| Symbolic Name | Definition | Meaning |\n| --- | --- | --- |\n| `any` | 0.0.0.0/0 ::/0 | Any host |\n| `localhost` | 127.0.0.0/8 ::1/128 | All addresses on the local loopback |\n| `link-local` | 169.254.0.0/16 fe80::/64 | All link-local IP addresses |\n| `multicast` | 224.0.0.0/4 ff00::/8 | All IP multicasting addresses |\n\n  \n\nNote that these settings might not be supported on some systems (for example if eBPF control group support is not enabled in the underlying kernel or container manager). These settings will have no effect in that case. If compatibility with such systems is desired it is hence recommended to not exclusively rely on them for IP security.\n\nThis option cannot be bypassed by prefixing \"`+`\" to the executable path in the service unit, as it applies to the whole control group.","#IPAddressAllow=ADDRESS%5B/PREFIXLENGTH%5D%E2%80%A6",235],
[4,355,"Allow or deny binding a socket address to a socket by matching it with the _`bind-rule`_ and applying a corresponding action if there is a match.\n\n_`bind-rule`_ describes socket properties such as _`address-family`_, _`transport-protocol`_ and _`ip-ports`_.\n\n_`bind-rule`_ := { \\[_`address-family`_`:`\\]\\[_`transport-protocol`_`:`\\]\\[_`ip-ports`_\\] | `any` }\n\n_`address-family`_ := { `ipv4` | `ipv6` }\n\n_`transport-protocol`_ := { `tcp` | `udp` }\n\n_`ip-ports`_ := { _`ip-port`_ | _`ip-port-range`_ }\n\nAn optional _`address-family`_ expects `ipv4` or `ipv6` values. If not specified, a rule will be matched for both IPv4 and IPv6 addresses and applied depending on other socket fields, e.g. _`transport-protocol`_, _`ip-port`_.\n\nAn optional _`transport-protocol`_ expects `tcp` or `udp` transport protocol names. If not specified, a rule will be matched for any transport protocol.\n\nAn optional _`ip-port`_ value must lie within 1â€¦65535 interval inclusively, i.e. dynamic port `0` is not allowed. A range of sequential ports is described by _`ip-port-range`_ := _`ip-port-low`_`-`_`ip-port-high`_, where _`ip-port-low`_ is smaller than or equal to _`ip-port-high`_ and both are within 1â€¦65535 inclusively.\n\nA special value `any` can be used to apply a rule to any address family, transport protocol and any port with a positive value.\n\nTo allow multiple rules assign `SocketBindAllow=` or `SocketBindDeny=` multiple times. To clear the existing assignments pass an empty `SocketBindAllow=` or `SocketBindDeny=` assignment.\n\nFor each of `SocketBindAllow=` and `SocketBindDeny=`, maximum allowed number of assignments is `128`.\n\n*   Binding to a socket is allowed when a socket address matches an entry in the `SocketBindAllow=` list.\n    \n*   Otherwise, binding is denied when the socket address matches an entry in the `SocketBindDeny=` list.\n    \n*   Otherwise, binding is allowed.\n    \n\nThe feature is implemented with `cgroup/bind4` and `cgroup/bind6` cgroup-bpf hooks.\n\nExamples:\n\nâ€¦\n# Allow binding IPv6 socket addresses with a port greater than or equal to 10000.\n\\[Service\\]\nSocketBindAllow=ipv6:10000-65535\nSocketBindDeny=any\nâ€¦\n# Allow binding IPv4 and IPv6 socket addresses with 1234 and 4321 ports.\n\\[Service\\]\nSocketBindAllow=1234\nSocketBindAllow=4321\nSocketBindDeny=any\nâ€¦\n# Deny binding IPv6 socket addresses.\n\\[Service\\]\nSocketBindDeny=ipv6\nâ€¦\n# Deny binding IPv4 and IPv6 socket addresses.\n\\[Service\\]\nSocketBindDeny=any\nâ€¦\n# Allow binding only over TCP\n\\[Service\\]\nSocketBindAllow=tcp\nSocketBindDeny=any\nâ€¦\n# Allow binding only over IPv6/TCP\n\\[Service\\]\nSocketBindAllow=ipv6:tcp\nSocketBindDeny=any\nâ€¦\n# Allow binding ports within 10000-65535 range over IPv4/UDP.\n\\[Service\\]\nSocketBindAllow=ipv4:udp:10000-65535\nSocketBindDeny=any\nâ€¦\n\nThis option cannot be bypassed by prefixing \"`+`\" to the executable path in the service unit, as it applies to the whole control group.","#SocketBindAllow=bind-rule",249],
[4,356,"Takes a list of space-separated network interface names. This option restricts the network interfaces that processes of this unit can use. By default processes can only use the network interfaces listed (allow-list). If the first character of the rule is \"`~`\", the effect is inverted: the processes can only use network interfaces not listed (deny-list).\n\nThis option can appear multiple times, in which case the network interface names are merged. If the empty string is assigned the set is reset, all prior assignments will have not effect.\n\nIf you specify both types of this option (i.e. allow-listing and deny-listing), the first encountered will take precedence and will dictate the default action (allow vs deny). Then the next occurrences of this option will add or delete the listed network interface names from the set, depending of its type and the default action.\n\nThe loopback interface (\"lo\") is not treated in any special way, you have to configure it explicitly in the unit file.\n\nExample 1: allow-list\n\nRestrictNetworkInterfaces=eth1\nRestrictNetworkInterfaces=eth2\n\nPrograms in the unit will be only able to use the eth1 and eth2 network interfaces.\n\nExample 2: deny-list\n\nRestrictNetworkInterfaces=~eth1 eth2\n\nPrograms in the unit will be able to use any network interface but eth1 and eth2.\n\nExample 3: mixed\n\nRestrictNetworkInterfaces=eth1 eth2\nRestrictNetworkInterfaces=~eth1\n\nPrograms in the unit will be only able to use the eth2 network interface.\n\nThis option cannot be bypassed by prefixing \"`+`\" to the executable path in the service unit, as it applies to the whole control group.","#RestrictNetworkInterfaces=",250],
[4,357,"This setting provides a method for integrating dynamic cgroup, user and group IDs into firewall rules with [NFT](https://netfilter.org/projects/nftables/index.html) sets. The benefit of using this setting is to be able to use the IDs as selectors in firewall rules easily and this in turn allows more fine grained filtering. NFT rules for cgroup matching use numeric cgroup IDs, which change every time a service is restarted, making them hard to use in systemd environment otherwise. Dynamic and random IDs used by `DynamicUser=` can be also integrated with this setting.\n\nThis option expects a whitespace separated list of NFT set definitions. Each definition consists of a colon-separated tuple of source type (one of \"`cgroup`\", \"`user`\" or \"`group`\"), NFT address family (one of \"`arp`\", \"`bridge`\", \"`inet`\", \"`ip`\", \"`ip6`\", or \"`netdev`\"), table name and set name. The names of tables and sets must conform to lexical restrictions of NFT table names. The type of the element used in the NFT filter must match the type implied by the directive (\"`cgroup`\", \"`user`\" or \"`group`\") as shown in the table below. When a control group or a unit is realized, the corresponding ID will be appended to the NFT sets and it will be be removed when the control group or unit is removed. **systemd** only inserts elements to (or removes from) the sets, so the related NFT rules, tables and sets must be prepared elsewhere in advance. Failures to manage the sets will be ignored.\n\n**TableÂ 2.Â Defined `source type` values**\n\n| Source type | Description | Corresponding NFT type name |\n| --- | --- | --- |\n| \"`cgroup`\" | control group ID | \"`cgroupsv2`\" |\n| \"`user`\" | user ID | \"`meta skuid`\" |\n| \"`group`\" | group ID | \"`meta skgid`\" |\n\n  \n\nIf the firewall rules are reinstalled so that the contents of NFT sets are destroyed, command **systemctl daemon-reload** can be used to refill the sets.\n\nExample:\n\n\\[Unit\\]\nNFTSet=cgroup:inet:filter:my\\_service user:inet:filter:serviceuser\n\nCorresponding NFT rules:\n\ntable inet filter {\n        set my\\_service {\n                type cgroupsv2\n        }\n        set serviceuser {\n                typeof meta skuid\n        }\n        chain x {\n                socket cgroupv2 level 2 @my\\_service accept\n                drop\n        }\n        chain y {\n                meta skuid @serviceuser accept\n                drop\n        }\n}","#NFTSet=family:table:set",255],
[4,358,"Add custom network traffic filters implemented as BPF programs, applying to all IP packets sent and received over `AF_INET` and `AF_INET6` sockets. Takes an absolute path to a pinned BPF program in the BPF virtual filesystem (`/sys/fs/bpf/`).\n\nThe filters configured with this option are applied to all sockets created by processes of this unit (or in the case of socket units, associated with it). The filters are loaded in addition to filters any of the parent slice units this unit might be a member of as well as any `IPAddressAllow=` and `IPAddressDeny=` filters in any of these units. By default there are no filters specified.\n\nIf these settings are used multiple times in the same unit all the specified programs are attached. If an empty string is assigned to these settings the program list is reset and all previous specified programs ignored.\n\nIf the path _`BPF_FS_PROGRAM_PATH`_ in `IPIngressFilterPath=` assignment is already being handled by `BPFProgram=` ingress hook, e.g. `BPFProgram=``ingress`:_`BPF_FS_PROGRAM_PATH`_, the assignment will be still considered valid and the program will be attached to a cgroup. Same for `IPEgressFilterPath=` path and `egress` hook.\n\nNote that for socket-activated services, the IP filter programs configured on the socket unit apply to all sockets associated with it directly, but not to any sockets created by the ultimately activated services for it. Conversely, the IP filter programs configured for the service are not applied to any sockets passed into the service via socket activation. Thus, it is usually a good idea, to replicate the IP filter programs on both the socket and the service unit, however it often makes sense to maintain one configuration more open and the other one more restricted, depending on the use case.\n\nNote that these settings might not be supported on some systems (for example if eBPF control group support is not enabled in the underlying kernel or container manager). These settings will fail the service in that case. If compatibility with such systems is desired it is hence recommended to attach your filter manually (requires `Delegate=``yes`) instead of using this setting.","#IPIngressFilterPath=BPF_FS_PROGRAM_PATH",243],
[4,359,"`BPFProgram=` allows attaching custom BPF programs to the cgroup of a unit. (This generalizes the functionality exposed via `IPEgressFilterPath=` and `IPIngressFilterPath=` for other hooks.) Cgroup-bpf hooks in the form of BPF programs loaded to the BPF filesystem are attached with cgroup-bpf attach flags determined by the unit. For details about attachment types and flags see [`bpf.h`](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/include/uapi/linux/bpf.h). Also refer to the general [BPF documentation](https://docs.kernel.org/bpf/).\n\nThe specification of BPF program consists of a pair of BPF program type and program path in the file system, with \"`:`\" as the separator: _`type`_:_`program-path`_.\n\nThe BPF program type is equivalent to the BPF attach type used in [bpftool(8)](https://www.mankier.com/8/bpftool) It may be one of `egress`, `ingress`, `sock_create`, `sock_ops`, `device`, `bind4`, `bind6`, `connect4`, `connect6`, `post_bind4`, `post_bind6`, `sendmsg4`, `sendmsg6`, `sysctl`, `recvmsg4`, `recvmsg6`, `getsockopt`, or `setsockopt`.\n\nThe specified program path must be an absolute path referencing a BPF program inode in the bpffs file system (which generally means it must begin with `/sys/fs/bpf/`). If a specified program does not exist (i.e. has not been uploaded to the BPF subsystem of the kernel yet), it will not be installed but unit activation will continue (a warning will be printed to the logs).\n\nSetting `BPFProgram=` to an empty value makes previous assignments ineffective.\n\nMultiple assignments of the same program type/path pair have the same effect as a single assignment: the program will be attached just once.\n\nIf BPF `egress` pinned to _`program-path`_ path is already being handled by `IPEgressFilterPath=`, `BPFProgram=` assignment will be considered valid and `BPFProgram=` will be attached to a cgroup. Similarly for `ingress` hook and `IPIngressFilterPath=` assignment.\n\nBPF programs passed with `BPFProgram=` are attached to the cgroup of a unit with BPF attach flag `multi`, that allows further attachments of the same _`type`_ within cgroup hierarchy topped by the unit cgroup.\n\nExamples:\n\nBPFProgram=egress:/sys/fs/bpf/egress-hook\nBPFProgram=bind6:/sys/fs/bpf/sock-addr-hook","#BPFProgram=type:program-path",249],
[4,360,"Control access to specific device nodes by the executed processes. Takes two space-separated strings: a device node specifier followed by a combination of `r`, `w`, `m` to control _r_eading, _w_riting, or creation of the specific device nodes by the unit (_m_knod), respectively. This functionality is implemented using eBPF filtering.\n\nWhen access to _all_ physical devices should be disallowed, `PrivateDevices=` may be used instead. See [systemd.exec(5)](systemd.exec.html).\n\nThe device node specifier is either a path to a device node in the file system, starting with `/dev/`, or a string starting with either \"`char-`\" or \"`block-`\" followed by a device group name, as listed in `/proc/devices`. The latter is useful to allow-list all current and future devices belonging to a specific device group at once. The device group is matched according to filename globbing rules, you may hence use the \"`*`\" and \"`?`\" wildcards. (Note that such globbing wildcards are not available for device node path specifications!) In order to match device nodes by numeric major/minor, use device node paths in the `/dev/char/` and `/dev/block/` directories. However, matching devices by major/minor is generally not recommended as assignments are neither stable nor portable between systems or different kernel versions.\n\nExamples: `/dev/sda5` is a path to a device node, referring to an ATA or SCSI block device. \"`char-pts`\" and \"`char-alsa`\" are specifiers for all pseudo TTYs and all ALSA sound devices, respectively. \"`char-cpu/*`\" is a specifier matching all CPU related device groups.\n\nNote that allow lists defined this way should only reference device groups which are resolvable at the time the unit is started. Any device groups not resolvable then are not added to the device allow list. In order to work around this limitation, consider extending service units with a pair of **After=modprobe\\@xyz.service** and **Wants=modprobe\\@xyz.service** lines that load the necessary kernel module implementing the device group if missing. Example:\n\nâ€¦\n\\[Unit\\]\nWants=modprobe\\@loop.service\nAfter=modprobe\\@loop.service\n\n\\[Service\\]\nDeviceAllow=block-loop\nDeviceAllow=/dev/loop-control\nâ€¦\n\nThis option cannot be bypassed by prefixing \"`+`\" to the executable path in the service unit, as it applies to the whole control group.","#DeviceAllow=",208],
[4,361,"Control the policy for allowing device access:\n\n`strict`[Â¶](#strict \"Permalink to this term\")\n\nmeans to only allow types of access that are explicitly specified.\n\nAdded in version 208.\n\n`closed`[Â¶](#closed \"Permalink to this term\")\n\nin addition, allows access to standard pseudo devices including `/dev/null`, `/dev/zero`, `/dev/full`, `/dev/random`, and `/dev/urandom`.\n\nAdded in version 208.\n\n`auto`[Â¶](#auto \"Permalink to this term\")\n\nin addition, allows access to all devices if no explicit `DeviceAllow=` is present. This is the default.\n\nAdded in version 208.\n\nThis option cannot be bypassed by prefixing \"`+`\" to the executable path in the service unit, as it applies to the whole control group.","#DevicePolicy=auto%7Cclosed%7Cstrict",208],
[4,362,"The name of the slice unit to place the unit in. Defaults to `system.slice` for all non-instantiated units of all unit types (except for slice units themselves see below). Instance units are by default placed in a subslice of `system.slice` that is named after the template name.\n\nThis option may be used to arrange systemd units in a hierarchy of slices each of which might have resource settings applied.\n\nFor units of type slice, the only accepted value for this setting is the parent slice. Since the name of a slice unit implies the parent slice, it is hence redundant to ever set this parameter directly for slice units.\n\nSpecial care should be taken when relying on the default slice assignment in templated service units that have `DefaultDependencies=no` set, see [systemd.service(5)](systemd.service.html), section \"Default Dependencies\" for details.","#Slice=",208],
[4,363,"Turns on delegation of further resource control partitioning to processes of the unit. Units where this is enabled may create and manage their own private subhierarchy of control groups below the control group of the unit itself. For unprivileged services (i.e. those using the `User=` setting) the unit's control group will be made accessible to the relevant user.\n\nWhen enabled the service manager will refrain from manipulating control groups or moving processes below the unit's control group, so that a clear concept of ownership is established: the control group tree at the level of the unit's control group and above (i.e. towards the root control group) is owned and managed by the service manager of the host, while the control group tree below the unit's control group is owned and managed by the unit itself.\n\nTakes either a boolean argument or a (possibly empty) list of control group controller names. If true, delegation is turned on, and all supported controllers are enabled for the unit, making them available to the unit's processes for management. If false, delegation is turned off entirely (and no additional controllers are enabled). If set to a list of controllers, delegation is turned on, and the specified controllers are enabled for the unit. Assigning the empty string will enable delegation, but reset the list of controllers, and all assignments prior to this will have no effect. Note that additional controllers other than the ones specified might be made available as well, depending on configuration of the containing slice unit or other units contained in it. Defaults to false.\n\nNote that controller delegation to less privileged code is only safe on the unified control group hierarchy. Accordingly, access to the specified controllers will not be granted to unprivileged services on the legacy hierarchy, even when requested.\n\nThe following controller names may be specified: `cpu`, `cpuacct`, `cpuset`, `io`, `blkio`, `memory`, `devices`, `pids`, `bpf-firewall`, and `bpf-devices`.\n\nNot all of these controllers are available on all kernels however, and some are specific to the unified hierarchy while others are specific to the legacy hierarchy. Also note that the kernel might support further controllers, which aren't covered here yet as delegation is either not supported at all for them or not defined cleanly.\n\nNote that because of the hierarchical nature of cgroup hierarchy, any controllers that are delegated will be enabled for the parent and sibling units of the unit with delegation.\n\nFor further details on the delegation model consult [Control Group APIs and Delegation](https://systemd.io/CGROUP_DELEGATION).","#Delegate=",218],
[4,364,"Place unit processes in the specified subgroup of the unit's control group. Takes a valid control group name (not a path!) as parameter, or an empty string to turn this feature off. Defaults to off. The control group name must be usable as filename and avoid conflicts with the kernel's control group attribute files (i.e. `cgroup.procs` is not an acceptable name, since the kernel exposes a native control group attribute file by that name). This option has no effect unless control group delegation is turned on via `Delegate=`, see above. Note that this setting only applies to \"main\" processes of a unit, i.e. for services to `ExecStart=`, but not for `ExecReload=` and similar. If delegation is enabled, the latter are always placed inside a subgroup named `.control`. The specified subgroup is automatically created (and potentially ownership is passed to the unit's configured user/group) when a process is started in it.\n\nThis option is useful to avoid manually moving the invoked process into a subgroup after it has been started. Since no processes should live in inner nodes of the control group tree it's almost always necessary to run the main (\"supervising\") process of a unit that has delegation turned on in a subgroup.","#DelegateSubgroup=",254],
[4,365,"Disables controllers from being enabled for a unit's children. If a controller listed is already in use in its subtree, the controller will be removed from the subtree. This can be used to avoid configuration in child units from being able to implicitly or explicitly enable a controller. Defaults to empty.\n\nMultiple controllers may be specified, separated by spaces. You may also pass `DisableControllers=` multiple times, in which case each new instance adds another controller to disable. Passing `DisableControllers=` by itself with no controller name present resets the disabled controller list.\n\nIt may not be possible to disable a controller after units have been started, if the unit or any child of the unit in question delegates controllers to its children, as any delegated subtree of the cgroup hierarchy is unmanaged by systemd.\n\nThe following controller names may be specified: `cpu`, `cpuacct`, `cpuset`, `io`, `blkio`, `memory`, `devices`, `pids`, `bpf-firewall`, and `bpf-devices`.","#DisableControllers=",240],
[4,366,"Specifies how [systemd-oomd.service(8)](systemd-oomd.service.html) will act on this unit's cgroups. Defaults to `auto`.\n\nWhen set to `kill`, the unit becomes a candidate for monitoring by **systemd-oomd**. If the cgroup passes the limits set by [oomd.conf(5)](oomd.conf.html) or the unit configuration, **systemd-oomd** will select a descendant cgroup and send `SIGKILL` to all of the processes under it. You can find more details on candidates and kill behavior at [systemd-oomd.service(8)](systemd-oomd.service.html) and [oomd.conf(5)](oomd.conf.html).\n\nSetting either of these properties to `kill` will also result in `After=` and `Wants=` dependencies on `systemd-oomd.service` unless `DefaultDependencies=no`.\n\nWhen set to `auto`, **systemd-oomd** will not actively use this cgroup's data for monitoring and detection. However, if an ancestor cgroup has one of these properties set to `kill`, a unit with `auto` can still be a candidate for **systemd-oomd** to terminate.","#ManagedOOMSwap=auto%7Ckill",247],
[4,367,"Overrides the default memory pressure limit set by [oomd.conf(5)](oomd.conf.html) for this unit (cgroup). Takes a percentage value between 0% and 100%, inclusive. This property is ignored unless `ManagedOOMMemoryPressure=``kill`. Defaults to 0%, which means to use the default set by [oomd.conf(5)](oomd.conf.html).","#ManagedOOMMemoryPressureLimit=",247],
[4,368,"Allows deprioritizing or omitting this unit's cgroup as a candidate when **systemd-oomd** needs to act. Requires support for extended attributes (see [xattr(7)](https://man7.org/linux/man-pages/man7/xattr.7.html)) in order to use `avoid` or `omit`.\n\nWhen calculating candidates to relieve swap usage, **systemd-oomd** will only respect these extended attributes if the unit's cgroup is owned by root.\n\nWhen calculating candidates to relieve memory pressure, **systemd-oomd** will only respect these extended attributes if the unit's cgroup is owned by root, or if the unit's cgroup owner, and the owner of the monitored ancestor cgroup are the same. For example, if **systemd-oomd** is calculating candidates for `-.slice`, then extended attributes set on descendants of `/user.slice/user-1000.slice/user\\@1000.service/` will be ignored because the descendants are owned by UID 1000, and `-.slice` is owned by UID 0. But, if calculating candidates for `/user.slice/user-1000.slice/user\\@1000.service/`, then extended attributes set on the descendants would be respected.\n\nIf this property is set to `avoid`, the service manager will convey this to **systemd-oomd**, which will only select this cgroup if there are no other viable candidates.\n\nIf this property is set to `omit`, the service manager will convey this to **systemd-oomd**, which will ignore this cgroup as a candidate and will not perform any actions on it.\n\nIt is recommended to use `avoid` and `omit` sparingly, as it can adversely affect **systemd-oomd**'s kill behavior. Also note that these extended attributes are not applied recursively to cgroups under this unit's cgroup.\n\nDefaults to `none` which means **systemd-oomd** will rank this unit's cgroup as defined in [systemd-oomd.service(8)](systemd-oomd.service.html) and [oomd.conf(5)](oomd.conf.html).","#ManagedOOMPreference=none%7Cavoid%7Comit",248],
[4,369,"Controls memory pressure monitoring for invoked processes. Takes one of \"`off`\", \"`on`\", \"`auto`\" or \"`skip`\". If \"`off`\" tells the service not to watch for memory pressure events, by setting the `$MEMORY_PRESSURE_WATCH` environment variable to the literal string `/dev/null`. If \"`on`\" tells the service to watch for memory pressure events. This enables memory accounting for the service, and ensures the `memory.pressure` cgroup attribute file is accessible for reading and writing by the service's user. It then sets the `$MEMORY_PRESSURE_WATCH` environment variable for processes invoked by the unit to the file system path to this file. The threshold information configured with `MemoryPressureThresholdSec=` is encoded in the `$MEMORY_PRESSURE_WRITE` environment variable. If the \"`auto`\" value is set the protocol is enabled if memory accounting is anyway enabled for the unit, and disabled otherwise. If set to \"`skip`\" the logic is neither enabled, nor disabled and the two environment variables are not set.\n\nNote that services are free to use the two environment variables, but it's unproblematic if they ignore them. Memory pressure handling must be implemented individually in each service, and usually means different things for different software. For further details on memory pressure handling see [Memory Pressure Handling in systemd](https://systemd.io/MEMORY_PRESSURE).\n\nServices implemented using [sd-event(3)](sd-event.html) may use [sd\\_event\\_add\\_memory\\_pressure(3)](sd_event_add_memory_pressure.html) to watch for and handle memory pressure events.\n\nIf not explicit set, defaults to the `DefaultMemoryPressureWatch=` setting in [systemd-system.conf(5)](systemd-system.conf.html).","#MemoryPressureWatch=",254],
[4,370,"Sets the memory pressure threshold time for memory pressure monitor as configured via `MemoryPressureWatch=`. Specifies the maximum allocation latency before a memory pressure event is signalled to the service, per 2s window. If not specified defaults to the `DefaultMemoryPressureThresholdSec=` setting in [systemd-system.conf(5)](systemd-system.conf.html) (which in turn defaults to 200ms). The specified value expects a time unit such as \"`ms`\" or \"`Î¼s`\", see [systemd.time(7)](systemd.time.html) for details on the permitted syntax.","#MemoryPressureThresholdSec=",254],
[4,371,"Takes a boolean argument. This setting is used to enable coredump forwarding for containers that belong to this unit's cgroup. Units with `CoredumpReceive=yes` must also be configured with `Delegate=yes`. Defaults to false.\n\nWhen **systemd-coredump** is handling a coredump for a process from a container, if the container's leader process is a descendant of a cgroup with `CoredumpReceive=yes` and `Delegate=yes`, then **systemd-coredump** will attempt to forward the coredump to **systemd-coredump** within the container.","#CoredumpReceive=",255],
[2,"AllowedCPUs",[],337,52,5],
[2,"AllowedMemoryNodes",[],344,52,5],
[2,"BPFProgram",["type:program-path"],359,52,5],
[2,"CPUAccounting","b",333,52,5],
[2,"CPUQuota",[],335,52,5],
[2,"CPUQuotaPeriodSec",[],336,52,5],
[2,"CPUWeight",["weight"],334,52,5],
[2,"CoredumpReceive","b",371,52,5],
[2,"DefaultStartupMemoryLow",["bytes"],339,52,5],
[2,"Delegate",[],363,52,5],
[2,"DelegateSubgroup",[],364,52,5],
[2,"DeviceAllow",[],360,52,5],
[2,"DevicePolicy",["auto|closed|strict"],361,52,5],
[2,"DisableControllers",[],365,52,5],
[2,"IOAccounting","b",347,52,5],
[2,"IODeviceLatencyTargetSec",["device target"],352,52,5],
[2,"IODeviceWeight",["device weight"],349,52,5],
[2,"IOReadBandwidthMax",["device bytes"],350,52,5],
[2,"IOReadIOPSMax",["device IOPS"],351,52,5],
[2,"IOWeight",["weight"],348,52,5],
[2,"IOWriteBandwidthMax",["device bytes"],350,52,5],
[2,"IOWriteIOPSMax",["device IOPS"],351,52,5],
[2,"IPAccounting","b",353,52,5],
[2,"IPAddressAllow",["ADDRESS[/PREFIXLENGTH]â€¦"],354,52,5],
[2,"IPAddressDeny",["ADDRESS[/PREFIXLENGTH]â€¦"],354,52,5],
[2,"IPEgressFilterPath",["BPF_FS_PROGRAM_PATH"],358,52,5],
[2,"IPIngressFilterPath",["BPF_FS_PROGRAM_PATH"],358,52,5],
[2,"ManagedOOMMemoryPressure",["auto|kill"],366,52,5],
[2,"ManagedOOMMemoryPressureLimit",[],367,52,5],
[2,"ManagedOOMPreference",["none|avoid|omit"],368,52,5],
[2,"ManagedOOMSwap",["auto|kill"],366,52,5],
[2,"MemoryAccounting","b",338,52,5],
[2,"MemoryHigh",["bytes"],340,52,5],
[2,"MemoryLow",["bytes"],339,52,5],
[2,"MemoryMax",["bytes"],341,52,5],
[2,"MemoryMin",["bytes"],339,52,5],
[2,"MemoryPressureThresholdSec",[],370,52,5],
[2,"MemoryPressureWatch",[],369,52,5],
[2,"MemorySwapMax",["bytes"],342,52,5],
[2,"MemoryZSwapMax",["bytes"],343,52,5],
[2,"NFTSet",["family:table:set"],357,52,5],
[2,"RestrictNetworkInterfaces",[],356,52,5],
[2,"Slice",[],362,52,5],
[2,"SocketBindAllow",["bind-rule"],355,52,5],
[2,"SocketBindDeny",["bind-rule"],355,52,5],
[2,"StartupAllowedCPUs",[],337,52,5],
[2,"StartupAllowedMemoryNodes",[],344,52,5],
[2,"StartupCPUWeight",["weight"],334,52,5],
[2,"StartupIOWeight",["weight"],348,52,5],
[2,"StartupMemoryHigh",["bytes"],340,52,5],
[2,"StartupMemoryLow",["bytes"],339,52,5],
[2,"StartupMemoryMax",["bytes"],341,52,5],
[2,"StartupMemorySwapMax",["bytes"],342,52,5],
[2,"StartupMemoryZSwapMax",["bytes"],343,52,5],
[2,"TasksAccounting","b",345,52,5],
[2,"TasksMax",["N"],346,52,5],
[3,58,"systemd.unit(5)","systemd.unit â€” Unit configuration","systemd.unit.html"],
[6,6,"Unit"],
[6,7,"Install"],
[4,372,"A short human readable title of the unit. This may be used by **systemd** (and other UIs) as a user-visible label for the unit, so this string should identify the unit rather than describe it, despite the name. This string also shouldn't just repeat the unit name. \"`Apache2 Web Server`\" is a good example. Bad examples are \"`high-performance light-weight HTTP server`\" (too generic) or \"`Apache2`\" (meaningless for people who do not know Apache, duplicates the unit name). **systemd** may use this string as a noun in status messages (\"<code>Starting <em><code>description</code></em>...</code>\", \"<code>Started <em><code>description</code></em>.</code>\", \"<code>Reached target <em><code>description</code></em>.</code>\", \"<code>Failed to start <em><code>description</code></em>.</code>\"), so it should be capitalized, and should not be a full sentence, or a phrase with a continuous verb. Bad examples include \"`exiting the container`\" or \"`updating the database once per day.`\".","#Description=",201],
[4,373,"A space-separated list of URIs referencing documentation for this unit or its configuration. Accepted are only URIs of the types \"`http://`\", \"`https://`\", \"`file:`\", \"`info:`\", \"`man:`\". For more information about the syntax of these URIs, see [uri(7)](https://man7.org/linux/man-pages/man7/uri.7.html). The URIs should be listed in order of relevance, starting with the most relevant. It is a good idea to first reference documentation that explains what the unit's purpose is, followed by how it is configured, followed by any other related documentation. This option may be specified more than once, in which case the specified list of URIs is merged. If the empty string is assigned to this option, the list is reset and all prior assignments will have no effect.","#Documentation=",201],
[4,374,"Configures (weak) requirement dependencies on other units. This option may be specified more than once or multiple space-separated units may be specified in one option in which case dependencies for all listed names will be created. Dependencies of this type may also be configured outside of the unit configuration file by adding a symlink to a `.wants/` directory accompanying the unit file. For details, see above.\n\nUnits listed in this option will be started if the configuring unit is. However, if the listed units fail to start or cannot be added to the transaction, this has no impact on the validity of the transaction as a whole, and this unit will still be started. This is the recommended way to hook the start-up of one unit to the start-up of another unit.\n\nNote that requirement dependencies do not influence the order in which services are started or stopped. This has to be configured independently with the `After=` or `Before=` options. If unit `foo.service` pulls in unit `bar.service` as configured with `Wants=` and no ordering is configured with `After=` or `Before=`, then both units will be started simultaneously and without any delay between them if `foo.service` is activated.","#Wants=",201],
[4,375,"Similar to `Wants=`, but declares a stronger requirement dependency. Dependencies of this type may also be configured by adding a symlink to a `.requires/` directory accompanying the unit file.\n\nIf this unit gets activated, the units listed will be activated as well. If one of the other units fails to activate, and an ordering dependency `After=` on the failing unit is set, this unit will not be started. Besides, with or without specifying `After=`, this unit will be stopped (or restarted) if one of the other units is explicitly stopped (or restarted).\n\nOften, it is a better choice to use `Wants=` instead of `Requires=` in order to achieve a system that is more robust when dealing with failing services.\n\nNote that this dependency type does not imply that the other unit always has to be in active state when this unit is running. Specifically: failing condition checks (such as `ConditionPathExists=`, `ConditionPathIsSymbolicLink=`, â€¦ â€” see below) do not cause the start job of a unit with a `Requires=` dependency on it to fail. Also, some unit types may deactivate on their own (for example, a service process may decide to exit cleanly, or a device may be unplugged by the user), which is not propagated to units having a `Requires=` dependency. Use the `BindsTo=` dependency type together with `After=` to ensure that a unit may never be in active state without a specific other unit also in active state (see below).","#Requires=",201],
[4,376,"Similar to `Requires=`. However, if the units listed here are not started already, they will not be started and the starting of this unit will fail immediately. `Requisite=` does not imply an ordering dependency, even if both units are started in the same transaction. Hence this setting should usually be combined with `After=`, to ensure this unit is not started before the other unit.\n\nWhen `Requisite=b.service` is used on `a.service`, this dependency will show as `RequisiteOf=a.service` in property listing of `b.service`. `RequisiteOf=` dependency cannot be specified directly.","#Requisite=",201],
[4,377,"Configures requirement dependencies, very similar in style to `Requires=`. However, this dependency type is stronger: in addition to the effect of `Requires=` it declares that if the unit bound to is stopped, this unit will be stopped too. This means a unit bound to another unit that suddenly enters inactive state will be stopped too. Units can suddenly, unexpectedly enter inactive state for different reasons: the main process of a service unit might terminate on its own choice, the backing device of a device unit might be unplugged or the mount point of a mount unit might be unmounted without involvement of the system and service manager.\n\nWhen used in conjunction with `After=` on the same unit the behaviour of `BindsTo=` is even stronger. In this case, the unit bound to strictly has to be in active state for this unit to also be in active state. This not only means a unit bound to another unit that suddenly enters inactive state, but also one that is bound to another unit that gets skipped due to an unmet condition check (such as `ConditionPathExists=`, `ConditionPathIsSymbolicLink=`, â€¦ â€” see below) will be stopped, should it be running. Hence, in many cases it is best to combine `BindsTo=` with `After=`.\n\nWhen `BindsTo=b.service` is used on `a.service`, this dependency will show as `BoundBy=a.service` in property listing of `b.service`. `BoundBy=` dependency cannot be specified directly.","#BindsTo=",201],
[4,378,"Configures dependencies similar to `Requires=`, but limited to stopping and restarting of units. When systemd stops or restarts the units listed here, the action is propagated to this unit. Note that this is a one-way dependencyÂ â€” changes to this unit do not affect the listed units.\n\nWhen `PartOf=b.service` is used on `a.service`, this dependency will show as `ConsistsOf=a.service` in property listing of `b.service`. `ConsistsOf=` dependency cannot be specified directly.","#PartOf=",201],
[4,379,"Configures dependencies similar to `Wants=`, but as long as this unit is up, all units listed in `Upholds=` are started whenever found to be inactive or failed, and no job is queued for them. While a `Wants=` dependency on another unit has a one-time effect when this units started, a `Upholds=` dependency on it has a continuous effect, constantly restarting the unit if necessary. This is an alternative to the `Restart=` setting of service units, to ensure they are kept running whatever happens. The restart happens without delay, and usual per-unit rate-limit applies.\n\nWhen `Upholds=b.service` is used on `a.service`, this dependency will show as `UpheldBy=a.service` in the property listing of `b.service`.","#Upholds=",249],
[4,380,"A space-separated list of unit names. Configures negative requirement dependencies. If a unit has a `Conflicts=` setting on another unit, starting the former will stop the latter and vice versa.\n\nNote that this setting does not imply an ordering dependency, similarly to the `Wants=` and `Requires=` dependencies described above. This means that to ensure that the conflicting unit is stopped before the other unit is started, an `After=` or `Before=` dependency must be declared. It doesn't matter which of the two ordering dependencies is used, because stop jobs are always ordered before start jobs, see the discussion in `Before=`/`After=` below.\n\nIf unit A that conflicts with unit B is scheduled to be started at the same time as B, the transaction will either fail (in case both are required parts of the transaction) or be modified to be fixed (in case one or both jobs are not a required part of the transaction). In the latter case, the job that is not required will be removed, or in case both are not required, the unit that conflicts will be started and the unit that is conflicted is stopped.","#Conflicts=",201],
[4,381,"These two settings expect a space-separated list of unit names. They may be specified more than once, in which case dependencies for all listed names are created.\n\nThose two settings configure ordering dependencies between units. If unit `foo.service` contains the setting `Before=bar.service` and both units are being started, `bar.service`'s start-up is delayed until `foo.service` has finished starting up. `After=` is the inverse of `Before=`, i.e. while `Before=` ensures that the configured unit is started before the listed unit begins starting up, `After=` ensures the opposite, that the listed unit is fully started up before the configured unit is started.\n\nWhen two units with an ordering dependency between them are shut down, the inverse of the start-up order is applied. I.e. if a unit is configured with `After=` on another unit, the former is stopped before the latter if both are shut down. Given two units with any ordering dependency between them, if one unit is shut down and the other is started up, the shutdown is ordered before the start-up. It doesn't matter if the ordering dependency is `After=` or `Before=`, in this case. It also doesn't matter which of the two is shut down, as long as one is shut down and the other is started up; the shutdown is ordered before the start-up in all cases. If two units have no ordering dependencies between them, they are shut down or started up simultaneously, and no ordering takes place. It depends on the unit type when precisely a unit has finished starting up. Most importantly, for service units start-up is considered completed for the purpose of `Before=`/`After=` when all its configured start-up commands have been invoked and they either failed or reported start-up success. Note that this does includes `ExecStartPost=` (or `ExecStopPost=` for the shutdown case).\n\nNote that those settings are independent of and orthogonal to the requirement dependencies as configured by `Requires=`, `Wants=`, `Requisite=`, or `BindsTo=`. It is a common pattern to include a unit name in both the `After=` and `Wants=` options, in which case the unit listed will be started before the unit that is configured with these options.\n\nNote that `Before=` dependencies on device units have no effect and are not supported. Devices generally become available as a result of an external hotplug event, and systemd creates the corresponding device unit without delay.","#Before=",201],
[4,382,"A space-separated list of one or more units that are activated when this unit enters the \"`failed`\" state.","#OnFailure=",201],
[4,383,"A space-separated list of one or more units that are activated when this unit enters the \"`inactive`\" state.","#OnSuccess=",249],
[4,384,"A space-separated list of one or more units to which reload requests from this unit shall be propagated to, or units from which reload requests shall be propagated to this unit, respectively. Issuing a reload request on a unit will automatically also enqueue reload requests on all units that are linked to it using these two settings.","#PropagatesReloadTo=",201],
[4,385,"A space-separated list of one or more units to which stop requests from this unit shall be propagated to, or units from which stop requests shall be propagated to this unit, respectively. Issuing a stop request on a unit will automatically also enqueue stop requests on all units that are linked to it using these two settings.","#PropagatesStopTo=",249],
[4,386,"For units that start processes (such as service units), lists one or more other units whose network and/or temporary file namespace to join. If this is specified on a unit (say, `a.service` has `JoinsNamespaceOf=b.service`), then the inverse dependency (`JoinsNamespaceOf=a.service` for b.service) is implied. This only applies to unit types which support the `PrivateNetwork=`, `NetworkNamespacePath=`, `PrivateIPC=`, `IPCNamespacePath=`, and `PrivateTmp=` directives (see [systemd.exec(5)](systemd.exec.html) for details). If a unit that has this setting set is started, its processes will see the same `/tmp/`, `/var/tmp/`, IPC namespace and network namespace as one listed unit that is started. If multiple listed units are already started and these do not share their namespace, then it is not defined which namespace is joined. Note that this setting only has an effect if `PrivateNetwork=`/`NetworkNamespacePath=`, `PrivateIPC=`/`IPCNamespacePath=` and/or `PrivateTmp=` is enabled for both the unit that joins the namespace and the unit whose namespace is joined.","#JoinsNamespaceOf=",209],
[4,387,"Takes a space-separated list of absolute paths. Automatically adds dependencies of type `Requires=` and `After=` for all mount units required to access the specified path.\n\nMount points marked with `noauto` are not mounted automatically through `local-fs.target`, but are still honored for the purposes of this option, i.e. they will be pulled in by this unit.","#RequiresMountsFor=",201],
[4,388,"Takes a value of \"`fail`\", \"`replace`\", \"`replace-irreversibly`\", \"`isolate`\", \"`flush`\", \"`ignore-dependencies`\" or \"`ignore-requirements`\". Defaults to \"`replace`\". Specifies how the units listed in `OnSuccess=`/`OnFailure=` will be enqueued. See [systemctl(1)](systemctl.html)'s `--job-mode=` option for details on the possible values. If this is set to \"`isolate`\", only a single unit may be listed in `OnSuccess=`/`OnFailure=`.","#OnSuccessJobMode=",209],
[4,389,"Takes a boolean argument. If `true`, this unit will not be stopped when isolating another unit. Defaults to `false` for service, target, socket, timer, and path units, and `true` for slice, scope, device, swap, mount, and automount units.","#IgnoreOnIsolate=",201],
[4,390,"Takes a boolean argument. If `true`, this unit will be stopped when it is no longer used. Note that, in order to minimize the work to be executed, systemd will not stop units by default unless they are conflicting with other units, or the user explicitly requested their shut down. If this option is set, a unit will be automatically cleaned up if no other active unit requires it. Defaults to `false`.","#StopWhenUnneeded=",201],
[4,391,"Takes a boolean argument. If `true`, this unit can only be activated or deactivated indirectly. In this case, explicit start-up or termination requested by the user is denied, however if it is started or stopped as a dependency of another unit, start-up or termination will succeed. This is mostly a safety feature to ensure that the user does not accidentally activate units that are not intended to be activated explicitly, and not accidentally deactivate units that are not intended to be deactivated. These options default to `false`.","#RefuseManualStart=",201],
[4,392,"Takes a boolean argument. If `true`, this unit may be used with the **systemctl isolate** command. Otherwise, this will be refused. It probably is a good idea to leave this disabled except for target units that shall be used similar to runlevels in SysV init systems, just as a precaution to avoid unusable system states. This option defaults to `false`.","#AllowIsolate=",201],
[4,393,"Takes a boolean argument. If `yes`, (the default), a few default dependencies will implicitly be created for the unit. The actual dependencies created depend on the unit type. For example, for service units, these dependencies ensure that the service is started only after basic system initialization is completed and is properly terminated on system shutdown. See the respective man pages for details. Generally, only services involved with early boot or late shutdown should set this option to `no`. It is highly recommended to leave this option enabled for the majority of common units. If set to `no`, this option does not disable all implicit dependencies, just non-essential ones.","#DefaultDependencies=",201],
[4,394,"Takes a boolean argument. Defaults to `no`. If `yes`, processes belonging to this unit will not be sent the final \"`SIGTERM`\" and \"`SIGKILL`\" signals during the final phase of the system shutdown process. This functionality replaces the older mechanism that allowed a program to set \"`argv[0][0] = '@'`\" as described at [systemd and Storage Daemons for the Root File System](https://systemd.io/ROOT_STORAGE_DAEMONS), which however continues to be supported.","#SurviveFinalKillSignal=",255],
[4,395,"Tweaks the \"garbage collection\" algorithm for this unit. Takes one of `inactive` or `inactive-or-failed`. If set to `inactive` the unit will be unloaded if it is in the `inactive` state and is not referenced by clients, jobs or other units â€” however it is not unloaded if it is in the `failed` state. In `failed` mode, failed units are not unloaded until the user invoked **systemctl reset-failed** on them to reset the `failed` state, or an equivalent command. This behaviour is altered if this option is set to `inactive-or-failed`: in this case the unit is unloaded even if the unit is in a `failed` state, and thus an explicitly resetting of the `failed` state is not necessary. Note that if this mode is used unit results (such as exit codes, exit signals, consumed resources, â€¦) are flushed out immediately after the unit completed, except for what is stored in the logging subsystem. Defaults to `inactive`.","#CollectMode=",236],
[4,396,"Configure the action to take when the unit stops and enters a failed state or inactive state. Takes one of `none`, `reboot`, `reboot-force`, `reboot-immediate`, `poweroff`, `poweroff-force`, `poweroff-immediate`, `exit`, `exit-force`, `soft-reboot`, `soft-reboot-force`, `kexec`, `kexec-force`, `halt`, `halt-force` and `halt-immediate`. In system mode, all options are allowed. In user mode, only `none`, `exit`, `exit-force`, `soft-reboot` and `soft-reboot-force` are allowed. Both options default to `none`.\n\nIf `none` is set, no action will be triggered. `reboot` causes a reboot following the normal shutdown procedure (i.e. equivalent to **systemctl reboot**). `reboot-force` causes a forced reboot which will terminate all processes forcibly but should cause no dirty file systems on reboot (i.e. equivalent to **systemctl reboot -f**) and `reboot-immediate` causes immediate execution of the [reboot(2)](https://man7.org/linux/man-pages/man2/reboot.2.html) system call, which might result in data loss (i.e. equivalent to **systemctl reboot -ff**). Similarly, `poweroff`, `poweroff-force`, `poweroff-immediate`, `kexec`, `kexec-force`, `halt`, `halt-force` and `halt-immediate` have the effect of powering down the system, executing kexec, and halting the system respectively with similar semantics. `exit` causes the manager to exit following the normal shutdown procedure, and `exit-force` causes it terminate without shutting down services. When `exit` or `exit-force` is used by default the exit status of the main process of the unit (if this applies) is returned from the service manager. However, this may be overridden with `FailureActionExitStatus=`/`SuccessActionExitStatus=`, see below. `soft-reboot` will trigger a userspace reboot operation. `soft-reboot-force` does that too, but does not go through the shutdown transaction beforehand.","#FailureAction=",236],
[4,397,"Controls the exit status to propagate back to an invoking container manager (in case of a system service) or service manager (in case of a user manager) when the `FailureAction=`/`SuccessAction=` are set to `exit` or `exit-force` and the action is triggered. By default the exit status of the main process of the triggering unit (if this applies) is propagated. Takes a value in the range 0â€¦255 or the empty string to request default behaviour.","#FailureActionExitStatus=",240],
[4,398,"`JobTimeoutSec=` specifies a timeout for the whole job that starts running when the job is queued. `JobRunningTimeoutSec=` specifies a timeout that starts running when the queued job is actually started. If either limit is reached, the job will be cancelled, the unit however will not change state or even enter the \"`failed`\" mode.\n\nBoth settings take a time span with the default unit of seconds, but other units may be specified, see [systemd.time(5)](systemd.time.html). The default is \"`infinity`\" (job timeouts disabled), except for device units where `JobRunningTimeoutSec=` defaults to `DefaultDeviceTimeoutSec=`.\n\nNote: these timeouts are independent from any unit-specific timeouts (for example, the timeout set with `TimeoutStartSec=` in service units). The job timeout has no effect on the unit itself. Or in other words: unit-specific timeouts are useful to abort unit state changes, and revert them. The job timeout set with this option however is useful to abort only the job waiting for the unit state to change.","#JobTimeoutSec=",201],
[4,399,"`JobTimeoutAction=` optionally configures an additional action to take when the timeout is hit, see description of `JobTimeoutSec=` and `JobRunningTimeoutSec=` above. It takes the same values as `StartLimitAction=`. Defaults to `none`.\n\n`JobTimeoutRebootArgument=` configures an optional reboot string to pass to the [reboot(2)](https://man7.org/linux/man-pages/man2/reboot.2.html) system call.","#JobTimeoutAction=",240],
[4,400,"Configure unit start rate limiting. Units which are started more than _`burst`_ times within an _`interval`_ time span are not permitted to start any more. Use `StartLimitIntervalSec=` to configure the checking interval and `StartLimitBurst=` to configure how many starts per interval are allowed.\n\n_`interval`_ is a time span with the default unit of seconds, but other units may be specified, see [systemd.time(5)](systemd.time.html). The special value \"`infinity`\" can be used to limit the total number of start attempts, even if they happen at large time intervals. Defaults to `DefaultStartLimitIntervalSec=` in manager configuration file, and may be set to 0 to disable any kind of rate limiting. _`burst`_ is a number and defaults to `DefaultStartLimitBurst=` in manager configuration file.\n\nThese configuration options are particularly useful in conjunction with the service setting `Restart=` (see [systemd.service(5)](systemd.service.html)); however, they apply to all kinds of starts (including manual), not just those triggered by the `Restart=` logic.\n\nNote that units which are configured for `Restart=`, and which reach the start limit are not attempted to be restarted anymore; however, they may still be restarted manually or from a timer or socket at a later point, after the _`interval`_ has passed. From that point on, the restart logic is activated again. **systemctl reset-failed** will cause the restart rate counter for a service to be flushed, which is useful if the administrator wants to manually start a unit and the start limit interferes with that. Rate-limiting is enforced after any unit condition checks are executed, and hence unit activations with failing conditions do not count towards the rate limit.\n\nWhen a unit is unloaded due to the garbage collection logic (see above) its rate limit counters are flushed out too. This means that configuring start rate limiting for a unit that is not referenced continuously has no effect.\n\nThis setting does not apply to slice, target, device, and scope units, since they are unit types whose activation may either never fail, or may succeed only a single time.","#StartLimitIntervalSec=interval",229],
[4,401,"Configure an additional action to take if the rate limit configured with `StartLimitIntervalSec=` and `StartLimitBurst=` is hit. Takes the same values as the `FailureAction=`/`SuccessAction=` settings. If `none` is set, hitting the rate limit will trigger no action except that the start will not be permitted. Defaults to `none`.","#StartLimitAction=",229],
[4,402,"Configure the optional argument for the [reboot(2)](https://man7.org/linux/man-pages/man2/reboot.2.html) system call if `StartLimitAction=` or `FailureAction=` is a reboot action. This works just like the optional argument to **systemctl reboot** command.","#RebootArgument=",229],
[4,403,"A path to a configuration file this unit has been generated from. This is primarily useful for implementation of generator tools that convert configuration from an external configuration file format into native unit files. This functionality should not be used in normal units.","#SourcePath=",201],
[4,404,"Check whether the system is running on a specific architecture. Takes one of \"`x86`\", \"`x86-64`\", \"`ppc`\", \"`ppc-le`\", \"`ppc64`\", \"`ppc64-le`\", \"`ia64`\", \"`parisc`\", \"`parisc64`\", \"`s390`\", \"`s390x`\", \"`sparc`\", \"`sparc64`\", \"`mips`\", \"`mips-le`\", \"`mips64`\", \"`mips64-le`\", \"`alpha`\", \"`arm`\", \"`arm-be`\", \"`arm64`\", \"`arm64-be`\", \"`sh`\", \"`sh64`\", \"`m68k`\", \"`tilegx`\", \"`cris`\", \"`arc`\", \"`arc-be`\", or \"`native`\".\n\nThe architecture is determined from the information returned by [uname(2)](https://man7.org/linux/man-pages/man2/uname.2.html) and is thus subject to [personality(2)](https://man7.org/linux/man-pages/man2/personality.2.html). Note that a `Personality=` setting in the same unit file has no effect on this condition. A special architecture name \"`native`\" is mapped to the architecture the system manager itself is compiled for. The test may be negated by prepending an exclamation mark.","#ConditionArchitecture=",201],
[4,405,"Check whether the system's firmware is of a certain type. The following values are possible:\n\n*   \"`uefi`\" matches systems with EFI.\n    \n*   \"`device-tree`\" matches systems with a device tree.\n    \n*   \"<code>device-tree-compatible(<em><code>value</code></em>)</code>\" matches systems with a device tree that are compatible with \"`value`\".\n    \n*   \"<code>smbios-field(<em><code>field</code></em> <em><code>operator</code></em> <em><code>value</code></em>)</code>\" matches systems with a SMBIOS field containing a certain value. _`field`_ is the name of the SMBIOS field exposed as \"`sysfs`\" attribute file below `/sys/class/dmi/id/`. _`operator`_ is one of \"`<`\", \"`<=`\", \"`>=`\", \"`>`\", \"`==`\", \"`<>`\" for version comparisons, \"`=`\" and \"`!=`\" for literal string comparisons, or \"`$=`\", \"`!$=`\" for shell-style glob comparisons. _`value`_ is the expected value of the SMBIOS field value (possibly containing shell style globs in case \"`$=`\"/\"`!$=`\" is used).","#ConditionFirmware=",249],
[4,406,"Check whether the system is executed in a virtualized environment and optionally test whether it is a specific implementation. Takes either boolean value to check if being executed in any virtualized environment, or one of \"`vm`\" and \"`container`\" to test against a generic type of virtualization solution, or one of \"`qemu`\", \"`kvm`\", \"`amazon`\", \"`zvm`\", \"`vmware`\", \"`microsoft`\", \"`oracle`\", \"`powervm`\", \"`xen`\", \"`bochs`\", \"`uml`\", \"`bhyve`\", \"`qnx`\", \"`apple`\", \"`sre`\", \"`openvz`\", \"`lxc`\", \"`lxc-libvirt`\", \"`systemd-nspawn`\", \"`docker`\", \"`podman`\", \"`rkt`\", \"`wsl`\", \"`proot`\", \"`pouch`\", \"`acrn`\" to test against a specific implementation, or \"`private-users`\" to check whether we are running in a user namespace. See [systemd-detect-virt(1)](systemd-detect-virt.html) for a full list of known virtualization technologies and their identifiers. If multiple virtualization technologies are nested, only the innermost is considered. The test may be negated by prepending an exclamation mark.","#ConditionVirtualization=",244],
[4,407,"`ConditionHost=` may be used to match against the hostname or machine ID of the host. This either takes a hostname string (optionally with shell style globs) which is tested against the locally set hostname as returned by [gethostname(2)](https://man7.org/linux/man-pages/man2/gethostname.2.html), or a machine ID formatted as string (see [machine-id(5)](machine-id.html)). The test may be negated by prepending an exclamation mark.","#ConditionHost=",244],
[4,408,"`ConditionKernelCommandLine=` may be used to check whether a specific kernel command line option is set (or if prefixed with the exclamation mark â€” unset). The argument must either be a single word, or an assignment (i.e. two words, separated by \"`=`\"). In the former case the kernel command line is searched for the word appearing as is, or as left hand side of an assignment. In the latter case, the exact assignment is looked for with right and left hand side matching. This operates on the kernel command line communicated to userspace via `/proc/cmdline`, except when the service manager is invoked as payload of a container manager, in which case the command line of `PID 1` is used instead (i.e. `/proc/1/cmdline`).","#ConditionKernelCommandLine=",244],
[4,409,"`ConditionKernelVersion=` may be used to check whether the kernel version (as reported by **uname -r**) matches a certain expression, or if prefixed with the exclamation mark, does not match. The argument must be a list of (potentially quoted) expressions. Each expression starts with one of \"`=`\" or \"`!=`\" for string comparisons, \"`<`\", \"`<=`\", \"`==`\", \"`<>`\", \"`>=`\", \"`>`\" for version comparisons, or \"`$=`\", \"`!$=`\" for a shell-style glob match. If no operator is specified, \"`$=`\" is implied.\n\nNote that using the kernel version string is an unreliable way to determine which features are supported by a kernel, because of the widespread practice of backporting drivers, features, and fixes from newer upstream kernels into older versions provided by distributions. Hence, this check is inherently unportable and should not be used for units which may be used on different distributions.","#ConditionKernelVersion=",244],
[4,410,"`ConditionCredential=` may be used to check whether a credential by the specified name was passed into the service manager. See [System and Service Credentials](https://systemd.io/CREDENTIALS) for details about credentials. If used in services for the system service manager this may be used to conditionalize services based on system credentials passed in. If used in services for the per-user service manager this may be used to conditionalize services based on credentials passed into the `unit@.service` service instance belonging to the user. The argument must be a valid credential name.","#ConditionCredential=",252],
[4,411,"`ConditionEnvironment=` may be used to check whether a specific environment variable is set (or if prefixed with the exclamation mark â€” unset) in the service manager's environment block. The argument may be a single word, to check if the variable with this name is defined in the environment block, or an assignment (\"<code><em><code>name</code></em>=<em><code>value</code></em></code>\"), to check if the variable with this exact value is defined. Note that the environment block of the service manager itself is checked, i.e. not any variables defined with `Environment=` or `EnvironmentFile=`, as described above. This is particularly useful when the service manager runs inside a containerized environment or as per-user service manager, in order to check for variables passed in by the enclosing container manager or PAM.","#ConditionEnvironment=",246],
[4,412,"`ConditionSecurity=` may be used to check whether the given security technology is enabled on the system. Currently, the following values are recognized:\n\n**TableÂ 3.Â Recognized security technologies**\n\n| Value | Description |\n| --- | --- |\n| selinux | SELinux MAC |\n| apparmor | AppArmor MAC |\n| tomoyo | Tomoyo MAC |\n| smack | SMACK MAC |\n| ima | Integrity Measurement Architecture (IMA) |\n| audit | Linux Audit Framework |\n| uefi-secureboot | UEFI SecureBoot |\n| tpm2 | Trusted Platform Module 2.0 (TPM2) |\n| cvm | Confidential virtual machine (SEV/TDX) |\n| measured-uki | Unified Kernel Image with PCR 11 Measurements, as per [systemd-stub(7)](systemd-stub.html).\nAdded in version 255.\n\n |\n\n  \n\nThe test may be negated by prepending an exclamation mark.","#ConditionSecurity=",244],
[4,413,"Check whether the given capability exists in the capability bounding set of the service manager (i.e. this does not check whether capability is actually available in the permitted or effective sets, see [capabilities(7)](https://man7.org/linux/man-pages/man7/capabilities.7.html) for details). Pass a capability name such as \"`CAP_MKNOD`\", possibly prefixed with an exclamation mark to negate the check.","#ConditionCapability=",244],
[4,414,"Check whether the system has AC power, or is exclusively battery powered at the time of activation of the unit. This takes a boolean argument. If set to \"`true`\", the condition will hold only if at least one AC connector of the system is connected to a power source, or if no AC connectors are known. Conversely, if set to \"`false`\", the condition will hold only if there is at least one AC connector known and all AC connectors are disconnected from a power source.","#ConditionACPower=",244],
[4,415,"Takes one of `/var/` or `/etc/` as argument, possibly prefixed with a \"`!`\" (to invert the condition). This condition may be used to conditionalize units on whether the specified directory requires an update because `/usr/`'s modification time is newer than the stamp file `.updated` in the specified directory. This is useful to implement offline updates of the vendor operating system resources in `/usr/` that require updating of `/etc/` or `/var/` on the next following boot. Units making use of this condition should order themselves before [systemd-update-done.service(8)](systemd-update-done.service.html), to make sure they run before the stamp file's modification time gets reset indicating a completed update.\n\nIf the `systemd.condition-needs-update=` option is specified on the kernel command line (taking a boolean), it will override the result of this condition check, taking precedence over any file modification time checks. If the kernel command line option is used, `systemd-update-done.service` will not have immediate effect on any following `ConditionNeedsUpdate=` checks, until the system is rebooted where the kernel command line option is not specified anymore.\n\nNote that to make this scheme effective, the timestamp of `/usr/` should be explicitly updated after its contents are modified. The kernel will automatically update modification timestamp on a directory only when immediate children of a directory are modified; an modification of nested files will not automatically result in mtime of `/usr/` being updated.\n\nAlso note that if the update method includes a call to execute appropriate post-update steps itself, it should not touch the timestamp of `/usr/`. In a typical distribution packaging scheme, packages will do any required update steps as part of the installation or upgrade, to make package contents immediately usable. `ConditionNeedsUpdate=` should be used with other update mechanisms where such an immediate update does not happen.","#ConditionNeedsUpdate=",244],
[4,416,"Takes a boolean argument. This condition may be used to conditionalize units on whether the system is booting up for the first time. This roughly means that `/etc/` was unpopulated when the system started booting (for details, see \"First Boot Semantics\" in [machine-id(5)](machine-id.html)). First boot is considered finished (this condition will evaluate as false) after the manager has finished the startup phase.\n\nThis condition may be used to populate `/etc/` on the first boot after factory reset, or when a new system instance boots up for the first time.\n\nFor robustness, units with `ConditionFirstBoot=yes` should order themselves before `first-boot-complete.target` and pull in this passive target with `Wants=`. This ensures that in a case of an aborted first boot, these units will be re-run during the next system startup.\n\nIf the `systemd.condition-first-boot=` option is specified on the kernel command line (taking a boolean), it will override the result of this condition check, taking precedence over `/etc/machine-id` existence checks.","#ConditionFirstBoot=",244],
[4,417,"Check for the existence of a file. If the specified absolute path name does not exist, the condition will fail. If the absolute path name passed to `ConditionPathExists=` is prefixed with an exclamation mark (\"`!`\"), the test is negated, and the unit is only started if the path does not exist.","#ConditionPathExists=",244],
[4,418,"`ConditionPathExistsGlob=` is similar to `ConditionPathExists=`, but checks for the existence of at least one file or directory matching the specified globbing pattern.","#ConditionPathExistsGlob=",244],
[4,419,"`ConditionPathIsDirectory=` is similar to `ConditionPathExists=` but verifies that a certain path exists and is a directory.","#ConditionPathIsDirectory=",244],
[4,420,"`ConditionPathIsSymbolicLink=` is similar to `ConditionPathExists=` but verifies that a certain path exists and is a symbolic link.","#ConditionPathIsSymbolicLink=",244],
[4,421,"`ConditionPathIsMountPoint=` is similar to `ConditionPathExists=` but verifies that a certain path exists and is a mount point.","#ConditionPathIsMountPoint=",244],
[4,422,"`ConditionPathIsReadWrite=` is similar to `ConditionPathExists=` but verifies that the underlying file system is readable and writable (i.e. not mounted read-only).","#ConditionPathIsReadWrite=",244],
[4,423,"`ConditionPathIsEncrypted=` is similar to `ConditionPathExists=` but verifies that the underlying file system's backing block device is encrypted using dm-crypt/LUKS. Note that this check does not cover ext4 per-directory encryption, and only detects block level encryption. Moreover, if the specified path resides on a file system on top of a loopback block device, only encryption above the loopback device is detected. It is not detected whether the file system backing the loopback block device is encrypted.","#ConditionPathIsEncrypted=",246],
[4,424,"`ConditionDirectoryNotEmpty=` is similar to `ConditionPathExists=` but verifies that a certain path exists and is a non-empty directory.","#ConditionDirectoryNotEmpty=",244],
[4,425,"`ConditionFileNotEmpty=` is similar to `ConditionPathExists=` but verifies that a certain path exists and refers to a regular file with a non-zero size.","#ConditionFileNotEmpty=",244],
[4,426,"`ConditionFileIsExecutable=` is similar to `ConditionPathExists=` but verifies that a certain path exists, is a regular file, and marked executable.","#ConditionFileIsExecutable=",244],
[4,427,"`ConditionUser=` takes a numeric \"`UID`\", a UNIX user name, or the special value \"`@system`\". This condition may be used to check whether the service manager is running as the given user. The special value \"`@system`\" can be used to check if the user id is within the system user range. This option is not useful for system services, as the system manager exclusively runs as the root user, and thus the test result is constant.","#ConditionUser=",244],
[4,428,"`ConditionGroup=` is similar to `ConditionUser=` but verifies that the service manager's real or effective group, or any of its auxiliary groups, match the specified group or GID. This setting does not support the special value \"`@system`\".","#ConditionGroup=",244],
[4,429,"Check whether given cgroup controllers (e.g. \"`cpu`\") are available for use on the system or whether the legacy v1 cgroup or the modern v2 cgroup hierarchy is used.\n\nMultiple controllers may be passed with a space separating them; in this case the condition will only pass if all listed controllers are available for use. Controllers unknown to systemd are ignored. Valid controllers are \"`cpu`\", \"`io`\", \"`memory`\", and \"`pids`\". Even if available in the kernel, a particular controller may not be available if it was disabled on the kernel command line with `cgroup_disable=controller`.\n\nAlternatively, two special strings \"`v1`\" and \"`v2`\" may be specified (without any controller names). \"`v2`\" will pass if the unified v2 cgroup hierarchy is used, and \"`v1`\" will pass if the legacy v1 hierarchy or the hybrid hierarchy are used. Note that legacy or hybrid hierarchies have been deprecated. See [systemd(1)](systemd.html) for more information.","#ConditionControlGroupController=",244],
[4,430,"Verify that the specified amount of system memory is available to the current system. Takes a memory size in bytes as argument, optionally prefixed with a comparison operator \"`<`\", \"`<=`\", \"`=`\" (or \"`==`\"), \"`!=`\" (or \"`<>`\"), \"`>=`\", \"`>`\". On bare-metal systems compares the amount of physical memory in the system with the specified size, adhering to the specified comparison operator. In containers compares the amount of memory assigned to the container instead.","#ConditionMemory=",244],
[4,431,"Verify that the specified number of CPUs is available to the current system. Takes a number of CPUs as argument, optionally prefixed with a comparison operator \"`<`\", \"`<=`\", \"`=`\" (or \"`==`\"), \"`!=`\" (or \"`<>`\"), \"`>=`\", \"`>`\". Compares the number of CPUs in the CPU affinity mask configured of the service manager itself with the specified number, adhering to the specified comparison operator. On physical systems the number of CPUs in the affinity mask of the service manager usually matches the number of physical CPUs, but in special and virtual environments might differ. In particular, in containers the affinity mask usually matches the number of CPUs assigned to the container and not the physically available ones.","#ConditionCPUs=",244],
[4,432,"Verify that a given CPU feature is available via the \"`CPUID`\" instruction. This condition only does something on i386 and x86-64 processors. On other processors it is assumed that the CPU does not support the given feature. It checks the leaves \"`1`\", \"`7`\", \"`0x80000001`\", and \"`0x80000007`\". Valid values are: \"`fpu`\", \"`vme`\", \"`de`\", \"`pse`\", \"`tsc`\", \"`msr`\", \"`pae`\", \"`mce`\", \"`cx8`\", \"`apic`\", \"`sep`\", \"`mtrr`\", \"`pge`\", \"`mca`\", \"`cmov`\", \"`pat`\", \"`pse36`\", \"`clflush`\", \"`mmx`\", \"`fxsr`\", \"`sse`\", \"`sse2`\", \"`ht`\", \"`pni`\", \"`pclmul`\", \"`monitor`\", \"`ssse3`\", \"`fma3`\", \"`cx16`\", \"`sse4_1`\", \"`sse4_2`\", \"`movbe`\", \"`popcnt`\", \"`aes`\", \"`xsave`\", \"`osxsave`\", \"`avx`\", \"`f16c`\", \"`rdrand`\", \"`bmi1`\", \"`avx2`\", \"`bmi2`\", \"`rdseed`\", \"`adx`\", \"`sha_ni`\", \"`syscall`\", \"`rdtscp`\", \"`lm`\", \"`lahf_lm`\", \"`abm`\", \"`constant_tsc`\".","#ConditionCPUFeature=",248],
[4,433,"Verify that a specific \"`key=value`\" pair is set in the host's [os-release(5)](os-release.html).\n\nOther than exact string matching (with \"`=`\" and \"`!=`\"), relative comparisons are supported for versioned parameters (e.g. \"`VERSION_ID`\"; with \"`<`\", \"`<=`\", \"`==`\", \"`<>`\", \"`>=`\", \"`>`\"), and shell-style wildcard comparisons (\"`*`\", \"`?`\", \"`[]`\") are supported with the \"`$=`\" (match) and \"`!$=`\" (non-match).","#ConditionOSRelease=",249],
[4,434,"Verify that the overall system (memory, CPU or IO) pressure is below or equal to a threshold. This setting takes a threshold value as argument. It can be specified as a simple percentage value, suffixed with \"`%`\", in which case the pressure will be measured as an average over the last five minutes before the attempt to start the unit is performed. Alternatively, the average timespan can also be specified using \"`/`\" as a separator, for example: \"`10%/1min`\". The supported timespans match what the kernel provides, and are limited to \"`10sec`\", \"`1min`\" and \"`5min`\". The \"`full`\" PSI will be checked first, and if not found \"`some`\" will be checked. For more details, see the documentation on [PSI (Pressure Stall Information)](https://docs.kernel.org/accounting/psi.html) .\n\nOptionally, the threshold value can be prefixed with the slice unit under which the pressure will be checked, followed by a \"`:`\". If the slice unit is not specified, the overall system pressure will be measured, instead of a particular cgroup's.","#ConditionMemoryPressure=",250],
[4,435,"Similar to the `ConditionArchitecture=`, `ConditionVirtualization=`, â€¦, condition settings described above, these settings add assertion checks to the start-up of the unit. However, unlike the conditions settings, any assertion setting that is not met results in failure of the start job (which means this is logged loudly). Note that hitting a configured assertion does not cause the unit to enter the \"`failed`\" state (or in fact result in any state change of the unit), it affects only the job queued for it. Use assertion expressions for units that cannot operate when specific requirements are not met, and when this is something the administrator or user should look into.","#AssertArchitecture=",218],
[4,436,"A space-separated list of additional names this unit shall be installed under. The names listed here must have the same suffix (i.e. type) as the unit filename. This option may be specified more than once, in which case all listed names are used. At installation time, **systemctl enable** will create symlinks from these names to the unit filename. Note that not all unit types support such alias names, and this setting is not supported for them. Specifically, mount, slice, swap, and automount units do not support aliasing.","#Alias=",201],
[4,437,"This option may be used more than once, or a space-separated list of unit names may be given. A symbolic link is created in the `.wants/`, `.requires/`, or `.upholds/` directory of each of the listed units when this unit is installed by **systemctl enable**. This has the effect of a dependency of type `Wants=`, `Requires=`, or `Upholds=` being added from the listed unit to the current unit. See the description of the mentioned dependency types in the \\[Unit\\] section for details.\n\nIn case of template units listing non template units, the listing unit must have `DefaultInstance=` set, or **systemctl enable** must be called with an instance name. The instance (default or specified) will be added to the `.wants/`, `.requires/`, or `.upholds/` list of the listed unit. For example, **WantedBy=getty.target** in a service `getty@.service` will result in **systemctl enable getty\\@tty2.service** creating a `getty.target.wants/getty\\@tty2.service` link to `getty@.service`. This also applies to listing specific instances of templated units: this specific instance will gain the dependency. A template unit may also list a template unit, in which case a generic dependency will be added where each instance of the listing unit will have a dependency on an instance of the listed template with the same instance value. For example, **WantedBy=container@.target** in a service `monitor@.service` will result in **systemctl enable monitor@.service** creating a `container@.target.wants/monitor@.service` link to `monitor@.service`, which applies to all instances of `container@.target`.","#WantedBy=",201],
[4,438,"Additional units to install/deinstall when this unit is installed/deinstalled. If the user requests installation/deinstallation of a unit with this option configured, **systemctl enable** and **systemctl disable** will automatically install/uninstall units listed in this option as well.\n\nThis option may be used more than once, or a space-separated list of unit names may be given.","#Also=",201],
[4,439,"In template unit files, this specifies for which instance the unit shall be enabled if the template is enabled without any explicitly set instance. This option has no effect in non-template unit files. The specified string must be usable as instance identifier.","#DefaultInstance=",215],
[2,"After",[],381,58,6],
[2,"Alias",[],436,58,7],
[2,"AllowIsolate","b",392,58,6],
[2,"Also",[],438,58,7],
[2,"AssertACPower",[],435,58,6],
[2,"AssertArchitecture",[],435,58,6],
[2,"AssertCPUFeature",[],435,58,6],
[2,"AssertCPUPressure",[],435,58,6],
[2,"AssertCPUs",[],435,58,6],
[2,"AssertCapability",[],435,58,6],
[2,"AssertControlGroupController",[],435,58,6],
[2,"AssertCredential",[],435,58,6],
[2,"AssertDirectoryNotEmpty",[],435,58,6],
[2,"AssertEnvironment",[],435,58,6],
[2,"AssertFileIsExecutable",[],435,58,6],
[2,"AssertFileNotEmpty",[],435,58,6],
[2,"AssertFirstBoot",[],435,58,6],
[2,"AssertGroup",[],435,58,6],
[2,"AssertHost",[],435,58,6],
[2,"AssertIOPressure",[],435,58,6],
[2,"AssertKernelCommandLine",[],435,58,6],
[2,"AssertKernelVersion",[],435,58,6],
[2,"AssertMemory",[],435,58,6],
[2,"AssertMemoryPressure",[],435,58,6],
[2,"AssertNeedsUpdate",[],435,58,6],
[2,"AssertOSRelease",[],435,58,6],
[2,"AssertPathExists",[],435,58,6],
[2,"AssertPathExistsGlob",[],435,58,6],
[2,"AssertPathIsDirectory",[],435,58,6],
[2,"AssertPathIsEncrypted",[],435,58,6],
[2,"AssertPathIsMountPoint",[],435,58,6],
[2,"AssertPathIsReadWrite",[],435,58,6],
[2,"AssertPathIsSymbolicLink",[],435,58,6],
[2,"AssertSecurity",[],435,58,6],
[2,"AssertUser",[],435,58,6],
[2,"AssertVirtualization",[],435,58,6],
[2,"Before",[],381,58,6],
[2,"BindsTo",[],377,58,6],
[2,"CollectMode",[],395,58,6],
[2,"ConditionACPower","b",414,58,6],
[2,"ConditionArchitecture",[],404,58,6],
[2,"ConditionCPUFeature",[],432,58,6],
[2,"ConditionCPUPressure",[],434,58,6],
[2,"ConditionCPUs",[],431,58,6],
[2,"ConditionCapability",[],413,58,6],
[2,"ConditionControlGroupController",[],429,58,6],
[2,"ConditionCredential",[],410,58,6],
[2,"ConditionDirectoryNotEmpty",[],424,58,6],
[2,"ConditionEnvironment",[],411,58,6],
[2,"ConditionFileIsExecutable",[],426,58,6],
[2,"ConditionFileNotEmpty",[],425,58,6],
[2,"ConditionFirmware",[],405,58,6],
[2,"ConditionFirstBoot","b",416,58,6],
[2,"ConditionGroup",[],428,58,6],
[2,"ConditionHost",[],407,58,6],
[2,"ConditionIOPressure",[],434,58,6],
[2,"ConditionKernelCommandLine",[],408,58,6],
[2,"ConditionKernelVersion",[],409,58,6],
[2,"ConditionMemory",[],430,58,6],
[2,"ConditionMemoryPressure",[],434,58,6],
[2,"ConditionNeedsUpdate",[],415,58,6],
[2,"ConditionOSRelease",[],433,58,6],
[2,"ConditionPathExists",[],417,58,6],
[2,"ConditionPathExistsGlob",[],418,58,6],
[2,"ConditionPathIsDirectory",[],419,58,6],
[2,"ConditionPathIsEncrypted",[],423,58,6],
[2,"ConditionPathIsMountPoint",[],421,58,6],
[2,"ConditionPathIsReadWrite",[],422,58,6],
[2,"ConditionPathIsSymbolicLink",[],420,58,6],
[2,"ConditionSecurity",[],412,58,6],
[2,"ConditionUser",[],427,58,6],
[2,"ConditionVirtualization",[],406,58,6],
[2,"Conflicts",[],380,58,6],
[2,"DefaultDependencies","b",393,58,6],
[2,"DefaultInstance",[],439,58,7],
[2,"Description",[],372,58,6],
[2,"Documentation",[],373,58,6],
[2,"FailureAction",[],396,58,6],
[2,"FailureActionExitStatus",[],397,58,6],
[2,"IgnoreOnIsolate","b",389,58,6],
[2,"JobRunningTimeoutSec",[],398,58,6],
[2,"JobTimeoutAction",[],399,58,6],
[2,"JobTimeoutRebootArgument",[],399,58,6],
[2,"JobTimeoutSec",[],398,58,6],
[2,"JoinsNamespaceOf",[],386,58,6],
[2,"OnFailure",[],382,58,6],
[2,"OnFailureJobMode",[],388,58,6],
[2,"OnSuccess",[],383,58,6],
[2,"OnSuccessJobMode",[],388,58,6],
[2,"PartOf",[],378,58,6],
[2,"PropagatesReloadTo",[],384,58,6],
[2,"PropagatesStopTo",[],385,58,6],
[2,"RebootArgument",[],402,58,6],
[2,"RefuseManualStart","b",391,58,6],
[2,"RefuseManualStop","b",391,58,6],
[2,"ReloadPropagatedFrom",[],384,58,6],
[2,"RequiredBy",[],437,58,7],
[2,"Requires",[],375,58,6],
[2,"RequiresMountsFor",[],387,58,6],
[2,"Requisite",[],376,58,6],
[2,"SourcePath",[],403,58,6],
[2,"StartLimitAction",[],401,58,6],
[2,"StartLimitBurst",["burst"],400,58,6],
[2,"StartLimitIntervalSec",["interval"],400,58,6],
[2,"StopPropagatedFrom",[],385,58,6],
[2,"StopWhenUnneeded","b",390,58,6],
[2,"SuccessAction",[],396,58,6],
[2,"SuccessActionExitStatus",[],397,58,6],
[2,"SurviveFinalKillSignal","b",394,58,6],
[2,"UpheldBy",[],437,58,7],
[2,"Upholds",[],379,58,6],
[2,"WantedBy",[],437,58,7],
[2,"Wants",[],374,58,6],
[3,59,"systemd(1)","systemd, init â€” systemd system and service manager","systemd.html"],
[4,440,"Overrides the unit to activate on boot. Defaults to `default.target`. This may be used to temporarily boot into a different boot unit, for example `rescue.target` or `emergency.service`. See [systemd.special(7)](systemd.special.html) for details about these units. The option prefixed with \"`rd.`\" is honored only in the initrd, while the one that is not prefixed only in the main system.","#systemd.unit=",null],
[4,441,"Takes a boolean argument. If disabled, all service runtime watchdogs (`WatchdogSec=`) and emergency actions (e.g. `OnFailure=` or `StartLimitAction=`) are ignored by the system manager (PID 1); see [systemd.service(5)](systemd.service.html). Defaults to enabled, i.e. watchdogs and failure actions are processed normally. The hardware watchdog is not affected by this option.","#systemd.service_watchdogs=",237],
[4,442,"Takes `name`, `description` or `combined` as the value. If `name`, the system manager will use unit names in status messages. If `combined`, the system manager will use unit names and description in status messages. When specified, overrides the system manager configuration file option `StatusUnitFormat=`, see [systemd-system.conf(5)](systemd-system.conf.html).","#systemd.status_unit_format=",243],
[4,443,"Controls log output, with the same effect as the `$SYSTEMD_LOG_COLOR`, `$SYSTEMD_LOG_LEVEL`, `$SYSTEMD_LOG_LOCATION`, `$SYSTEMD_LOG_TARGET`, `$SYSTEMD_LOG_TIME`, `$SYSTEMD_LOG_TID` and `$SYSTEMD_LOG_RATELIMIT_KMSG` environment variables described above. `systemd.log_color`, `systemd.log_location`, `systemd.log_time`, `systemd.log_tid` and `systemd.log_ratelimit_kmsg` can be specified without an argument, with the same effect as a positive boolean.","#systemd.log_color",null],
[4,444,"Controls default standard output and error output for services and sockets. That is, controls the default for `StandardOutput=` and `StandardError=` (see [systemd.exec(5)](systemd.exec.html) for details). Takes one of `inherit`, `null`, `tty`, `journal`, `journal+console`, `kmsg`, `kmsg+console`. If the argument is omitted `systemd.default-standard-output=` defaults to `journal` and `systemd.default-standard-error=` to `inherit`.","#systemd.default_standard_output=",null],
[4,445,"Takes a string argument in the form VARIABLE=VALUE. May be used to set default environment variables to add to forked child processes. May be used more than once to set multiple variables.","#systemd.setenv=",null],
[4,446,"Takes a 32 character hex value to be used for setting the machine-id. Intended mostly for network booting where the same machine-id is desired for every boot.","#systemd.machine_id=",229],
[4,447,"Sets a system credential, which can then be propagated to system services using the `ImportCredential=` or `LoadCredential=` setting, see [systemd.exec(5)](systemd.exec.html) for details. Takes a pair of credential name and value, separated by a colon. The `systemd.set_credential=` parameter expects the credential value in literal text form, the `systemd.set_credential_binary=` parameter takes binary data encoded in Base64. Note that the kernel command line is typically accessible by unprivileged programs in `/proc/cmdline`. Thus, this mechanism is not suitable for transferring sensitive data. Use it only for data that is not sensitive (e.g. public keys/certificates, rather than private keys), or in testing/debugging environments.\n\nFor further information see [System and Service Credentials](https://systemd.io/CREDENTIALS) documentation.","#systemd.set_credential=",251],
[4,448,"Takes a boolean argument. If false disables importing credentials from the kernel command line, the DMI/SMBIOS OEM string table, the qemu\\_fw\\_cfg subsystem or the EFI kernel stub.","#systemd.import_credentials=",251],
[4,449,"Set the system locale to use. This overrides the settings in `/etc/locale.conf`. For more information, see [locale.conf(5)](https://man7.org/linux/man-pages/man5/locale.conf.5.html) and [locale(7)](https://man7.org/linux/man-pages/man7/locale.7.html).","#locale.LANG=",186],
[2,"locale.LANG",[],449,59,null],
[2,"locale.LANGUAGE",[],449,59,null],
[2,"locale.LC_ADDRESS",[],449,59,null],
[2,"locale.LC_COLLATE",[],449,59,null],
[2,"locale.LC_CTYPE",[],449,59,null],
[2,"locale.LC_IDENTIFICATION",[],449,59,null],
[2,"locale.LC_MEASUREMENT",[],449,59,null],
[2,"locale.LC_MESSAGES",[],449,59,null],
[2,"locale.LC_MONETARY",[],449,59,null],
[2,"locale.LC_NAME",[],449,59,null],
[2,"locale.LC_NUMERIC",[],449,59,null],
[2,"locale.LC_PAPER",[],449,59,null],
[2,"locale.LC_TELEPHONE",[],449,59,null],
[2,"locale.LC_TIME",[],449,59,null],
[2,"rd.systemd.unit",[],440,59,null],
[2,"systemd.default_standard_error",[],444,59,null],
[2,"systemd.default_standard_output",[],444,59,null],
[2,"systemd.import_credentials","b",448,59,null],
[2,"systemd.log_level",[],443,59,null],
[2,"systemd.log_target",[],443,59,null],
[2,"systemd.machine_id",[],446,59,null],
[2,"systemd.service_watchdogs","b",441,59,null],
[2,"systemd.set_credential",[],447,59,null],
[2,"systemd.set_credential_binary",[],447,59,null],
[2,"systemd.setenv",[],445,59,null],
[2,"systemd.status_unit_format",[],442,59,null],
[2,"systemd.unit",[],440,59,null],
[3,64,"ukify(1)","ukify â€” Combine components into a signed Unified Kernel Image for UEFI systems","ukify.html"],
[4,450,"A path to the kernel binary.","#Linux=LINUX",254],
[4,451,"Zero or more initrd paths. In the configuration file, items are separated by whitespace. The initrds are combined in the order of specification, with the initrds specified in the config file first.","#Initrd=INITRD...",254],
[4,452,"The kernel command line (the \"`.cmdline`\" section). The argument may be a literal string, or \"`@`\" followed by a path name. If not specified, no command line will be embedded.","#Cmdline=TEXT%7C@PATH",253],
[4,453,"The os-release description (the \"`.osrel`\" section). The argument may be a literal string, or \"`@`\" followed by a path name. If not specified, the [os-release(5)](os-release.html) file will be picked up from the host system.","#OSRelease=TEXT%7C@PATH",253],
[4,454,"The devicetree description (the \"`.dtb`\" section). The argument is a path to a compiled binary DeviceTree file. If not specified, the section will not be present.","#DeviceTree=PATH",253],
[4,455,"A picture to display during boot (the \"`.splash`\" section). The argument is a path to a BMP file. If not specified, the section will not be present.","#Splash=PATH",253],
[4,456,"A path to a public key to embed in the \"`.pcrpkey`\" section. If not specified, and there's exactly one `PCRPublicKey=`/`--pcr-public-key=` argument, that key will be used. Otherwise, the section will not be present.","#PCRPKey=PATH",253],
[4,457,"Specify the kernel version (as in **uname -r**, the \"`.uname`\" section). If not specified, an attempt will be made to extract the version string from the kernel image. It is recommended to pass this explicitly if known, because the extraction is based on heuristics and not very reliable. If not specified and extraction fails, the section will not be present.","#Uname=VERSION",253],
[4,458,"A comma or space-separated list of PCR banks to sign a policy for. If not present, all known banks will be used (\"`sha1`\", \"`sha256`\", \"`sha384`\", \"`sha512`\"), which will fail if not supported by the system.","#PCRBanks=PATH",253],
[4,459,"Whether to use \"`sbsign`\" or \"`pesign`\". Depending on this choice, different parameters are required in order to sign an image. Defaults to \"`sbsign`\".","#SecureBootSigningTool=SIGNER",254],
[4,460,"A path to a private key to use for signing of the resulting binary. If the `SigningEngine=`/`--signing-engine=` option is used, this may also be an engine-specific designation. This option is required by `SecureBootSigningTool=sbsign`/`--signtool=sbsign`.","#SecureBootPrivateKey=SB_KEY",253],
[4,461,"A path to a certificate to use for signing of the resulting binary. If the `SigningEngine=`/`--signing-engine=` option is used, this may also be an engine-specific designation. This option is required by `SecureBootSigningTool=sbsign`/`--signtool=sbsign`.","#SecureBootCertificate=SB_CERT",253],
[4,462,"A path to a nss certificate database directory to use for signing of the resulting binary. Takes effect when `SecureBootSigningTool=pesign`/`--signtool=pesign` is used. Defaults to `/etc/pki/pesign`.","#SecureBootCertificateDir=SB_PATH",254],
[4,463,"The name of the nss certificate database entry to use for signing of the resulting binary. This option is required by `SecureBootSigningTool=pesign`/`--signtool=pesign`.","#SecureBootCertificateName=SB_CERTNAME",254],
[4,464,"Period of validity (in days) for a certificate created by **genkey**. Defaults to 3650, i.e. 10 years.","#SecureBootCertificateValidity=DAYS",254],
[4,465,"An \"engine\" for signing of the resulting binary. This option is currently passed verbatim to the `--engine=` option of [sbsign(1)](https://www.archlinux.org/sbsign/sbsign.1.html).","#SigningEngine=ENGINE",253],
[4,466,"Override the detection of whether to sign the Linux binary itself before it is embedded in the combined image. If not specified, it will be signed if a SecureBoot signing key is provided via the `SecureBootPrivateKey=`/`--secureboot-private-key=` option and the binary has not already been signed. If `SignKernel=`/`--sign-kernel` is true, and the binary has already been signed, the signature will be appended anyway.","#SignKernel=BOOL",253],
[4,467,"SBAT metadata associated with the UKI or addon. SBAT policies are useful to revoke whole groups of UKIs or addons with a single, static policy update that does not take space in DBX/MOKX. If not specified manually, a default metadata entry consisting of \"`uki,1,UKI,uki,1,https://www.freedesktop.org/software/systemd/man/systemd-stub.html`\" will be used, to ensure it is always possible to revoke UKIs and addons. For more information on SBAT see [Shim documentation](https://github.com/rhboot/shim/blob/main/SBAT.md).","#SBAT=TEXT%7C@PATH",254],
[4,468,"A private key to use for signing PCR policies. On the command line, this option may be specified more than once, in which case multiple signatures will be made.","#PCRPrivateKey=PATH",253],
[4,469,"A public key to use for signing PCR policies.\n\nOn the command line, this option may be specified more than once, similarly to the `--pcr-private-key=` option. If not present, the public keys will be extracted from the private keys. On the command line, if present, this option must be specified the same number of times as the `--pcr-private-key=` option.","#PCRPublicKey=PATH",253],
[4,470,"A comma or space-separated list of colon-separated phase paths to sign a policy for. Each set of boot phase paths will be signed with the corresponding private key. If not present, the default of [systemd-measure(1)](systemd-measure.html) will be used.\n\nOn the command line, when this argument is present, it must appear the same number of times as the `--pcr-private-key=` option.","#Phases=LIST",253],
[2,"Cmdline",["TEXT|@PATH"],452,64,null],
[2,"DeviceTree",["PATH"],454,64,null],
[2,"Initrd",["INITRD..."],451,64,null],
[2,"Linux",["LINUX"],450,64,null],
[2,"OSRelease",["TEXT|@PATH"],453,64,null],
[2,"PCRBanks",["PATH"],458,64,null],
[2,"PCRPKey",["PATH"],456,64,null],
[2,"PCRPrivateKey",["PATH"],468,64,null],
[2,"PCRPublicKey",["PATH"],469,64,null],
[2,"Phases",["LIST"],470,64,null],
[2,"SBAT",["TEXT|@PATH"],467,64,null],
[2,"SecureBootCertificate",["SB_CERT"],461,64,null],
[2,"SecureBootCertificateDir",["SB_PATH"],462,64,null],
[2,"SecureBootCertificateName",["SB_CERTNAME"],463,64,null],
[2,"SecureBootCertificateValidity",["DAYS"],464,64,null],
[2,"SecureBootPrivateKey",["SB_KEY"],460,64,null],
[2,"SecureBootSigningTool",["SIGNER"],459,64,null],
[2,"SignKernel",["BOOL"],466,64,null],
[2,"SigningEngine",["ENGINE"],465,64,null],
[2,"Splash",["PATH"],455,64,null],
[2,"Uname",["VERSION"],457,64,null],
[3,65,"vconsole.conf(5)","vconsole.conf â€” Configuration file for the virtual console","vconsole.conf.html"],
[4,471,"Overrides `KEYMAP=` and `KEYMAP_TOGGLE=`.","#vconsole.keymap=",232],
[4,472,"Overrides `FONT=`, `FONT_MAP=`, and `FONT_UNIMAP=`.","#vconsole.font=",232],
[2,"vconsole.font",[],472,65,null],
[2,"vconsole.font_map",[],472,65,null],
[2,"vconsole.font_unimap",[],472,65,null],
[2,"vconsole.keymap",[],471,65,null],
[2,"vconsole.keymap_toggle",[],471,65,null]
]