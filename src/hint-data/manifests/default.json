[
[5,"a","Architecture","A short string identifying the architecture of the local system. A string such as `x86`, `x86-64` or `arm64`. See the architectures defined for `ConditionArchitecture=` above for a full list."],
[5,"A","Operating system image version","The operating system image version identifier of the running system, as read from the `IMAGE_VERSION=` field of `/etc/os-release`. If not set, resolves to an empty string. See [os-release(5)](os-release.html) for more information."],
[5,"b","Boot ID","The boot ID of the running system, formatted as string. See [random(4)](https://man7.org/linux/man-pages/man4/random.4.html) for more information."],
[5,"B","Operating system build ID","The operating system build identifier of the running system, as read from the `BUILD_ID=` field of `/etc/os-release`. If not set, resolves to an empty string. See [os-release(5)](os-release.html) for more information."],
[5,"C","Cache directory root","This is either `/var/cache` (for the system manager) or the path \"`$XDG_CACHE_HOME`\" resolves to (for user managers)."],
[5,"d","Credentials directory","This is the value of the \"`$CREDENTIALS_DIRECTORY`\" environment variable if available. See section \"Credentials\" in [systemd.exec(5)](systemd.exec.html) for more information."],
[5,"E","Configuration directory root","This is either `/etc/` (for the system manager) or the path \"`$XDG_CONFIG_HOME`\" resolves to (for user managers)."],
[5,"f","Unescaped filename","This is either the unescaped instance name (if applicable) with `/` prepended (if applicable), or the unescaped prefix name prepended with `/`. This implements unescaping according to the rules for escaping absolute file system paths discussed above."],
[5,"g","User group","This is the name of the group running the service manager instance. In case of the system manager this resolves to \"`root`\"."],
[5,"G","User GID","This is the numeric GID of the user running the service manager instance. In case of the system manager this resolves to \"`0`\"."],
[5,"h","User home directory","This is the home directory of the _user running the service manager instance_. In case of the system manager this resolves to \"`/root`\". Note that this setting is _not_ influenced by the `User=` setting configurable in the \\[Service\\] section of the service unit."],
[5,"H","Host name","The hostname of the running system at the point in time the unit configuration is loaded."],
[5,"i","Instance name","For instantiated units this is the string between the first \"`@`\" character and the type suffix. Empty for non-instantiated units."],
[5,"I","Unescaped instance name","Same as \"`%i`\", but with escaping undone."],
[5,"j","Final component of the prefix","This is the string between the last \"`-`\" and the end of the prefix name. If there is no \"`-`\", this is the same as \"`%p`\"."],
[5,"J","Unescaped final component of the prefix","Same as \"`%j`\", but with escaping undone."],
[5,"l","Short host name","The hostname of the running system at the point in time the unit configuration is loaded, truncated at the first dot to remove any domain component."],
[5,"L","Log directory root","This is either `/var/log` (for the system manager) or the path `$XDG_STATE_HOME` resolves to with `/log` appended (for user managers)."],
[5,"m","Machine ID","The machine ID of the running system, formatted as string. See [machine-id(5)](machine-id.html) for more information."],
[5,"M","Operating system image identifier","The operating system image identifier of the running system, as read from the `IMAGE_ID=` field of `/etc/os-release`. If not set, resolves to an empty string. See [os-release(5)](os-release.html) for more information."],
[5,"n","Full unit name",""],
[5,"N","Full unit name","Same as \"`%n`\", but with the type suffix removed."],
[5,"o","Operating system ID","The operating system identifier of the running system, as read from the `ID=` field of `/etc/os-release`. See [os-release(5)](os-release.html) for more information."],
[5,"p","Prefix name","For instantiated units, this refers to the string before the first \"`@`\" character of the unit name. For non-instantiated units, same as \"`%N`\"."],
[5,"P","Unescaped prefix name","Same as \"`%p`\", but with escaping undone."],
[5,"q","Pretty host name","The pretty hostname of the running system at the point in time the unit configuration is loaded, as read from the `PRETTY_HOSTNAME=` field of `/etc/machine-info`. If not set, resolves to the short hostname. See [machine-info(5)](machine-info.html) for more information."],
[5,"s","User shell","This is the shell of the user running the service manager instance."],
[5,"S","State directory root","This is either `/var/lib` (for the system manager) or the path `$XDG_STATE_HOME` resolves to (for user managers)."],
[5,"t","Runtime directory root","This is either `/run/` (for the system manager) or the path \"`$XDG_RUNTIME_DIR`\" resolves to (for user managers)."],
[5,"T","Directory for temporary files","This is either `/tmp` or the path \"`$TMPDIR`\", \"`$TEMP`\" or \"`$TMP`\" are set to. (Note that the directory may be specified without a trailing slash.)"],
[5,"u","User name","This is the name of the _user running the service manager instance_. In case of the system manager this resolves to \"`root`\". Note that this setting is _not_ influenced by the `User=` setting configurable in the \\[Service\\] section of the service unit."],
[5,"U","User UID","This is the numeric UID of the _user running the service manager instance_. In case of the system manager this resolves to \"`0`\". Note that this setting is _not_ influenced by the `User=` setting configurable in the \\[Service\\] section of the service unit."],
[5,"v","Kernel release","Identical to **uname -r** output."],
[5,"V","Directory for larger and persistent temporary files","This is either `/var/tmp` or the path \"`$TMPDIR`\", \"`$TEMP`\" or \"`$TMP`\" are set to. (Note that the directory may be specified without a trailing slash.)"],
[5,"w","Operating system version ID","The operating system version identifier of the running system, as read from the `VERSION_ID=` field of `/etc/os-release`. If not set, resolves to an empty string. See [os-release(5)](os-release.html) for more information."],
[5,"W","Operating system variant ID","The operating system variant identifier of the running system, as read from the `VARIANT_ID=` field of `/etc/os-release`. If not set, resolves to an empty string. See [os-release(5)](os-release.html) for more information."],
[5,"y","The path to the fragment","This is the path where the main part of the unit file is located. For linked unit files, the real path outside of the unit search directories is used. For units that don't have a fragment file, this specifier will raise an error."],
[5,"Y","The directory of the fragment","This is the directory part of \"`%y`\"."],
[5,"%","Single percent sign","Use \"`%%`\" in place of \"`%`\" to specify a single percent sign."],
[3,3,"systemd.unit(5)","systemd.unit â€” Unit configuration","systemd.unit.html"],
[6,1,"Unit"],
[6,2,"Install"],
[4,1,"A short human readable title of the unit. This may be used by **systemd** (and other UIs) as a user-visible label for the unit, so this string should identify the unit rather than describe it, despite the name. This string also shouldn't just repeat the unit name. \"`Apache2 Web Server`\" is a good example. Bad examples are \"`high-performance light-weight HTTP server`\" (too generic) or \"`Apache2`\" (meaningless for people who do not know Apache, duplicates the unit name). **systemd** may use this string as a noun in status messages (\"``Starting _`description`_...``\", \"``Started _`description`_.``\", \"``Reached target _`description`_.``\", \"``Failed to start _`description`_.``\"), so it should be capitalized, and should not be a full sentence, or a phrase with a continuous verb. Bad examples include \"`exiting the container`\" or \"`updating the database once per day.`\".\n\nAdded in version 201."],
[4,2,"A space-separated list of URIs referencing documentation for this unit or its configuration. Accepted are only URIs of the types \"`http://`\", \"`https://`\", \"`file:`\", \"`info:`\", \"`man:`\". For more information about the syntax of these URIs, see [uri(7)](https://man7.org/linux/man-pages/man7/uri.7.html). The URIs should be listed in order of relevance, starting with the most relevant. It is a good idea to first reference documentation that explains what the unit's purpose is, followed by how it is configured, followed by any other related documentation. This option may be specified more than once, in which case the specified list of URIs is merged. If the empty string is assigned to this option, the list is reset and all prior assignments will have no effect.\n\nAdded in version 201."],
[4,3,"Configures (weak) requirement dependencies on other units. This option may be specified more than once or multiple space-separated units may be specified in one option in which case dependencies for all listed names will be created. Dependencies of this type may also be configured outside of the unit configuration file by adding a symlink to a `.wants/` directory accompanying the unit file. For details, see above.\n\nUnits listed in this option will be started if the configuring unit is. However, if the listed units fail to start or cannot be added to the transaction, this has no impact on the validity of the transaction as a whole, and this unit will still be started. This is the recommended way to hook the start-up of one unit to the start-up of another unit.\n\nNote that requirement dependencies do not influence the order in which services are started or stopped. This has to be configured independently with the `After=` or `Before=` options. If unit `foo.service` pulls in unit `bar.service` as configured with `Wants=` and no ordering is configured with `After=` or `Before=`, then both units will be started simultaneously and without any delay between them if `foo.service` is activated.\n\nAdded in version 201."],
[4,4,"Similar to `Wants=`, but declares a stronger requirement dependency. Dependencies of this type may also be configured by adding a symlink to a `.requires/` directory accompanying the unit file.\n\nIf this unit gets activated, the units listed will be activated as well. If one of the other units fails to activate, and an ordering dependency `After=` on the failing unit is set, this unit will not be started. Besides, with or without specifying `After=`, this unit will be stopped (or restarted) if one of the other units is explicitly stopped (or restarted).\n\nOften, it is a better choice to use `Wants=` instead of `Requires=` in order to achieve a system that is more robust when dealing with failing services.\n\nNote that this dependency type does not imply that the other unit always has to be in active state when this unit is running. Specifically: failing condition checks (such as `ConditionPathExists=`, `ConditionPathIsSymbolicLink=`, â€¦ â€” see below) do not cause the start job of a unit with a `Requires=` dependency on it to fail. Also, some unit types may deactivate on their own (for example, a service process may decide to exit cleanly, or a device may be unplugged by the user), which is not propagated to units having a `Requires=` dependency. Use the `BindsTo=` dependency type together with `After=` to ensure that a unit may never be in active state without a specific other unit also in active state (see below).\n\nAdded in version 201."],
[4,5,"Similar to `Requires=`. However, if the units listed here are not started already, they will not be started and the starting of this unit will fail immediately. `Requisite=` does not imply an ordering dependency, even if both units are started in the same transaction. Hence this setting should usually be combined with `After=`, to ensure this unit is not started before the other unit.\n\nWhen `Requisite=b.service` is used on `a.service`, this dependency will show as `RequisiteOf=a.service` in property listing of `b.service`. `RequisiteOf=` dependency cannot be specified directly.\n\nAdded in version 201."],
[4,6,"Configures requirement dependencies, very similar in style to `Requires=`. However, this dependency type is stronger: in addition to the effect of `Requires=` it declares that if the unit bound to is stopped, this unit will be stopped too. This means a unit bound to another unit that suddenly enters inactive state will be stopped too. Units can suddenly, unexpectedly enter inactive state for different reasons: the main process of a service unit might terminate on its own choice, the backing device of a device unit might be unplugged or the mount point of a mount unit might be unmounted without involvement of the system and service manager.\n\nWhen used in conjunction with `After=` on the same unit the behaviour of `BindsTo=` is even stronger. In this case, the unit bound to strictly has to be in active state for this unit to also be in active state. This not only means a unit bound to another unit that suddenly enters inactive state, but also one that is bound to another unit that gets skipped due to an unmet condition check (such as `ConditionPathExists=`, `ConditionPathIsSymbolicLink=`, â€¦ â€” see below) will be stopped, should it be running. Hence, in many cases it is best to combine `BindsTo=` with `After=`.\n\nWhen `BindsTo=b.service` is used on `a.service`, this dependency will show as `BoundBy=a.service` in property listing of `b.service`. `BoundBy=` dependency cannot be specified directly.\n\nAdded in version 201."],
[4,7,"Configures dependencies similar to `Requires=`, but limited to stopping and restarting of units. When systemd stops or restarts the units listed here, the action is propagated to this unit. Note that this is a one-way dependencyÂ â€” changes to this unit do not affect the listed units.\n\nWhen `PartOf=b.service` is used on `a.service`, this dependency will show as `ConsistsOf=a.service` in property listing of `b.service`. `ConsistsOf=` dependency cannot be specified directly.\n\nAdded in version 201."],
[4,8,"Configures dependencies similar to `Wants=`, but as long as this unit is up, all units listed in `Upholds=` are started whenever found to be inactive or failed, and no job is queued for them. While a `Wants=` dependency on another unit has a one-time effect when this units started, a `Upholds=` dependency on it has a continuous effect, constantly restarting the unit if necessary. This is an alternative to the `Restart=` setting of service units, to ensure they are kept running whatever happens. The restart happens without delay, and usual per-unit rate-limit applies.\n\nWhen `Upholds=b.service` is used on `a.service`, this dependency will show as `UpheldBy=a.service` in the property listing of `b.service`.\n\nAdded in version 249."],
[4,9,"A space-separated list of unit names. Configures negative requirement dependencies. If a unit has a `Conflicts=` setting on another unit, starting the former will stop the latter and vice versa.\n\nNote that this setting does not imply an ordering dependency, similarly to the `Wants=` and `Requires=` dependencies described above. This means that to ensure that the conflicting unit is stopped before the other unit is started, an `After=` or `Before=` dependency must be declared. It doesn't matter which of the two ordering dependencies is used, because stop jobs are always ordered before start jobs, see the discussion in `Before=`/`After=` below.\n\nIf unit A that conflicts with unit B is scheduled to be started at the same time as B, the transaction will either fail (in case both are required parts of the transaction) or be modified to be fixed (in case one or both jobs are not a required part of the transaction). In the latter case, the job that is not required will be removed, or in case both are not required, the unit that conflicts will be started and the unit that is conflicted is stopped.\n\nAdded in version 201."],
[4,10,"These two settings expect a space-separated list of unit names. They may be specified more than once, in which case dependencies for all listed names are created.\n\nThose two settings configure ordering dependencies between units. If unit `foo.service` contains the setting `Before=bar.service` and both units are being started, `bar.service`'s start-up is delayed until `foo.service` has finished starting up. `After=` is the inverse of `Before=`, i.e. while `Before=` ensures that the configured unit is started before the listed unit begins starting up, `After=` ensures the opposite, that the listed unit is fully started up before the configured unit is started.\n\nWhen two units with an ordering dependency between them are shut down, the inverse of the start-up order is applied. I.e. if a unit is configured with `After=` on another unit, the former is stopped before the latter if both are shut down. Given two units with any ordering dependency between them, if one unit is shut down and the other is started up, the shutdown is ordered before the start-up. It doesn't matter if the ordering dependency is `After=` or `Before=`, in this case. It also doesn't matter which of the two is shut down, as long as one is shut down and the other is started up; the shutdown is ordered before the start-up in all cases. If two units have no ordering dependencies between them, they are shut down or started up simultaneously, and no ordering takes place. It depends on the unit type when precisely a unit has finished starting up. Most importantly, for service units start-up is considered completed for the purpose of `Before=`/`After=` when all its configured start-up commands have been invoked and they either failed or reported start-up success. Note that this does includes `ExecStartPost=` (or `ExecStopPost=` for the shutdown case).\n\nNote that those settings are independent of and orthogonal to the requirement dependencies as configured by `Requires=`, `Wants=`, `Requisite=`, or `BindsTo=`. It is a common pattern to include a unit name in both the `After=` and `Wants=` options, in which case the unit listed will be started before the unit that is configured with these options.\n\nNote that `Before=` dependencies on device units have no effect and are not supported. Devices generally become available as a result of an external hotplug event, and systemd creates the corresponding device unit without delay.\n\nAdded in version 201."],
[4,11,"A space-separated list of one or more units that are activated when this unit enters the \"`failed`\" state.\n\nAdded in version 201."],
[4,12,"A space-separated list of one or more units that are activated when this unit enters the \"`inactive`\" state.\n\nAdded in version 249."],
[4,13,"A space-separated list of one or more units to which reload requests from this unit shall be propagated to, or units from which reload requests shall be propagated to this unit, respectively. Issuing a reload request on a unit will automatically also enqueue reload requests on all units that are linked to it using these two settings.\n\nAdded in version 201."],
[4,14,"A space-separated list of one or more units to which stop requests from this unit shall be propagated to, or units from which stop requests shall be propagated to this unit, respectively. Issuing a stop request on a unit will automatically also enqueue stop requests on all units that are linked to it using these two settings.\n\nAdded in version 249."],
[4,15,"For units that start processes (such as service units), lists one or more other units whose network and/or temporary file namespace to join. If this is specified on a unit (say, `a.service` has `JoinsNamespaceOf=b.service`), then the inverse dependency (`JoinsNamespaceOf=a.service` for b.service) is implied. This only applies to unit types which support the `PrivateNetwork=`, `NetworkNamespacePath=`, `PrivateIPC=`, `IPCNamespacePath=`, and `PrivateTmp=` directives (see [systemd.exec(5)](systemd.exec.html) for details). If a unit that has this setting set is started, its processes will see the same `/tmp/`, `/var/tmp/`, IPC namespace and network namespace as one listed unit that is started. If multiple listed units are already started and these do not share their namespace, then it is not defined which namespace is joined. Note that this setting only has an effect if `PrivateNetwork=`/`NetworkNamespacePath=`, `PrivateIPC=`/`IPCNamespacePath=` and/or `PrivateTmp=` is enabled for both the unit that joins the namespace and the unit whose namespace is joined.\n\nAdded in version 209."],
[4,16,"Takes a space-separated list of absolute paths. Automatically adds dependencies of type `Requires=` and `After=` for all mount units required to access the specified path.\n\nMount points marked with `noauto` are not mounted automatically through `local-fs.target`, but are still honored for the purposes of this option, i.e. they will be pulled in by this unit.\n\nAdded in version 201."],
[4,17,"Takes a value of \"`fail`\", \"`replace`\", \"`replace-irreversibly`\", \"`isolate`\", \"`flush`\", \"`ignore-dependencies`\" or \"`ignore-requirements`\". Defaults to \"`replace`\". Specifies how the units listed in `OnSuccess=`/`OnFailure=` will be enqueued. See [systemctl(1)](systemctl.html)'s `--job-mode=` option for details on the possible values. If this is set to \"`isolate`\", only a single unit may be listed in `OnSuccess=`/`OnFailure=`.\n\nAdded in version 209."],
[4,18,"Takes a boolean argument. If `true`, this unit will not be stopped when isolating another unit. Defaults to `false` for service, target, socket, timer, and path units, and `true` for slice, scope, device, swap, mount, and automount units.\n\nAdded in version 201."],
[4,19,"Takes a boolean argument. If `true`, this unit will be stopped when it is no longer used. Note that, in order to minimize the work to be executed, systemd will not stop units by default unless they are conflicting with other units, or the user explicitly requested their shut down. If this option is set, a unit will be automatically cleaned up if no other active unit requires it. Defaults to `false`.\n\nAdded in version 201."],
[4,20,"Takes a boolean argument. If `true`, this unit can only be activated or deactivated indirectly. In this case, explicit start-up or termination requested by the user is denied, however if it is started or stopped as a dependency of another unit, start-up or termination will succeed. This is mostly a safety feature to ensure that the user does not accidentally activate units that are not intended to be activated explicitly, and not accidentally deactivate units that are not intended to be deactivated. These options default to `false`.\n\nAdded in version 201."],
[4,21,"Takes a boolean argument. If `true`, this unit may be used with the **systemctl isolate** command. Otherwise, this will be refused. It probably is a good idea to leave this disabled except for target units that shall be used similar to runlevels in SysV init systems, just as a precaution to avoid unusable system states. This option defaults to `false`.\n\nAdded in version 201."],
[4,22,"Takes a boolean argument. If `yes`, (the default), a few default dependencies will implicitly be created for the unit. The actual dependencies created depend on the unit type. For example, for service units, these dependencies ensure that the service is started only after basic system initialization is completed and is properly terminated on system shutdown. See the respective man pages for details. Generally, only services involved with early boot or late shutdown should set this option to `no`. It is highly recommended to leave this option enabled for the majority of common units. If set to `no`, this option does not disable all implicit dependencies, just non-essential ones.\n\nAdded in version 201."],
[4,23,"Takes a boolean argument. Defaults to `no`. If `yes`, processes belonging to this unit will not be sent the final \"`SIGTERM`\" and \"`SIGKILL`\" signals during the final phase of the system shutdown process. This functionality replaces the older mechanism that allowed a program to set \"`argv[0][0] = '@'`\" as described at [systemd and Storage Daemons for the Root File System](https://systemd.io/ROOT_STORAGE_DAEMONS), which however continues to be supported.\n\nAdded in version 255."],
[4,24,"Tweaks the \"garbage collection\" algorithm for this unit. Takes one of `inactive` or `inactive-or-failed`. If set to `inactive` the unit will be unloaded if it is in the `inactive` state and is not referenced by clients, jobs or other units â€” however it is not unloaded if it is in the `failed` state. In `failed` mode, failed units are not unloaded until the user invoked **systemctl reset-failed** on them to reset the `failed` state, or an equivalent command. This behaviour is altered if this option is set to `inactive-or-failed`: in this case the unit is unloaded even if the unit is in a `failed` state, and thus an explicitly resetting of the `failed` state is not necessary. Note that if this mode is used unit results (such as exit codes, exit signals, consumed resources, â€¦) are flushed out immediately after the unit completed, except for what is stored in the logging subsystem. Defaults to `inactive`.\n\nAdded in version 236."],
[4,25,"Configure the action to take when the unit stops and enters a failed state or inactive state. Takes one of `none`, `reboot`, `reboot-force`, `reboot-immediate`, `poweroff`, `poweroff-force`, `poweroff-immediate`, `exit`, `exit-force`, `soft-reboot`, `soft-reboot-force`, `kexec`, `kexec-force`, `halt`, `halt-force` and `halt-immediate`. In system mode, all options are allowed. In user mode, only `none`, `exit`, `exit-force`, `soft-reboot` and `soft-reboot-force` are allowed. Both options default to `none`.\n\nIf `none` is set, no action will be triggered. `reboot` causes a reboot following the normal shutdown procedure (i.e. equivalent to **systemctl reboot**). `reboot-force` causes a forced reboot which will terminate all processes forcibly but should cause no dirty file systems on reboot (i.e. equivalent to **systemctl reboot -f**) and `reboot-immediate` causes immediate execution of the [reboot(2)](https://man7.org/linux/man-pages/man2/reboot.2.html) system call, which might result in data loss (i.e. equivalent to **systemctl reboot -ff**). Similarly, `poweroff`, `poweroff-force`, `poweroff-immediate`, `kexec`, `kexec-force`, `halt`, `halt-force` and `halt-immediate` have the effect of powering down the system, executing kexec, and halting the system respectively with similar semantics. `exit` causes the manager to exit following the normal shutdown procedure, and `exit-force` causes it terminate without shutting down services. When `exit` or `exit-force` is used by default the exit status of the main process of the unit (if this applies) is returned from the service manager. However, this may be overridden with `FailureActionExitStatus=`/`SuccessActionExitStatus=`, see below. `soft-reboot` will trigger a userspace reboot operation. `soft-reboot-force` does that too, but does not go through the shutdown transaction beforehand.\n\nAdded in version 236."],
[4,26,"Controls the exit status to propagate back to an invoking container manager (in case of a system service) or service manager (in case of a user manager) when the `FailureAction=`/`SuccessAction=` are set to `exit` or `exit-force` and the action is triggered. By default the exit status of the main process of the triggering unit (if this applies) is propagated. Takes a value in the range 0â€¦255 or the empty string to request default behaviour.\n\nAdded in version 240."],
[4,27,"`JobTimeoutSec=` specifies a timeout for the whole job that starts running when the job is queued. `JobRunningTimeoutSec=` specifies a timeout that starts running when the queued job is actually started. If either limit is reached, the job will be cancelled, the unit however will not change state or even enter the \"`failed`\" mode.\n\nBoth settings take a time span with the default unit of seconds, but other units may be specified, see [systemd.time(5)](systemd.time.html). The default is \"`infinity`\" (job timeouts disabled), except for device units where `JobRunningTimeoutSec=` defaults to `DefaultDeviceTimeoutSec=`.\n\nNote: these timeouts are independent from any unit-specific timeouts (for example, the timeout set with `TimeoutStartSec=` in service units). The job timeout has no effect on the unit itself. Or in other words: unit-specific timeouts are useful to abort unit state changes, and revert them. The job timeout set with this option however is useful to abort only the job waiting for the unit state to change.\n\nAdded in version 201."],
[4,28,"`JobTimeoutAction=` optionally configures an additional action to take when the timeout is hit, see description of `JobTimeoutSec=` and `JobRunningTimeoutSec=` above. It takes the same values as `StartLimitAction=`. Defaults to `none`.\n\n`JobTimeoutRebootArgument=` configures an optional reboot string to pass to the [reboot(2)](https://man7.org/linux/man-pages/man2/reboot.2.html) system call.\n\nAdded in version 240."],
[4,29,"Configure unit start rate limiting. Units which are started more than _`burst`_ times within an _`interval`_ time span are not permitted to start any more. Use `StartLimitIntervalSec=` to configure the checking interval and `StartLimitBurst=` to configure how many starts per interval are allowed.\n\n_`interval`_ is a time span with the default unit of seconds, but other units may be specified, see [systemd.time(5)](systemd.time.html). Defaults to `DefaultStartLimitIntervalSec=` in manager configuration file, and may be set to 0 to disable any kind of rate limiting. _`burst`_ is a number and defaults to `DefaultStartLimitBurst=` in manager configuration file.\n\nThese configuration options are particularly useful in conjunction with the service setting `Restart=` (see [systemd.service(5)](systemd.service.html)); however, they apply to all kinds of starts (including manual), not just those triggered by the `Restart=` logic.\n\nNote that units which are configured for `Restart=`, and which reach the start limit are not attempted to be restarted anymore; however, they may still be restarted manually or from a timer or socket at a later point, after the _`interval`_ has passed. From that point on, the restart logic is activated again. **systemctl reset-failed** will cause the restart rate counter for a service to be flushed, which is useful if the administrator wants to manually start a unit and the start limit interferes with that. Rate-limiting is enforced after any unit condition checks are executed, and hence unit activations with failing conditions do not count towards the rate limit.\n\nWhen a unit is unloaded due to the garbage collection logic (see above) its rate limit counters are flushed out too. This means that configuring start rate limiting for a unit that is not referenced continuously has no effect.\n\nThis setting does not apply to slice, target, device, and scope units, since they are unit types whose activation may either never fail, or may succeed only a single time.\n\nAdded in version 229."],
[4,30,"Configure an additional action to take if the rate limit configured with `StartLimitIntervalSec=` and `StartLimitBurst=` is hit. Takes the same values as the `FailureAction=`/`SuccessAction=` settings. If `none` is set, hitting the rate limit will trigger no action except that the start will not be permitted. Defaults to `none`.\n\nAdded in version 229."],
[4,31,"Configure the optional argument for the [reboot(2)](https://man7.org/linux/man-pages/man2/reboot.2.html) system call if `StartLimitAction=` or `FailureAction=` is a reboot action. This works just like the optional argument to **systemctl reboot** command.\n\nAdded in version 229."],
[4,32,"A path to a configuration file this unit has been generated from. This is primarily useful for implementation of generator tools that convert configuration from an external configuration file format into native unit files. This functionality should not be used in normal units.\n\nAdded in version 201."],
[4,33,"Check whether the system is running on a specific architecture. Takes one of \"`x86`\", \"`x86-64`\", \"`ppc`\", \"`ppc-le`\", \"`ppc64`\", \"`ppc64-le`\", \"`ia64`\", \"`parisc`\", \"`parisc64`\", \"`s390`\", \"`s390x`\", \"`sparc`\", \"`sparc64`\", \"`mips`\", \"`mips-le`\", \"`mips64`\", \"`mips64-le`\", \"`alpha`\", \"`arm`\", \"`arm-be`\", \"`arm64`\", \"`arm64-be`\", \"`sh`\", \"`sh64`\", \"`m68k`\", \"`tilegx`\", \"`cris`\", \"`arc`\", \"`arc-be`\", or \"`native`\".\n\nThe architecture is determined from the information returned by [uname(2)](https://man7.org/linux/man-pages/man2/uname.2.html) and is thus subject to [personality(2)](https://man7.org/linux/man-pages/man2/personality.2.html). Note that a `Personality=` setting in the same unit file has no effect on this condition. A special architecture name \"`native`\" is mapped to the architecture the system manager itself is compiled for. The test may be negated by prepending an exclamation mark.\n\nAdded in version 201."],
[4,34,"Check whether the system's firmware is of a certain type. The following values are possible:\n\n*   \"`uefi`\" matches systems with EFI.\n    \n*   \"`device-tree`\" matches systems with a device tree.\n    \n*   \"``device-tree-compatible(_`value`_)``\" matches systems with a device tree that are compatible with \"`value`\".\n    \n*   \"``smbios-field(_`field`_ _`operator`_ _`value`_)``\" matches systems with a SMBIOS field containing a certain value. _`field`_ is the name of the SMBIOS field exposed as \"`sysfs`\" attribute file below `/sys/class/dmi/id/`. _`operator`_ is one of \"`<`\", \"`<=`\", \"`>=`\", \"`>`\", \"`==`\", \"`<>`\" for version comparisons, \"`=`\" and \"`!=`\" for literal string comparisons, or \"`$=`\", \"`!$=`\" for shell-style glob comparisons. _`value`_ is the expected value of the SMBIOS field value (possibly containing shell style globs in case \"`$=`\"/\"`!$=`\" is used).\n    \n\nAdded in version 249."],
[4,35,"Check whether the system is executed in a virtualized environment and optionally test whether it is a specific implementation. Takes either boolean value to check if being executed in any virtualized environment, or one of \"`vm`\" and \"`container`\" to test against a generic type of virtualization solution, or one of \"`qemu`\", \"`kvm`\", \"`amazon`\", \"`zvm`\", \"`vmware`\", \"`microsoft`\", \"`oracle`\", \"`powervm`\", \"`xen`\", \"`bochs`\", \"`uml`\", \"`bhyve`\", \"`qnx`\", \"`apple`\", \"`sre`\", \"`openvz`\", \"`lxc`\", \"`lxc-libvirt`\", \"`systemd-nspawn`\", \"`docker`\", \"`podman`\", \"`rkt`\", \"`wsl`\", \"`proot`\", \"`pouch`\", \"`acrn`\" to test against a specific implementation, or \"`private-users`\" to check whether we are running in a user namespace. See [systemd-detect-virt(1)](systemd-detect-virt.html) for a full list of known virtualization technologies and their identifiers. If multiple virtualization technologies are nested, only the innermost is considered. The test may be negated by prepending an exclamation mark.\n\nAdded in version 244."],
[4,36,"`ConditionHost=` may be used to match against the hostname or machine ID of the host. This either takes a hostname string (optionally with shell style globs) which is tested against the locally set hostname as returned by [gethostname(2)](https://man7.org/linux/man-pages/man2/gethostname.2.html), or a machine ID formatted as string (see [machine-id(5)](machine-id.html)). The test may be negated by prepending an exclamation mark.\n\nAdded in version 244."],
[4,37,"`ConditionKernelCommandLine=` may be used to check whether a specific kernel command line option is set (or if prefixed with the exclamation mark â€” unset). The argument must either be a single word, or an assignment (i.e. two words, separated by \"`=`\"). In the former case the kernel command line is searched for the word appearing as is, or as left hand side of an assignment. In the latter case, the exact assignment is looked for with right and left hand side matching. This operates on the kernel command line communicated to userspace via `/proc/cmdline`, except when the service manager is invoked as payload of a container manager, in which case the command line of `PID 1` is used instead (i.e. `/proc/1/cmdline`).\n\nAdded in version 244."],
[4,38,"`ConditionKernelVersion=` may be used to check whether the kernel version (as reported by **uname -r**) matches a certain expression, or if prefixed with the exclamation mark, does not match. The argument must be a list of (potentially quoted) expressions. Each expression starts with one of \"`=`\" or \"`!=`\" for string comparisons, \"`<`\", \"`<=`\", \"`==`\", \"`<>`\", \"`>=`\", \"`>`\" for version comparisons, or \"`$=`\", \"`!$=`\" for a shell-style glob match. If no operator is specified, \"`$=`\" is implied.\n\nNote that using the kernel version string is an unreliable way to determine which features are supported by a kernel, because of the widespread practice of backporting drivers, features, and fixes from newer upstream kernels into older versions provided by distributions. Hence, this check is inherently unportable and should not be used for units which may be used on different distributions.\n\nAdded in version 244."],
[4,39,"`ConditionCredential=` may be used to check whether a credential by the specified name was passed into the service manager. See [System and Service Credentials](https://systemd.io/CREDENTIALS) for details about credentials. If used in services for the system service manager this may be used to conditionalize services based on system credentials passed in. If used in services for the per-user service manager this may be used to conditionalize services based on credentials passed into the `unit@.service` service instance belonging to the user. The argument must be a valid credential name.\n\nAdded in version 252."],
[4,40,"`ConditionEnvironment=` may be used to check whether a specific environment variable is set (or if prefixed with the exclamation mark â€” unset) in the service manager's environment block. The argument may be a single word, to check if the variable with this name is defined in the environment block, or an assignment (\"``_`name`_=_`value`_``\"), to check if the variable with this exact value is defined. Note that the environment block of the service manager itself is checked, i.e. not any variables defined with `Environment=` or `EnvironmentFile=`, as described above. This is particularly useful when the service manager runs inside a containerized environment or as per-user service manager, in order to check for variables passed in by the enclosing container manager or PAM.\n\nAdded in version 246."],
[4,41,"`ConditionSecurity=` may be used to check whether the given security technology is enabled on the system. Currently, the following values are recognized:\n\n**TableÂ 3.Â Recognized security technologies**\n\nValue\n\nDescription\n\nselinux\n\nSELinux MAC\n\napparmor\n\nAppArmor MAC\n\ntomoyo\n\nTomoyo MAC\n\nsmack\n\nSMACK MAC\n\nima\n\nIntegrity Measurement Architecture (IMA)\n\naudit\n\nLinux Audit Framework\n\nuefi-secureboot\n\nUEFI SecureBoot\n\ntpm2\n\nTrusted Platform Module 2.0 (TPM2)\n\ncvm\n\nConfidential virtual machine (SEV/TDX)\n\nmeasured-uki\n\nUnified Kernel Image with PCR 11 Measurements, as per [systemd-stub(7)](systemd-stub.html).\n\nAdded in version 255.\n\n  \n\nThe test may be negated by prepending an exclamation mark.\n\nAdded in version 244."],
[4,42,"Check whether the given capability exists in the capability bounding set of the service manager (i.e. this does not check whether capability is actually available in the permitted or effective sets, see [capabilities(7)](https://man7.org/linux/man-pages/man7/capabilities.7.html) for details). Pass a capability name such as \"`CAP_MKNOD`\", possibly prefixed with an exclamation mark to negate the check.\n\nAdded in version 244."],
[4,43,"Check whether the system has AC power, or is exclusively battery powered at the time of activation of the unit. This takes a boolean argument. If set to \"`true`\", the condition will hold only if at least one AC connector of the system is connected to a power source, or if no AC connectors are known. Conversely, if set to \"`false`\", the condition will hold only if there is at least one AC connector known and all AC connectors are disconnected from a power source.\n\nAdded in version 244."],
[4,44,"Takes one of `/var/` or `/etc/` as argument, possibly prefixed with a \"`!`\" (to invert the condition). This condition may be used to conditionalize units on whether the specified directory requires an update because `/usr/`'s modification time is newer than the stamp file `.updated` in the specified directory. This is useful to implement offline updates of the vendor operating system resources in `/usr/` that require updating of `/etc/` or `/var/` on the next following boot. Units making use of this condition should order themselves before [systemd-update-done.service(8)](systemd-update-done.service.html), to make sure they run before the stamp file's modification time gets reset indicating a completed update.\n\nIf the `systemd.condition-needs-update=` option is specified on the kernel command line (taking a boolean), it will override the result of this condition check, taking precedence over any file modification time checks. If the kernel command line option is used, `systemd-update-done.service` will not have immediate effect on any following `ConditionNeedsUpdate=` checks, until the system is rebooted where the kernel command line option is not specified anymore.\n\nNote that to make this scheme effective, the timestamp of `/usr/` should be explicitly updated after its contents are modified. The kernel will automatically update modification timestamp on a directory only when immediate children of a directory are modified; an modification of nested files will not automatically result in mtime of `/usr/` being updated.\n\nAlso note that if the update method includes a call to execute appropriate post-update steps itself, it should not touch the timestamp of `/usr/`. In a typical distribution packaging scheme, packages will do any required update steps as part of the installation or upgrade, to make package contents immediately usable. `ConditionNeedsUpdate=` should be used with other update mechanisms where such an immediate update does not happen.\n\nAdded in version 244."],
[4,45,"Takes a boolean argument. This condition may be used to conditionalize units on whether the system is booting up for the first time. This roughly means that `/etc/` was unpopulated when the system started booting (for details, see \"First Boot Semantics\" in [machine-id(5)](machine-id.html)). First boot is considered finished (this condition will evaluate as false) after the manager has finished the startup phase.\n\nThis condition may be used to populate `/etc/` on the first boot after factory reset, or when a new system instance boots up for the first time.\n\nFor robustness, units with `ConditionFirstBoot=yes` should order themselves before `first-boot-complete.target` and pull in this passive target with `Wants=`. This ensures that in a case of an aborted first boot, these units will be re-run during the next system startup.\n\nIf the `systemd.condition-first-boot=` option is specified on the kernel command line (taking a boolean), it will override the result of this condition check, taking precedence over `/etc/machine-id` existence checks.\n\nAdded in version 244."],
[4,46,"Check for the existence of a file. If the specified absolute path name does not exist, the condition will fail. If the absolute path name passed to `ConditionPathExists=` is prefixed with an exclamation mark (\"`!`\"), the test is negated, and the unit is only started if the path does not exist.\n\nAdded in version 244."],
[4,47,"`ConditionPathExistsGlob=` is similar to `ConditionPathExists=`, but checks for the existence of at least one file or directory matching the specified globbing pattern.\n\nAdded in version 244."],
[4,48,"`ConditionPathIsDirectory=` is similar to `ConditionPathExists=` but verifies that a certain path exists and is a directory.\n\nAdded in version 244."],
[4,49,"`ConditionPathIsSymbolicLink=` is similar to `ConditionPathExists=` but verifies that a certain path exists and is a symbolic link.\n\nAdded in version 244."],
[4,50,"`ConditionPathIsMountPoint=` is similar to `ConditionPathExists=` but verifies that a certain path exists and is a mount point.\n\nAdded in version 244."],
[4,51,"`ConditionPathIsReadWrite=` is similar to `ConditionPathExists=` but verifies that the underlying file system is readable and writable (i.e. not mounted read-only).\n\nAdded in version 244."],
[4,52,"`ConditionPathIsEncrypted=` is similar to `ConditionPathExists=` but verifies that the underlying file system's backing block device is encrypted using dm-crypt/LUKS. Note that this check does not cover ext4 per-directory encryption, and only detects block level encryption. Moreover, if the specified path resides on a file system on top of a loopback block device, only encryption above the loopback device is detected. It is not detected whether the file system backing the loopback block device is encrypted.\n\nAdded in version 246."],
[4,53,"`ConditionDirectoryNotEmpty=` is similar to `ConditionPathExists=` but verifies that a certain path exists and is a non-empty directory.\n\nAdded in version 244."],
[4,54,"`ConditionFileNotEmpty=` is similar to `ConditionPathExists=` but verifies that a certain path exists and refers to a regular file with a non-zero size.\n\nAdded in version 244."],
[4,55,"`ConditionFileIsExecutable=` is similar to `ConditionPathExists=` but verifies that a certain path exists, is a regular file, and marked executable.\n\nAdded in version 244."],
[4,56,"`ConditionUser=` takes a numeric \"`UID`\", a UNIX user name, or the special value \"`@system`\". This condition may be used to check whether the service manager is running as the given user. The special value \"`@system`\" can be used to check if the user id is within the system user range. This option is not useful for system services, as the system manager exclusively runs as the root user, and thus the test result is constant.\n\nAdded in version 244."],
[4,57,"`ConditionGroup=` is similar to `ConditionUser=` but verifies that the service manager's real or effective group, or any of its auxiliary groups, match the specified group or GID. This setting does not support the special value \"`@system`\".\n\nAdded in version 244."],
[4,58,"Check whether given cgroup controllers (e.g. \"`cpu`\") are available for use on the system or whether the legacy v1 cgroup or the modern v2 cgroup hierarchy is used.\n\nMultiple controllers may be passed with a space separating them; in this case the condition will only pass if all listed controllers are available for use. Controllers unknown to systemd are ignored. Valid controllers are \"`cpu`\", \"`io`\", \"`memory`\", and \"`pids`\". Even if available in the kernel, a particular controller may not be available if it was disabled on the kernel command line with `cgroup_disable=controller`.\n\nAlternatively, two special strings \"`v1`\" and \"`v2`\" may be specified (without any controller names). \"`v2`\" will pass if the unified v2 cgroup hierarchy is used, and \"`v1`\" will pass if the legacy v1 hierarchy or the hybrid hierarchy are used. Note that legacy or hybrid hierarchies have been deprecated. See [systemd(1)](systemd.html) for more information.\n\nAdded in version 244."],
[4,59,"Verify that the specified amount of system memory is available to the current system. Takes a memory size in bytes as argument, optionally prefixed with a comparison operator \"`<`\", \"`<=`\", \"`=`\" (or \"`==`\"), \"`!=`\" (or \"`<>`\"), \"`>=`\", \"`>`\". On bare-metal systems compares the amount of physical memory in the system with the specified size, adhering to the specified comparison operator. In containers compares the amount of memory assigned to the container instead.\n\nAdded in version 244."],
[4,60,"Verify that the specified number of CPUs is available to the current system. Takes a number of CPUs as argument, optionally prefixed with a comparison operator \"`<`\", \"`<=`\", \"`=`\" (or \"`==`\"), \"`!=`\" (or \"`<>`\"), \"`>=`\", \"`>`\". Compares the number of CPUs in the CPU affinity mask configured of the service manager itself with the specified number, adhering to the specified comparison operator. On physical systems the number of CPUs in the affinity mask of the service manager usually matches the number of physical CPUs, but in special and virtual environments might differ. In particular, in containers the affinity mask usually matches the number of CPUs assigned to the container and not the physically available ones.\n\nAdded in version 244."],
[4,61,"Verify that a given CPU feature is available via the \"`CPUID`\" instruction. This condition only does something on i386 and x86-64 processors. On other processors it is assumed that the CPU does not support the given feature. It checks the leaves \"`1`\", \"`7`\", \"`0x80000001`\", and \"`0x80000007`\". Valid values are: \"`fpu`\", \"`vme`\", \"`de`\", \"`pse`\", \"`tsc`\", \"`msr`\", \"`pae`\", \"`mce`\", \"`cx8`\", \"`apic`\", \"`sep`\", \"`mtrr`\", \"`pge`\", \"`mca`\", \"`cmov`\", \"`pat`\", \"`pse36`\", \"`clflush`\", \"`mmx`\", \"`fxsr`\", \"`sse`\", \"`sse2`\", \"`ht`\", \"`pni`\", \"`pclmul`\", \"`monitor`\", \"`ssse3`\", \"`fma3`\", \"`cx16`\", \"`sse4_1`\", \"`sse4_2`\", \"`movbe`\", \"`popcnt`\", \"`aes`\", \"`xsave`\", \"`osxsave`\", \"`avx`\", \"`f16c`\", \"`rdrand`\", \"`bmi1`\", \"`avx2`\", \"`bmi2`\", \"`rdseed`\", \"`adx`\", \"`sha_ni`\", \"`syscall`\", \"`rdtscp`\", \"`lm`\", \"`lahf_lm`\", \"`abm`\", \"`constant_tsc`\".\n\nAdded in version 248."],
[4,62,"Verify that a specific \"`key=value`\" pair is set in the host's [os-release(5)](os-release.html).\n\nOther than exact string matching (with \"`=`\" and \"`!=`\"), relative comparisons are supported for versioned parameters (e.g. \"`VERSION_ID`\"; with \"`<`\", \"`<=`\", \"`==`\", \"`<>`\", \"`>=`\", \"`>`\"), and shell-style wildcard comparisons (\"`*`\", \"`?`\", \"`[]`\") are supported with the \"`$=`\" (match) and \"`!$=`\" (non-match).\n\nAdded in version 249."],
[4,63,"Verify that the overall system (memory, CPU or IO) pressure is below or equal to a threshold. This setting takes a threshold value as argument. It can be specified as a simple percentage value, suffixed with \"`%`\", in which case the pressure will be measured as an average over the last five minutes before the attempt to start the unit is performed. Alternatively, the average timespan can also be specified using \"`/`\" as a separator, for example: \"`10%/1min`\". The supported timespans match what the kernel provides, and are limited to \"`10sec`\", \"`1min`\" and \"`5min`\". The \"`full`\" PSI will be checked first, and if not found \"`some`\" will be checked. For more details, see the documentation on [PSI (Pressure Stall Information)](https://docs.kernel.org/accounting/psi.html) .\n\nOptionally, the threshold value can be prefixed with the slice unit under which the pressure will be checked, followed by a \"`:`\". If the slice unit is not specified, the overall system pressure will be measured, instead of a particular cgroup's.\n\nAdded in version 250."],
[4,64,"Similar to the `ConditionArchitecture=`, `ConditionVirtualization=`, â€¦, condition settings described above, these settings add assertion checks to the start-up of the unit. However, unlike the conditions settings, any assertion setting that is not met results in failure of the start job (which means this is logged loudly). Note that hitting a configured assertion does not cause the unit to enter the \"`failed`\" state (or in fact result in any state change of the unit), it affects only the job queued for it. Use assertion expressions for units that cannot operate when specific requirements are not met, and when this is something the administrator or user should look into.\n\nAdded in version 218."],
[4,65,"A space-separated list of additional names this unit shall be installed under. The names listed here must have the same suffix (i.e. type) as the unit filename. This option may be specified more than once, in which case all listed names are used. At installation time, **systemctl enable** will create symlinks from these names to the unit filename. Note that not all unit types support such alias names, and this setting is not supported for them. Specifically, mount, slice, swap, and automount units do not support aliasing.\n\nAdded in version 201."],
[4,66,"This option may be used more than once, or a space-separated list of unit names may be given. A symbolic link is created in the `.wants/`, `.requires/`, or `.upholds/` directory of each of the listed units when this unit is installed by **systemctl enable**. This has the effect of a dependency of type `Wants=`, `Requires=`, or `Upholds=` being added from the listed unit to the current unit. See the description of the mentioned dependency types in the \\[Unit\\] section for details.\n\nIn case of template units listing non template units, the listing unit must have `DefaultInstance=` set, or **systemctl enable** must be called with an instance name. The instance (default or specified) will be added to the `.wants/`, `.requires/`, or `.upholds/` list of the listed unit. For example, **WantedBy=getty.target** in a service `getty@.service` will result in **systemctl enable getty@tty2.service** creating a `getty.target.wants/getty@tty2.service` link to `getty@.service`. This also applies to listing specific instances of templated units: this specific instance will gain the dependency. A template unit may also list a template unit, in which case a generic dependency will be added where each instance of the listing unit will have a dependency on an instance of the listed template with the same instance value. For example, **WantedBy=container@.target** in a service `monitor@.service` will result in **systemctl enable monitor@.service** creating a `container@.target.wants/monitor@.service` link to `monitor@.service`, which applies to all instances of `container@.target`.\n\nAdded in version 201."],
[4,67,"Additional units to install/deinstall when this unit is installed/deinstalled. If the user requests installation/deinstallation of a unit with this option configured, **systemctl enable** and **systemctl disable** will automatically install/uninstall units listed in this option as well.\n\nThis option may be used more than once, or a space-separated list of unit names may be given.\n\nAdded in version 201."],
[4,68,"In template unit files, this specifies for which instance the unit shall be enabled if the template is enabled without any explicitly set instance. This option has no effect in non-template unit files. The specified string must be usable as instance identifier.\n\nAdded in version 215."],
[2,"After","",10,3,1],
[2,"Alias","",65,3,2],
[2,"AllowIsolate","",21,3,1],
[2,"Also","",67,3,2],
[2,"AssertACPower","",64,3,1],
[2,"AssertArchitecture","",64,3,1],
[2,"AssertCPUFeature","",64,3,1],
[2,"AssertCPUPressure","",64,3,1],
[2,"AssertCPUs","",64,3,1],
[2,"AssertCapability","",64,3,1],
[2,"AssertControlGroupController","",64,3,1],
[2,"AssertCredential","",64,3,1],
[2,"AssertDirectoryNotEmpty","",64,3,1],
[2,"AssertEnvironment","",64,3,1],
[2,"AssertFileIsExecutable","",64,3,1],
[2,"AssertFileNotEmpty","",64,3,1],
[2,"AssertFirstBoot","",64,3,1],
[2,"AssertGroup","",64,3,1],
[2,"AssertHost","",64,3,1],
[2,"AssertIOPressure","",64,3,1],
[2,"AssertKernelCommandLine","",64,3,1],
[2,"AssertKernelVersion","",64,3,1],
[2,"AssertMemory","",64,3,1],
[2,"AssertMemoryPressure","",64,3,1],
[2,"AssertNeedsUpdate","",64,3,1],
[2,"AssertOSRelease","",64,3,1],
[2,"AssertPathExists","",64,3,1],
[2,"AssertPathExistsGlob","",64,3,1],
[2,"AssertPathIsDirectory","",64,3,1],
[2,"AssertPathIsEncrypted","",64,3,1],
[2,"AssertPathIsMountPoint","",64,3,1],
[2,"AssertPathIsReadWrite","",64,3,1],
[2,"AssertPathIsSymbolicLink","",64,3,1],
[2,"AssertSecurity","",64,3,1],
[2,"AssertUser","",64,3,1],
[2,"AssertVirtualization","",64,3,1],
[2,"Before","",10,3,1],
[2,"BindsTo","",6,3,1],
[2,"CollectMode","",24,3,1],
[2,"ConditionACPower","",43,3,1],
[2,"ConditionArchitecture","",33,3,1],
[2,"ConditionCPUFeature","",61,3,1],
[2,"ConditionCPUPressure","",63,3,1],
[2,"ConditionCPUs","",60,3,1],
[2,"ConditionCapability","",42,3,1],
[2,"ConditionControlGroupController","",58,3,1],
[2,"ConditionCredential","",39,3,1],
[2,"ConditionDirectoryNotEmpty","",53,3,1],
[2,"ConditionEnvironment","",40,3,1],
[2,"ConditionFileIsExecutable","",55,3,1],
[2,"ConditionFileNotEmpty","",54,3,1],
[2,"ConditionFirmware","",34,3,1],
[2,"ConditionFirstBoot","",45,3,1],
[2,"ConditionGroup","",57,3,1],
[2,"ConditionHost","",36,3,1],
[2,"ConditionIOPressure","",63,3,1],
[2,"ConditionKernelCommandLine","",37,3,1],
[2,"ConditionKernelVersion","",38,3,1],
[2,"ConditionMemory","",59,3,1],
[2,"ConditionMemoryPressure","",63,3,1],
[2,"ConditionNeedsUpdate","",44,3,1],
[2,"ConditionOSRelease","",62,3,1],
[2,"ConditionPathExists","",46,3,1],
[2,"ConditionPathExistsGlob","",47,3,1],
[2,"ConditionPathIsDirectory","",48,3,1],
[2,"ConditionPathIsEncrypted","",52,3,1],
[2,"ConditionPathIsMountPoint","",50,3,1],
[2,"ConditionPathIsReadWrite","",51,3,1],
[2,"ConditionPathIsSymbolicLink","",49,3,1],
[2,"ConditionSecurity","",41,3,1],
[2,"ConditionUser","",56,3,1],
[2,"ConditionVirtualization","",35,3,1],
[2,"Conflicts","",9,3,1],
[2,"DefaultDependencies","",22,3,1],
[2,"DefaultInstance","",68,3,2],
[2,"Description","",1,3,1],
[2,"Documentation","",2,3,1],
[2,"FailureAction","",25,3,1],
[2,"FailureActionExitStatus","",26,3,1],
[2,"IgnoreOnIsolate","",18,3,1],
[2,"JobRunningTimeoutSec","",27,3,1],
[2,"JobTimeoutAction","",28,3,1],
[2,"JobTimeoutRebootArgument","",28,3,1],
[2,"JobTimeoutSec","",27,3,1],
[2,"JoinsNamespaceOf","",15,3,1],
[2,"OnFailure","",11,3,1],
[2,"OnFailureJobMode","",17,3,1],
[2,"OnSuccess","",12,3,1],
[2,"OnSuccessJobMode","",17,3,1],
[2,"PartOf","",7,3,1],
[2,"PropagatesReloadTo","",13,3,1],
[2,"PropagatesStopTo","",14,3,1],
[2,"RebootArgument","",31,3,1],
[2,"RefuseManualStart","",20,3,1],
[2,"RefuseManualStop","",20,3,1],
[2,"ReloadPropagatedFrom","",13,3,1],
[2,"RequiredBy","",66,3,2],
[2,"Requires","",4,3,1],
[2,"RequiresMountsFor","",16,3,1],
[2,"Requisite","",5,3,1],
[2,"SourcePath","",32,3,1],
[2,"StartLimitAction","",30,3,1],
[2,"StartLimitBurst","burst",29,3,1],
[2,"StartLimitIntervalSec","interval",29,3,1],
[2,"StopPropagatedFrom","",14,3,1],
[2,"StopWhenUnneeded","",19,3,1],
[2,"SuccessAction","",25,3,1],
[2,"SuccessActionExitStatus","",26,3,1],
[2,"SurviveFinalKillSignal","",23,3,1],
[2,"UpheldBy","",66,3,2],
[2,"Upholds","",8,3,1],
[2,"WantedBy","",66,3,2],
[2,"Wants","",3,3,1],
[3,4,"systemd.resource-control(5)","systemd.resource-control â€” Resource control unit settings","systemd.resource-control.html"],
[4,69,"Turn on CPU usage accounting for this unit. Takes a boolean argument. Note that turning on CPU accounting for one unit will also implicitly turn it on for all units contained in the same slice and for all its parent slices and the units contained therein. The system default for this setting may be controlled with `DefaultCPUAccounting=` in [systemd-system.conf(5)](systemd-system.conf.html).\n\nUnder the unified cgroup hierarchy, CPU accounting is available for all units and this setting has no effect.\n\nAdded in version 208."],
[4,70,"These settings control the `cpu` controller in the unified hierarchy.\n\nThese options accept an integer value or a the special string \"idle\":\n\n*   If set to an integer value, assign the specified CPU time weight to the processes executed, if the unified control group hierarchy is used on the system. These options control the \"`cpu.weight`\" control group attribute. The allowed range is 1 to 10000. Defaults to unset, but the kernel default is 100. For details about this control group attribute, see [Control Groups v2](https://docs.kernel.org/admin-guide/cgroup-v2.html) and [CFS Scheduler](https://docs.kernel.org/scheduler/sched-design-CFS.html). The available CPU time is split up among all units within one slice relative to their CPU time weight. A higher weight means more CPU time, a lower weight means less.\n    \n*   If set to the special string \"idle\", mark the cgroup for \"idle scheduling\", which means that it will get CPU resources only when there are no processes not marked in this way to execute in this cgroup or its siblings. This setting corresponds to the \"`cpu.idle`\" cgroup attribute.\n    \n    Note that this value only has an effect on cgroup-v2, for cgroup-v1 it is equivalent to the minimum weight.\n    \n\nWhile `StartupCPUWeight=` applies to the startup and shutdown phases of the system, `CPUWeight=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupCPUWeight=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.\n\nIn addition to the resource allocation performed by the `cpu` controller, the kernel may automatically divide resources based on session-id grouping, see \"The autogroup feature\" in [sched(7)](https://man7.org/linux/man-pages/man7/sched.7.html). The effect of this feature is similar to the `cpu` controller with no explicit configuration, so users should be careful to not mistake one for the other.\n\nAdded in version 232."],
[4,71,"This setting controls the `cpu` controller in the unified hierarchy.\n\nAssign the specified CPU time quota to the processes executed. Takes a percentage value, suffixed with \"%\". The percentage specifies how much CPU time the unit shall get at maximum, relative to the total CPU time available on one CPU. Use values > 100% for allotting CPU time on more than one CPU. This controls the \"`cpu.max`\" attribute on the unified control group hierarchy and \"`cpu.cfs_quota_us`\" on legacy. For details about these control group attributes, see [Control Groups v2](https://docs.kernel.org/admin-guide/cgroup-v2.html) and [CFS Bandwidth Control](https://docs.kernel.org/scheduler/sched-bwc.html). Setting `CPUQuota=` to an empty value unsets the quota.\n\nExample: `CPUQuota=20%` ensures that the executed processes will never get more than 20% CPU time on one CPU.\n\nAdded in version 213."],
[4,72,"This setting controls the `cpu` controller in the unified hierarchy.\n\nAssign the duration over which the CPU time quota specified by `CPUQuota=` is measured. Takes a time duration value in seconds, with an optional suffix such as \"ms\" for milliseconds (or \"s\" for seconds.) The default setting is 100ms. The period is clamped to the range supported by the kernel, which is \\[1ms, 1000ms\\]. Additionally, the period is adjusted up so that the quota interval is also at least 1ms. Setting `CPUQuotaPeriodSec=` to an empty value resets it to the default.\n\nThis controls the second field of \"`cpu.max`\" attribute on the unified control group hierarchy and \"`cpu.cfs_period_us`\" on legacy. For details about these control group attributes, see [Control Groups v2](https://docs.kernel.org/admin-guide/cgroup-v2.html) and [CFS Scheduler](https://docs.kernel.org/scheduler/sched-design-CFS.html).\n\nExample: `CPUQuotaPeriodSec=10ms` to request that the CPU quota is measured in periods of 10ms.\n\nAdded in version 242."],
[4,73,"This setting controls the `cpuset` controller in the unified hierarchy.\n\nRestrict processes to be executed on specific CPUs. Takes a list of CPU indices or ranges separated by either whitespace or commas. CPU ranges are specified by the lower and upper CPU indices separated by a dash.\n\nSetting `AllowedCPUs=` or `StartupAllowedCPUs=` doesn't guarantee that all of the CPUs will be used by the processes as it may be limited by parent units. The effective configuration is reported as `EffectiveCPUs=`.\n\nWhile `StartupAllowedCPUs=` applies to the startup and shutdown phases of the system, `AllowedCPUs=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupAllowedCPUs=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.\n\nThis setting is supported only with the unified control group hierarchy.\n\nAdded in version 244."],
[4,74,"This setting controls the `memory` controller in the unified hierarchy.\n\nTurn on process and kernel memory accounting for this unit. Takes a boolean argument. Note that turning on memory accounting for one unit will also implicitly turn it on for all units contained in the same slice and for all its parent slices and the units contained therein. The system default for this setting may be controlled with `DefaultMemoryAccounting=` in [systemd-system.conf(5)](systemd-system.conf.html).\n\nAdded in version 208."],
[4,75,"These settings control the `memory` controller in the unified hierarchy.\n\nSpecify the memory usage protection of the executed processes in this unit. When reclaiming memory, the unit is treated as if it was using less memory resulting in memory to be preferentially reclaimed from unprotected units. Using `MemoryLow=` results in a weaker protection where memory may still be reclaimed to avoid invoking the OOM killer in case there is no other reclaimable memory.\n\nFor a protection to be effective, it is generally required to set a corresponding allocation on all ancestors, which is then distributed between children (with the exception of the root slice). Any `MemoryMin=` or `MemoryLow=` allocation that is not explicitly distributed to specific children is used to create a shared protection for all children. As this is a shared protection, the children will freely compete for the memory.\n\nTakes a memory size in bytes. If the value is suffixed with K, M, G or T, the specified memory size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively. Alternatively, a percentage value may be specified, which is taken relative to the installed physical memory on the system. If assigned the special value \"`infinity`\", all available memory is protected, which may be useful in order to always inherit all of the protection afforded by ancestors. This controls the \"`memory.min`\" or \"`memory.low`\" control group attribute. For details about this control group attribute, see [Memory Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#memory-interface-files).\n\nUnits may have their children use a default \"`memory.min`\" or \"`memory.low`\" value by specifying `DefaultMemoryMin=` or `DefaultMemoryLow=`, which has the same semantics as `MemoryMin=` and `MemoryLow=`, or `DefaultStartupMemoryLow=` which has the same semantics as `StartupMemoryLow=`. This setting does not affect \"`memory.min`\" or \"`memory.low`\" in the unit itself. Using it to set a default child allocation is only useful on kernels older than 5.7, which do not support the \"`memory_recursiveprot`\" cgroup2 mount option.\n\nWhile `StartupMemoryLow=` applies to the startup and shutdown phases of the system, `MemoryMin=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupMemoryLow=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.\n\nAdded in version 240."],
[4,76,"These settings control the `memory` controller in the unified hierarchy.\n\nSpecify the throttling limit on memory usage of the executed processes in this unit. Memory usage may go above the limit if unavoidable, but the processes are heavily slowed down and memory is taken away aggressively in such cases. This is the main mechanism to control memory usage of a unit.\n\nTakes a memory size in bytes. If the value is suffixed with K, M, G or T, the specified memory size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively. Alternatively, a percentage value may be specified, which is taken relative to the installed physical memory on the system. If assigned the special value \"`infinity`\", no memory throttling is applied. This controls the \"`memory.high`\" control group attribute. For details about this control group attribute, see [Memory Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#memory-interface-files).\n\nWhile `StartupMemoryHigh=` applies to the startup and shutdown phases of the system, `MemoryHigh=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupMemoryHigh=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.\n\nAdded in version 231."],
[4,77,"These settings control the `memory` controller in the unified hierarchy.\n\nSpecify the absolute limit on memory usage of the executed processes in this unit. If memory usage cannot be contained under the limit, out-of-memory killer is invoked inside the unit. It is recommended to use `MemoryHigh=` as the main control mechanism and use `MemoryMax=` as the last line of defense.\n\nTakes a memory size in bytes. If the value is suffixed with K, M, G or T, the specified memory size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively. Alternatively, a percentage value may be specified, which is taken relative to the installed physical memory on the system. If assigned the special value \"`infinity`\", no memory limit is applied. This controls the \"`memory.max`\" control group attribute. For details about this control group attribute, see [Memory Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#memory-interface-files).\n\nWhile `StartupMemoryMax=` applies to the startup and shutdown phases of the system, `MemoryMax=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupMemoryMax=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.\n\nAdded in version 231."],
[4,78,"These settings control the `memory` controller in the unified hierarchy.\n\nSpecify the absolute limit on swap usage of the executed processes in this unit.\n\nTakes a swap size in bytes. If the value is suffixed with K, M, G or T, the specified swap size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively. If assigned the special value \"`infinity`\", no swap limit is applied. These settings control the \"`memory.swap.max`\" control group attribute. For details about this control group attribute, see [Memory Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#memory-interface-files).\n\nWhile `StartupMemorySwapMax=` applies to the startup and shutdown phases of the system, `MemorySwapMax=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupMemorySwapMax=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.\n\nAdded in version 232."],
[4,79,"These settings control the `memory` controller in the unified hierarchy.\n\nSpecify the absolute limit on zswap usage of the processes in this unit. Zswap is a lightweight compressed cache for swap pages. It takes pages that are in the process of being swapped out and attempts to compress them into a dynamically allocated RAM-based memory pool. If the limit specified is hit, no entries from this unit will be stored in the pool until existing entries are faulted back or written out to disk. See the kernel's [Zswap](https://www.kernel.org/doc/html/latest/admin-guide/mm/zswap.html) documentation for more details.\n\nTakes a size in bytes. If the value is suffixed with K, M, G or T, the specified size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively. If assigned the special value \"`infinity`\", no limit is applied. These settings control the \"`memory.zswap.max`\" control group attribute. For details about this control group attribute, see [Memory Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#memory-interface-files).\n\nWhile `StartupMemoryZSwapMax=` applies to the startup and shutdown phases of the system, `MemoryZSwapMax=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupMemoryZSwapMax=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.\n\nAdded in version 253."],
[4,80,"These settings control the `cpuset` controller in the unified hierarchy.\n\nRestrict processes to be executed on specific memory NUMA nodes. Takes a list of memory NUMA nodes indices or ranges separated by either whitespace or commas. Memory NUMA nodes ranges are specified by the lower and upper NUMA nodes indices separated by a dash.\n\nSetting `AllowedMemoryNodes=` or `StartupAllowedMemoryNodes=` doesn't guarantee that all of the memory NUMA nodes will be used by the processes as it may be limited by parent units. The effective configuration is reported as `EffectiveMemoryNodes=`.\n\nWhile `StartupAllowedMemoryNodes=` applies to the startup and shutdown phases of the system, `AllowedMemoryNodes=` applies to normal runtime of the system, and if the former is not set also to the startup and shutdown phases. Using `StartupAllowedMemoryNodes=` allows prioritizing specific services at boot-up and shutdown differently than during normal runtime.\n\nThis setting is supported only with the unified control group hierarchy.\n\nAdded in version 244."],
[4,81,"This setting controls the `pids` controller in the unified hierarchy.\n\nTurn on task accounting for this unit. Takes a boolean argument. If enabled, the kernel will keep track of the total number of tasks in the unit and its children. This number includes both kernel threads and userspace processes, with each thread counted individually. Note that turning on tasks accounting for one unit will also implicitly turn it on for all units contained in the same slice and for all its parent slices and the units contained therein. The system default for this setting may be controlled with `DefaultTasksAccounting=` in [systemd-system.conf(5)](systemd-system.conf.html).\n\nAdded in version 227."],
[4,82,"This setting controls the `pids` controller in the unified hierarchy.\n\nSpecify the maximum number of tasks that may be created in the unit. This ensures that the number of tasks accounted for the unit (see above) stays below a specific limit. This either takes an absolute number of tasks or a percentage value that is taken relative to the configured maximum number of tasks on the system. If assigned the special value \"`infinity`\", no tasks limit is applied. This controls the \"`pids.max`\" control group attribute. For details about this control group attribute, the [pids controller](https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v2.html#pid) .\n\nThe system default for this setting may be controlled with `DefaultTasksMax=` in [systemd-system.conf(5)](systemd-system.conf.html).\n\nAdded in version 227."],
[4,83,"This setting controls the `io` controller in the unified hierarchy.\n\nTurn on Block I/O accounting for this unit, if the unified control group hierarchy is used on the system. Takes a boolean argument. Note that turning on block I/O accounting for one unit will also implicitly turn it on for all units contained in the same slice and all for its parent slices and the units contained therein. The system default for this setting may be controlled with `DefaultIOAccounting=` in [systemd-system.conf(5)](systemd-system.conf.html).\n\nAdded in version 230."],
[4,84,"These settings control the `io` controller in the unified hierarchy.\n\nSet the default overall block I/O weight for the executed processes, if the unified control group hierarchy is used on the system. Takes a single weight value (between 1 and 10000) to set the default block I/O weight. This controls the \"`io.weight`\" control group attribute, which defaults to 100. For details about this control group attribute, see [IO Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#io-interface-files). The available I/O bandwidth is split up among all units within one slice relative to their block I/O weight. A higher weight means more I/O bandwidth, a lower weight means less.\n\nWhile `StartupIOWeight=` applies to the startup and shutdown phases of the system, `IOWeight=` applies to the later runtime of the system, and if the former is not set also to the startup and shutdown phases. This allows prioritizing specific services at boot-up and shutdown differently than during runtime.\n\nAdded in version 230."],
[4,85,"This setting controls the `io` controller in the unified hierarchy.\n\nSet the per-device overall block I/O weight for the executed processes, if the unified control group hierarchy is used on the system. Takes a space-separated pair of a file path and a weight value to specify the device specific weight value, between 1 and 10000. (Example: \"`/dev/sda 1000`\"). The file path may be specified as path to a block device node or as any other file, in which case the backing block device of the file system of the file is determined. This controls the \"`io.weight`\" control group attribute, which defaults to 100. Use this option multiple times to set weights for multiple devices. For details about this control group attribute, see [IO Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#io-interface-files).\n\nThe specified device node should reference a block device that has an I/O scheduler associated, i.e. should not refer to partition or loopback block devices, but to the originating, physical device. When a path to a regular file or directory is specified it is attempted to discover the correct originating device backing the file system of the specified path. This works correctly only for simpler cases, where the file system is directly placed on a partition or physical block device, or where simple 1:1 encryption using dm-crypt/LUKS is used. This discovery does not cover complex storage and in particular RAID and volume management storage devices.\n\nAdded in version 230."],
[4,86,"These settings control the `io` controller in the unified hierarchy.\n\nSet the per-device overall block I/O bandwidth maximum limit for the executed processes, if the unified control group hierarchy is used on the system. This limit is not work-conserving and the executed processes are not allowed to use more even if the device has idle capacity. Takes a space-separated pair of a file path and a bandwidth value (in bytes per second) to specify the device specific bandwidth. The file path may be a path to a block device node, or as any other file in which case the backing block device of the file system of the file is used. If the bandwidth is suffixed with K, M, G, or T, the specified bandwidth is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes, respectively, to the base of 1000. (Example: \"/dev/disk/by-path/pci-0000:00:1f.2-scsi-0:0:0:0 5M\"). This controls the \"`io.max`\" control group attributes. Use this option multiple times to set bandwidth limits for multiple devices. For details about this control group attribute, see [IO Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#io-interface-files).\n\nSimilar restrictions on block device discovery as for `IODeviceWeight=` apply, see above.\n\nAdded in version 230."],
[4,87,"These settings control the `io` controller in the unified hierarchy.\n\nSet the per-device overall block I/O IOs-Per-Second maximum limit for the executed processes, if the unified control group hierarchy is used on the system. This limit is not work-conserving and the executed processes are not allowed to use more even if the device has idle capacity. Takes a space-separated pair of a file path and an IOPS value to specify the device specific IOPS. The file path may be a path to a block device node, or as any other file in which case the backing block device of the file system of the file is used. If the IOPS is suffixed with K, M, G, or T, the specified IOPS is parsed as KiloIOPS, MegaIOPS, GigaIOPS, or TeraIOPS, respectively, to the base of 1000. (Example: \"/dev/disk/by-path/pci-0000:00:1f.2-scsi-0:0:0:0 1K\"). This controls the \"`io.max`\" control group attributes. Use this option multiple times to set IOPS limits for multiple devices. For details about this control group attribute, see [IO Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#io-interface-files).\n\nSimilar restrictions on block device discovery as for `IODeviceWeight=` apply, see above.\n\nAdded in version 230."],
[4,88,"This setting controls the `io` controller in the unified hierarchy.\n\nSet the per-device average target I/O latency for the executed processes, if the unified control group hierarchy is used on the system. Takes a file path and a timespan separated by a space to specify the device specific latency target. (Example: \"/dev/sda 25ms\"). The file path may be specified as path to a block device node or as any other file, in which case the backing block device of the file system of the file is determined. This controls the \"`io.latency`\" control group attribute. Use this option multiple times to set latency target for multiple devices. For details about this control group attribute, see [IO Interface Files](https://docs.kernel.org/admin-guide/cgroup-v2.html#io-interface-files).\n\nImplies \"`IOAccounting=yes`\".\n\nThese settings are supported only if the unified control group hierarchy is used.\n\nSimilar restrictions on block device discovery as for `IODeviceWeight=` apply, see above.\n\nAdded in version 240."],
[4,89,"Takes a boolean argument. If true, turns on IPv4 and IPv6 network traffic accounting for packets sent or received by the unit. When this option is turned on, all IPv4 and IPv6 sockets created by any process of the unit are accounted for.\n\nWhen this option is used in socket units, it applies to all IPv4 and IPv6 sockets associated with it (including both listening and connection sockets where this applies). Note that for socket-activated services, this configuration setting and the accounting data of the service unit and the socket unit are kept separate, and displayed separately. No propagation of the setting and the collected statistics is done, in either direction. Moreover, any traffic sent or received on any of the socket unit's sockets is accounted to the socket unit â€” and never to the service unit it might have activated, even if the socket is used by it.\n\nThe system default for this setting may be controlled with `DefaultIPAccounting=` in [systemd-system.conf(5)](systemd-system.conf.html).\n\nAdded in version 235."],
[4,90,"Turn on network traffic filtering for IP packets sent and received over `AF_INET` and `AF_INET6` sockets. Both directives take a space separated list of IPv4 or IPv6 addresses, each optionally suffixed with an address prefix length in bits after a \"`/`\" character. If the suffix is omitted, the address is considered a host address, i.e. the filter covers the whole address (32 bits for IPv4, 128 bits for IPv6).\n\nThe access lists configured with this option are applied to all sockets created by processes of this unit (or in the case of socket units, associated with it). The lists are implicitly combined with any lists configured for any of the parent slice units this unit might be a member of. By default both access lists are empty. Both ingress and egress traffic is filtered by these settings. In case of ingress traffic the source IP address is checked against these access lists, in case of egress traffic the destination IP address is checked. The following rules are applied in turn:\n\n*   Access is granted when the checked IP address matches an entry in the `IPAddressAllow=` list.\n    \n*   Otherwise, access is denied when the checked IP address matches an entry in the `IPAddressDeny=` list.\n    \n*   Otherwise, access is granted.\n    \n\nIn order to implement an allow-listing IP firewall, it is recommended to use a `IPAddressDeny=``any` setting on an upper-level slice unit (such as the root slice `-.slice` or the slice containing all system services `system.slice` â€“ see [systemd.special(7)](systemd.special.html) for details on these slice units), plus individual per-service `IPAddressAllow=` lines permitting network access to relevant services, and only them.\n\nNote that for socket-activated services, the IP access list configured on the socket unit applies to all sockets associated with it directly, but not to any sockets created by the ultimately activated services for it. Conversely, the IP access list configured for the service is not applied to any sockets passed into the service via socket activation. Thus, it is usually a good idea to replicate the IP access lists on both the socket and the service unit. Nevertheless, it may make sense to maintain one list more open and the other one more restricted, depending on the use case.\n\nIf these settings are used multiple times in the same unit the specified lists are combined. If an empty string is assigned to these settings the specific access list is reset and all previous settings undone.\n\nIn place of explicit IPv4 or IPv6 address and prefix length specifications a small set of symbolic names may be used. The following names are defined:\n\n**TableÂ 1.Â Special address/network names**\n\nSymbolic Name\n\nDefinition\n\nMeaning\n\n`any`\n\n0.0.0.0/0 ::/0\n\nAny host\n\n`localhost`\n\n127.0.0.0/8 ::1/128\n\nAll addresses on the local loopback\n\n`link-local`\n\n169.254.0.0/16 fe80::/64\n\nAll link-local IP addresses\n\n`multicast`\n\n224.0.0.0/4 ff00::/8\n\nAll IP multicasting addresses\n\n  \n\nNote that these settings might not be supported on some systems (for example if eBPF control group support is not enabled in the underlying kernel or container manager). These settings will have no effect in that case. If compatibility with such systems is desired it is hence recommended to not exclusively rely on them for IP security.\n\nThis option cannot be bypassed by prefixing \"`+`\" to the executable path in the service unit, as it applies to the whole control group.\n\nAdded in version 235."],
[4,91,"Allow or deny binding a socket address to a socket by matching it with the _`bind-rule`_ and applying a corresponding action if there is a match.\n\n_`bind-rule`_ describes socket properties such as _`address-family`_, _`transport-protocol`_ and _`ip-ports`_.\n\n_`bind-rule`_ := { \\[_`address-family`_`:`\\]\\[_`transport-protocol`_`:`\\]\\[_`ip-ports`_\\] | `any` }\n\n_`address-family`_ := { `ipv4` | `ipv6` }\n\n_`transport-protocol`_ := { `tcp` | `udp` }\n\n_`ip-ports`_ := { _`ip-port`_ | _`ip-port-range`_ }\n\nAn optional _`address-family`_ expects `ipv4` or `ipv6` values. If not specified, a rule will be matched for both IPv4 and IPv6 addresses and applied depending on other socket fields, e.g. _`transport-protocol`_, _`ip-port`_.\n\nAn optional _`transport-protocol`_ expects `tcp` or `udp` transport protocol names. If not specified, a rule will be matched for any transport protocol.\n\nAn optional _`ip-port`_ value must lie within 1â€¦65535 interval inclusively, i.e. dynamic port `0` is not allowed. A range of sequential ports is described by _`ip-port-range`_ := _`ip-port-low`_`-`_`ip-port-high`_, where _`ip-port-low`_ is smaller than or equal to _`ip-port-high`_ and both are within 1â€¦65535 inclusively.\n\nA special value `any` can be used to apply a rule to any address family, transport protocol and any port with a positive value.\n\nTo allow multiple rules assign `SocketBindAllow=` or `SocketBindDeny=` multiple times. To clear the existing assignments pass an empty `SocketBindAllow=` or `SocketBindDeny=` assignment.\n\nFor each of `SocketBindAllow=` and `SocketBindDeny=`, maximum allowed number of assignments is `128`.\n\n*   Binding to a socket is allowed when a socket address matches an entry in the `SocketBindAllow=` list.\n    \n*   Otherwise, binding is denied when the socket address matches an entry in the `SocketBindDeny=` list.\n    \n*   Otherwise, binding is allowed.\n    \n\nThe feature is implemented with `cgroup/bind4` and `cgroup/bind6` cgroup-bpf hooks.\n\nExamples:\n\nâ€¦\n# Allow binding IPv6 socket addresses with a port greater than or equal to 10000.\n\\[Service\\]\nSocketBindAllow=ipv6:10000-65535\nSocketBindDeny=any\nâ€¦\n# Allow binding IPv4 and IPv6 socket addresses with 1234 and 4321 ports.\n\\[Service\\]\nSocketBindAllow=1234\nSocketBindAllow=4321\nSocketBindDeny=any\nâ€¦\n# Deny binding IPv6 socket addresses.\n\\[Service\\]\nSocketBindDeny=ipv6\nâ€¦\n# Deny binding IPv4 and IPv6 socket addresses.\n\\[Service\\]\nSocketBindDeny=any\nâ€¦\n# Allow binding only over TCP\n\\[Service\\]\nSocketBindAllow=tcp\nSocketBindDeny=any\nâ€¦\n# Allow binding only over IPv6/TCP\n\\[Service\\]\nSocketBindAllow=ipv6:tcp\nSocketBindDeny=any\nâ€¦\n# Allow binding ports within 10000-65535 range over IPv4/UDP.\n\\[Service\\]\nSocketBindAllow=ipv4:udp:10000-65535\nSocketBindDeny=any\nâ€¦\n\nThis option cannot be bypassed by prefixing \"`+`\" to the executable path in the service unit, as it applies to the whole control group.\n\nAdded in version 249."],
[4,92,"Takes a list of space-separated network interface names. This option restricts the network interfaces that processes of this unit can use. By default processes can only use the network interfaces listed (allow-list). If the first character of the rule is \"`~`\", the effect is inverted: the processes can only use network interfaces not listed (deny-list).\n\nThis option can appear multiple times, in which case the network interface names are merged. If the empty string is assigned the set is reset, all prior assignments will have not effect.\n\nIf you specify both types of this option (i.e. allow-listing and deny-listing), the first encountered will take precedence and will dictate the default action (allow vs deny). Then the next occurrences of this option will add or delete the listed network interface names from the set, depending of its type and the default action.\n\nThe loopback interface (\"lo\") is not treated in any special way, you have to configure it explicitly in the unit file.\n\nExample 1: allow-list\n\nRestrictNetworkInterfaces=eth1\nRestrictNetworkInterfaces=eth2\n\nPrograms in the unit will be only able to use the eth1 and eth2 network interfaces.\n\nExample 2: deny-list\n\nRestrictNetworkInterfaces=~eth1 eth2\n\nPrograms in the unit will be able to use any network interface but eth1 and eth2.\n\nExample 3: mixed\n\nRestrictNetworkInterfaces=eth1 eth2\nRestrictNetworkInterfaces=~eth1\n\nPrograms in the unit will be only able to use the eth2 network interface.\n\nThis option cannot be bypassed by prefixing \"`+`\" to the executable path in the service unit, as it applies to the whole control group.\n\nAdded in version 250."],
[4,93,"This setting provides a method for integrating dynamic cgroup, user and group IDs into firewall rules with [NFT](https://netfilter.org/projects/nftables/index.html) sets. The benefit of using this setting is to be able to use the IDs as selectors in firewall rules easily and this in turn allows more fine grained filtering. NFT rules for cgroup matching use numeric cgroup IDs, which change every time a service is restarted, making them hard to use in systemd environment otherwise. Dynamic and random IDs used by `DynamicUser=` can be also integrated with this setting.\n\nThis option expects a whitespace separated list of NFT set definitions. Each definition consists of a colon-separated tuple of source type (one of \"`cgroup`\", \"`user`\" or \"`group`\"), NFT address family (one of \"`arp`\", \"`bridge`\", \"`inet`\", \"`ip`\", \"`ip6`\", or \"`netdev`\"), table name and set name. The names of tables and sets must conform to lexical restrictions of NFT table names. The type of the element used in the NFT filter must match the type implied by the directive (\"`cgroup`\", \"`user`\" or \"`group`\") as shown in the table below. When a control group or a unit is realized, the corresponding ID will be appended to the NFT sets and it will be be removed when the control group or unit is removed. **systemd** only inserts elements to (or removes from) the sets, so the related NFT rules, tables and sets must be prepared elsewhere in advance. Failures to manage the sets will be ignored.\n\n**TableÂ 2.Â Defined `source type` values**\n\nSource type\n\nDescription\n\nCorresponding NFT type name\n\n\"`cgroup`\"\n\ncontrol group ID\n\n\"`cgroupsv2`\"\n\n\"`user`\"\n\nuser ID\n\n\"`meta skuid`\"\n\n\"`group`\"\n\ngroup ID\n\n\"`meta skgid`\"\n\n  \n\nIf the firewall rules are reinstalled so that the contents of NFT sets are destroyed, command **systemctl daemon-reload** can be used to refill the sets.\n\nExample:\n\n\\[Unit\\]\nNFTSet=cgroup:inet:filter:my\\_service user:inet:filter:serviceuser\n\nCorresponding NFT rules:\n\ntable inet filter {\n        set my\\_service {\n                type cgroupsv2\n        }\n        set serviceuser {\n                typeof meta skuid\n        }\n        chain x {\n                socket cgroupv2 level 2 @my\\_service accept\n                drop\n        }\n        chain y {\n                meta skuid @serviceuser accept\n                drop\n        }\n}\n\nAdded in version 255."],
[4,94,"Add custom network traffic filters implemented as BPF programs, applying to all IP packets sent and received over `AF_INET` and `AF_INET6` sockets. Takes an absolute path to a pinned BPF program in the BPF virtual filesystem (`/sys/fs/bpf/`).\n\nThe filters configured with this option are applied to all sockets created by processes of this unit (or in the case of socket units, associated with it). The filters are loaded in addition to filters any of the parent slice units this unit might be a member of as well as any `IPAddressAllow=` and `IPAddressDeny=` filters in any of these units. By default there are no filters specified.\n\nIf these settings are used multiple times in the same unit all the specified programs are attached. If an empty string is assigned to these settings the program list is reset and all previous specified programs ignored.\n\nIf the path _`BPF_FS_PROGRAM_PATH`_ in `IPIngressFilterPath=` assignment is already being handled by `BPFProgram=` ingress hook, e.g. `BPFProgram=``ingress`:_`BPF_FS_PROGRAM_PATH`_, the assignment will be still considered valid and the program will be attached to a cgroup. Same for `IPEgressFilterPath=` path and `egress` hook.\n\nNote that for socket-activated services, the IP filter programs configured on the socket unit apply to all sockets associated with it directly, but not to any sockets created by the ultimately activated services for it. Conversely, the IP filter programs configured for the service are not applied to any sockets passed into the service via socket activation. Thus, it is usually a good idea, to replicate the IP filter programs on both the socket and the service unit, however it often makes sense to maintain one configuration more open and the other one more restricted, depending on the use case.\n\nNote that these settings might not be supported on some systems (for example if eBPF control group support is not enabled in the underlying kernel or container manager). These settings will fail the service in that case. If compatibility with such systems is desired it is hence recommended to attach your filter manually (requires `Delegate=``yes`) instead of using this setting.\n\nAdded in version 243."],
[4,95,"`BPFProgram=` allows attaching custom BPF programs to the cgroup of a unit. (This generalizes the functionality exposed via `IPEgressFilterPath=` and `IPIngressFilterPath=` for other hooks.) Cgroup-bpf hooks in the form of BPF programs loaded to the BPF filesystem are attached with cgroup-bpf attach flags determined by the unit. For details about attachment types and flags see [`bpf.h`](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/plain/include/uapi/linux/bpf.h). Also refer to the general [BPF documentation](https://docs.kernel.org/bpf/).\n\nThe specification of BPF program consists of a pair of BPF program type and program path in the file system, with \"`:`\" as the separator: _`type`_:_`program-path`_.\n\nThe BPF program type is equivalent to the BPF attach type used in [bpftool(8)](https://www.mankier.com/8/bpftool) It may be one of `egress`, `ingress`, `sock_create`, `sock_ops`, `device`, `bind4`, `bind6`, `connect4`, `connect6`, `post_bind4`, `post_bind6`, `sendmsg4`, `sendmsg6`, `sysctl`, `recvmsg4`, `recvmsg6`, `getsockopt`, or `setsockopt`.\n\nThe specified program path must be an absolute path referencing a BPF program inode in the bpffs file system (which generally means it must begin with `/sys/fs/bpf/`). If a specified program does not exist (i.e. has not been uploaded to the BPF subsystem of the kernel yet), it will not be installed but unit activation will continue (a warning will be printed to the logs).\n\nSetting `BPFProgram=` to an empty value makes previous assignments ineffective.\n\nMultiple assignments of the same program type/path pair have the same effect as a single assignment: the program will be attached just once.\n\nIf BPF `egress` pinned to _`program-path`_ path is already being handled by `IPEgressFilterPath=`, `BPFProgram=` assignment will be considered valid and `BPFProgram=` will be attached to a cgroup. Similarly for `ingress` hook and `IPIngressFilterPath=` assignment.\n\nBPF programs passed with `BPFProgram=` are attached to the cgroup of a unit with BPF attach flag `multi`, that allows further attachments of the same _`type`_ within cgroup hierarchy topped by the unit cgroup.\n\nExamples:\n\nBPFProgram=egress:/sys/fs/bpf/egress-hook\nBPFProgram=bind6:/sys/fs/bpf/sock-addr-hook\n\nAdded in version 249."],
[4,96,"Control access to specific device nodes by the executed processes. Takes two space-separated strings: a device node specifier followed by a combination of `r`, `w`, `m` to control _r_eading, _w_riting, or creation of the specific device nodes by the unit (_m_knod), respectively. This functionality is implemented using eBPF filtering.\n\nWhen access to _all_ physical devices should be disallowed, `PrivateDevices=` may be used instead. See [systemd.exec(5)](systemd.exec.html).\n\nThe device node specifier is either a path to a device node in the file system, starting with `/dev/`, or a string starting with either \"`char-`\" or \"`block-`\" followed by a device group name, as listed in `/proc/devices`. The latter is useful to allow-list all current and future devices belonging to a specific device group at once. The device group is matched according to filename globbing rules, you may hence use the \"`*`\" and \"`?`\" wildcards. (Note that such globbing wildcards are not available for device node path specifications!) In order to match device nodes by numeric major/minor, use device node paths in the `/dev/char/` and `/dev/block/` directories. However, matching devices by major/minor is generally not recommended as assignments are neither stable nor portable between systems or different kernel versions.\n\nExamples: `/dev/sda5` is a path to a device node, referring to an ATA or SCSI block device. \"`char-pts`\" and \"`char-alsa`\" are specifiers for all pseudo TTYs and all ALSA sound devices, respectively. \"`char-cpu/*`\" is a specifier matching all CPU related device groups.\n\nNote that allow lists defined this way should only reference device groups which are resolvable at the time the unit is started. Any device groups not resolvable then are not added to the device allow list. In order to work around this limitation, consider extending service units with a pair of **After=modprobe@xyz.service** and **Wants=modprobe@xyz.service** lines that load the necessary kernel module implementing the device group if missing. Example:\n\nâ€¦\n\\[Unit\\]\nWants=modprobe@loop.service\nAfter=modprobe@loop.service\n\n\\[Service\\]\nDeviceAllow=block-loop\nDeviceAllow=/dev/loop-control\nâ€¦\n\nThis option cannot be bypassed by prefixing \"`+`\" to the executable path in the service unit, as it applies to the whole control group.\n\nAdded in version 208."],
[4,97,"Control the policy for allowing device access:\n\n`strict`[Â¶](#strict \"Permalink to this term\")\n\nmeans to only allow types of access that are explicitly specified.\n\nAdded in version 208.\n\n`closed`[Â¶](#closed \"Permalink to this term\")\n\nin addition, allows access to standard pseudo devices including `/dev/null`, `/dev/zero`, `/dev/full`, `/dev/random`, and `/dev/urandom`.\n\nAdded in version 208.\n\n`auto`[Â¶](#auto \"Permalink to this term\")\n\nin addition, allows access to all devices if no explicit `DeviceAllow=` is present. This is the default.\n\nAdded in version 208.\n\nThis option cannot be bypassed by prefixing \"`+`\" to the executable path in the service unit, as it applies to the whole control group.\n\nAdded in version 208."],
[4,98,"The name of the slice unit to place the unit in. Defaults to `system.slice` for all non-instantiated units of all unit types (except for slice units themselves see below). Instance units are by default placed in a subslice of `system.slice` that is named after the template name.\n\nThis option may be used to arrange systemd units in a hierarchy of slices each of which might have resource settings applied.\n\nFor units of type slice, the only accepted value for this setting is the parent slice. Since the name of a slice unit implies the parent slice, it is hence redundant to ever set this parameter directly for slice units.\n\nSpecial care should be taken when relying on the default slice assignment in templated service units that have `DefaultDependencies=no` set, see [systemd.service(5)](systemd.service.html), section \"Default Dependencies\" for details.\n\nAdded in version 208."],
[4,99,"Turns on delegation of further resource control partitioning to processes of the unit. Units where this is enabled may create and manage their own private subhierarchy of control groups below the control group of the unit itself. For unprivileged services (i.e. those using the `User=` setting) the unit's control group will be made accessible to the relevant user.\n\nWhen enabled the service manager will refrain from manipulating control groups or moving processes below the unit's control group, so that a clear concept of ownership is established: the control group tree at the level of the unit's control group and above (i.e. towards the root control group) is owned and managed by the service manager of the host, while the control group tree below the unit's control group is owned and managed by the unit itself.\n\nTakes either a boolean argument or a (possibly empty) list of control group controller names. If true, delegation is turned on, and all supported controllers are enabled for the unit, making them available to the unit's processes for management. If false, delegation is turned off entirely (and no additional controllers are enabled). If set to a list of controllers, delegation is turned on, and the specified controllers are enabled for the unit. Assigning the empty string will enable delegation, but reset the list of controllers, and all assignments prior to this will have no effect. Note that additional controllers other than the ones specified might be made available as well, depending on configuration of the containing slice unit or other units contained in it. Defaults to false.\n\nNote that controller delegation to less privileged code is only safe on the unified control group hierarchy. Accordingly, access to the specified controllers will not be granted to unprivileged services on the legacy hierarchy, even when requested.\n\nThe following controller names may be specified: `cpu`, `cpuacct`, `cpuset`, `io`, `blkio`, `memory`, `devices`, `pids`, `bpf-firewall`, and `bpf-devices`.\n\nNot all of these controllers are available on all kernels however, and some are specific to the unified hierarchy while others are specific to the legacy hierarchy. Also note that the kernel might support further controllers, which aren't covered here yet as delegation is either not supported at all for them or not defined cleanly.\n\nNote that because of the hierarchical nature of cgroup hierarchy, any controllers that are delegated will be enabled for the parent and sibling units of the unit with delegation.\n\nFor further details on the delegation model consult [Control Group APIs and Delegation](https://systemd.io/CGROUP_DELEGATION).\n\nAdded in version 218."],
[4,100,"Place unit processes in the specified subgroup of the unit's control group. Takes a valid control group name (not a path!) as parameter, or an empty string to turn this feature off. Defaults to off. The control group name must be usable as filename and avoid conflicts with the kernel's control group attribute files (i.e. `cgroup.procs` is not an acceptable name, since the kernel exposes a native control group attribute file by that name). This option has no effect unless control group delegation is turned on via `Delegate=`, see above. Note that this setting only applies to \"main\" processes of a unit, i.e. for services to `ExecStart=`, but not for `ExecReload=` and similar. If delegation is enabled, the latter are always placed inside a subgroup named `.control`. The specified subgroup is automatically created (and potentially ownership is passed to the unit's configured user/group) when a process is started in it.\n\nThis option is useful to avoid manually moving the invoked process into a subgroup after it has been started. Since no processes should live in inner nodes of the control group tree it's almost always necessary to run the main (\"supervising\") process of a unit that has delegation turned on in a subgroup.\n\nAdded in version 254."],
[4,101,"Disables controllers from being enabled for a unit's children. If a controller listed is already in use in its subtree, the controller will be removed from the subtree. This can be used to avoid configuration in child units from being able to implicitly or explicitly enable a controller. Defaults to empty.\n\nMultiple controllers may be specified, separated by spaces. You may also pass `DisableControllers=` multiple times, in which case each new instance adds another controller to disable. Passing `DisableControllers=` by itself with no controller name present resets the disabled controller list.\n\nIt may not be possible to disable a controller after units have been started, if the unit or any child of the unit in question delegates controllers to its children, as any delegated subtree of the cgroup hierarchy is unmanaged by systemd.\n\nThe following controller names may be specified: `cpu`, `cpuacct`, `cpuset`, `io`, `blkio`, `memory`, `devices`, `pids`, `bpf-firewall`, and `bpf-devices`.\n\nAdded in version 240."],
[4,102,"Specifies how [systemd-oomd.service(8)](systemd-oomd.service.html) will act on this unit's cgroups. Defaults to `auto`.\n\nWhen set to `kill`, the unit becomes a candidate for monitoring by **systemd-oomd**. If the cgroup passes the limits set by [oomd.conf(5)](oomd.conf.html) or the unit configuration, **systemd-oomd** will select a descendant cgroup and send `SIGKILL` to all of the processes under it. You can find more details on candidates and kill behavior at [systemd-oomd.service(8)](systemd-oomd.service.html) and [oomd.conf(5)](oomd.conf.html).\n\nSetting either of these properties to `kill` will also result in `After=` and `Wants=` dependencies on `systemd-oomd.service` unless `DefaultDependencies=no`.\n\nWhen set to `auto`, **systemd-oomd** will not actively use this cgroup's data for monitoring and detection. However, if an ancestor cgroup has one of these properties set to `kill`, a unit with `auto` can still be a candidate for **systemd-oomd** to terminate.\n\nAdded in version 247."],
[4,103,"Overrides the default memory pressure limit set by [oomd.conf(5)](oomd.conf.html) for this unit (cgroup). Takes a percentage value between 0% and 100%, inclusive. This property is ignored unless `ManagedOOMMemoryPressure=``kill`. Defaults to 0%, which means to use the default set by [oomd.conf(5)](oomd.conf.html).\n\nAdded in version 247."],
[4,104,"Allows deprioritizing or omitting this unit's cgroup as a candidate when **systemd-oomd** needs to act. Requires support for extended attributes (see [xattr(7)](https://man7.org/linux/man-pages/man7/xattr.7.html)) in order to use `avoid` or `omit`.\n\nWhen calculating candidates to relieve swap usage, **systemd-oomd** will only respect these extended attributes if the unit's cgroup is owned by root.\n\nWhen calculating candidates to relieve memory pressure, **systemd-oomd** will only respect these extended attributes if the unit's cgroup is owned by root, or if the unit's cgroup owner, and the owner of the monitored ancestor cgroup are the same. For example, if **systemd-oomd** is calculating candidates for `-.slice`, then extended attributes set on descendants of `/user.slice/user-1000.slice/user@1000.service/` will be ignored because the descendants are owned by UID 1000, and `-.slice` is owned by UID 0. But, if calculating candidates for `/user.slice/user-1000.slice/user@1000.service/`, then extended attributes set on the descendants would be respected.\n\nIf this property is set to `avoid`, the service manager will convey this to **systemd-oomd**, which will only select this cgroup if there are no other viable candidates.\n\nIf this property is set to `omit`, the service manager will convey this to **systemd-oomd**, which will ignore this cgroup as a candidate and will not perform any actions on it.\n\nIt is recommended to use `avoid` and `omit` sparingly, as it can adversely affect **systemd-oomd**'s kill behavior. Also note that these extended attributes are not applied recursively to cgroups under this unit's cgroup.\n\nDefaults to `none` which means **systemd-oomd** will rank this unit's cgroup as defined in [systemd-oomd.service(8)](systemd-oomd.service.html) and [oomd.conf(5)](oomd.conf.html).\n\nAdded in version 248."],
[4,105,"Controls memory pressure monitoring for invoked processes. Takes one of \"`off`\", \"`on`\", \"`auto`\" or \"`skip`\". If \"`off`\" tells the service not to watch for memory pressure events, by setting the `$MEMORY_PRESSURE_WATCH` environment variable to the literal string `/dev/null`. If \"`on`\" tells the service to watch for memory pressure events. This enables memory accounting for the service, and ensures the `memory.pressure` cgroup attribute file is accessible for reading and writing by the service's user. It then sets the `$MEMORY_PRESSURE_WATCH` environment variable for processes invoked by the unit to the file system path to this file. The threshold information configured with `MemoryPressureThresholdSec=` is encoded in the `$MEMORY_PRESSURE_WRITE` environment variable. If the \"`auto`\" value is set the protocol is enabled if memory accounting is anyway enabled for the unit, and disabled otherwise. If set to \"`skip`\" the logic is neither enabled, nor disabled and the two environment variables are not set.\n\nNote that services are free to use the two environment variables, but it's unproblematic if they ignore them. Memory pressure handling must be implemented individually in each service, and usually means different things for different software. For further details on memory pressure handling see [Memory Pressure Handling in systemd](https://systemd.io/MEMORY_PRESSURE).\n\nServices implemented using [sd-event(3)](sd-event.html) may use [sd\\_event\\_add\\_memory\\_pressure(3)](sd_event_add_memory_pressure.html) to watch for and handle memory pressure events.\n\nIf not explicit set, defaults to the `DefaultMemoryPressureWatch=` setting in [systemd-system.conf(5)](systemd-system.conf.html).\n\nAdded in version 254."],
[4,106,"Sets the memory pressure threshold time for memory pressure monitor as configured via `MemoryPressureWatch=`. Specifies the maximum allocation latency before a memory pressure event is signalled to the service, per 2s window. If not specified defaults to the `DefaultMemoryPressureThresholdSec=` setting in [systemd-system.conf(5)](systemd-system.conf.html) (which in turn defaults to 200ms). The specified value expects a time unit such as \"`ms`\" or \"`Î¼s`\", see [systemd.time(7)](systemd.time.html) for details on the permitted syntax.\n\nAdded in version 254."],
[4,107,"Takes a boolean argument. This setting is used to enable coredump forwarding for containers that belong to this unit's cgroup. Units with `CoredumpReceive=yes` must also be configured with `Delegate=yes`. Defaults to false.\n\nWhen **systemd-coredump** is handling a coredump for a process from a container, if the container's leader process is a descendant of a cgroup with `CoredumpReceive=yes` and `Delegate=yes`, then **systemd-coredump** will attempt to forward the coredump to **systemd-coredump** within the container.\n\nAdded in version 255."],
[2,"AllowedCPUs","",73,4,null],
[2,"AllowedMemoryNodes","",80,4,null],
[2,"BPFProgram","type:program-path",95,4,null],
[2,"CPUAccounting","",69,4,null],
[2,"CPUQuota","",71,4,null],
[2,"CPUQuotaPeriodSec","",72,4,null],
[2,"CPUWeight","weight",70,4,null],
[2,"CoredumpReceive","",107,4,null],
[2,"DefaultStartupMemoryLow","bytes",75,4,null],
[2,"Delegate","",99,4,null],
[2,"DelegateSubgroup","",100,4,null],
[2,"DeviceAllow","",96,4,null],
[2,"DevicePolicy","auto|closed|strict",97,4,null],
[2,"DisableControllers","",101,4,null],
[2,"IOAccounting","",83,4,null],
[2,"IODeviceLatencyTargetSec","device target",88,4,null],
[2,"IODeviceWeight","device weight",85,4,null],
[2,"IOReadBandwidthMax","device bytes",86,4,null],
[2,"IOReadIOPSMax","device IOPS",87,4,null],
[2,"IOWeight","weight",84,4,null],
[2,"IOWriteBandwidthMax","device bytes",86,4,null],
[2,"IOWriteIOPSMax","device IOPS",87,4,null],
[2,"IPAccounting","",89,4,null],
[2,"IPAddressAllow","ADDRESS[/PREFIXLENGTH]â€¦",90,4,null],
[2,"IPAddressDeny","ADDRESS[/PREFIXLENGTH]â€¦",90,4,null],
[2,"IPEgressFilterPath","BPF_FS_PROGRAM_PATH",94,4,null],
[2,"IPIngressFilterPath","BPF_FS_PROGRAM_PATH",94,4,null],
[2,"ManagedOOMMemoryPressure","auto|kill",102,4,null],
[2,"ManagedOOMMemoryPressureLimit","",103,4,null],
[2,"ManagedOOMPreference","none|avoid|omit",104,4,null],
[2,"ManagedOOMSwap","auto|kill",102,4,null],
[2,"MemoryAccounting","",74,4,null],
[2,"MemoryHigh","bytes",76,4,null],
[2,"MemoryLow","bytes",75,4,null],
[2,"MemoryMax","bytes",77,4,null],
[2,"MemoryMin","bytes",75,4,null],
[2,"MemoryPressureThresholdSec","",106,4,null],
[2,"MemoryPressureWatch","",105,4,null],
[2,"MemorySwapMax","bytes",78,4,null],
[2,"MemoryZSwapMax","bytes",79,4,null],
[2,"NFTSet","family:table:set",93,4,null],
[2,"RestrictNetworkInterfaces","",92,4,null],
[2,"Slice","",98,4,null],
[2,"SocketBindAllow","bind-rule",91,4,null],
[2,"SocketBindDeny","bind-rule",91,4,null],
[2,"StartupAllowedCPUs","",73,4,null],
[2,"StartupAllowedMemoryNodes","",80,4,null],
[2,"StartupCPUWeight","weight",70,4,null],
[2,"StartupIOWeight","weight",84,4,null],
[2,"StartupMemoryHigh","bytes",76,4,null],
[2,"StartupMemoryLow","bytes",75,4,null],
[2,"StartupMemoryMax","bytes",77,4,null],
[2,"StartupMemorySwapMax","bytes",78,4,null],
[2,"StartupMemoryZSwapMax","bytes",79,4,null],
[2,"TasksAccounting","",81,4,null],
[2,"TasksMax","N",82,4,null],
[3,5,"systemd.exec(5)","systemd.exec â€” Execution environment configuration","systemd.exec.html"],
[4,108,"Takes a colon separated list of absolute paths relative to which the executable used by the `Exec*=` (e.g. `ExecStart=`, `ExecStop=`, etc.) properties can be found. `ExecSearchPath=` overrides `$PATH` if `$PATH` is not supplied by the user through `Environment=`, `EnvironmentFile=` or `PassEnvironment=`. Assigning an empty string removes previous assignments and setting `ExecSearchPath=` to a value multiple times will append to the previous setting.\n\nAdded in version 250."],
[4,109,"Takes a directory path relative to the service's root directory specified by `RootDirectory=`, or the special value \"`~`\". Sets the working directory for executed processes. If set to \"`~`\", the home directory of the user specified in `User=` is used. If not set, defaults to the root directory when systemd is running as a system instance and the respective user's home directory if run as user. If the setting is prefixed with the \"`-`\" character, a missing working directory is not considered fatal. If `RootDirectory=`/`RootImage=` is not set, then `WorkingDirectory=` is relative to the root of the system running the service manager. Note that setting this parameter might result in additional dependencies to be added to the unit (see above)."],
[4,110,"Takes a directory path relative to the host's root directory (i.e. the root of the system running the service manager). Sets the root directory for executed processes, with the [chroot(2)](https://man7.org/linux/man-pages/man2/chroot.2.html) system call. If this is used, it must be ensured that the process binary and all its auxiliary files are available in the `chroot()` jail. Note that setting this parameter might result in additional dependencies to be added to the unit (see above).\n\nThe `MountAPIVFS=` and `PrivateUsers=` settings are particularly useful in conjunction with `RootDirectory=`. For details, see below.\n\nIf `RootDirectory=`/`RootImage=` are used together with `NotifyAccess=` the notification socket is automatically mounted from the host into the root environment, to ensure the notification interface can work correctly.\n\nNote that services using `RootDirectory=`/`RootImage=` will not be able to log via the syslog or journal protocols to the host logging infrastructure, unless the relevant sockets are mounted from the host, specifically:\n\nThe host's [os-release(5)](os-release.html) file will be made available for the service (read-only) as `/run/host/os-release`. It will be updated automatically on soft reboot (see: [systemd-soft-reboot.service(8)](systemd-soft-reboot.service.html)), in case the service is configured to survive it.\n\n**ExampleÂ 1.Â Mounting logging sockets into root environment**\n\nBindReadOnlyPaths=/dev/log /run/systemd/journal/socket /run/systemd/journal/stdout\n\n  \n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl)."],
[4,111,"Takes a path to a block device node or regular file as argument. This call is similar to `RootDirectory=` however mounts a file system hierarchy from a block device node or loopback file instead of a directory. The device node or file system image file needs to contain a file system without a partition table, or a file system within an MBR/MS-DOS or GPT partition table with only a single Linux-compatible partition, or a set of file systems within a GPT partition table that follows the [Discoverable Partitions Specification](https://uapi-group.org/specifications/specs/discoverable_partitions_specification).\n\nWhen `DevicePolicy=` is set to \"`closed`\" or \"`strict`\", or set to \"`auto`\" and `DeviceAllow=` is set, then this setting adds `/dev/loop-control` with `rw` mode, \"`block-loop`\" and \"`block-blkext`\" with `rwm` mode to `DeviceAllow=`. See [systemd.resource-control(5)](systemd.resource-control.html) for the details about `DevicePolicy=` or `DeviceAllow=`. Also, see `PrivateDevices=` below, as it may change the setting of `DevicePolicy=`.\n\nUnits making use of `RootImage=` automatically gain an `After=` dependency on `systemd-udevd.service`.\n\nThe host's [os-release(5)](os-release.html) file will be made available for the service (read-only) as `/run/host/os-release`. It will be updated automatically on soft reboot (see: [systemd-soft-reboot.service(8)](systemd-soft-reboot.service.html)), in case the service is configured to survive it.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.\n\nAdded in version 233."],
[4,112,"Takes a comma-separated list of mount options that will be used on disk images specified by `RootImage=`. Optionally a partition name can be prefixed, followed by colon, in case the image has multiple partitions, otherwise partition name \"`root`\" is implied. Options for multiple partitions can be specified in a single line with space separators. Assigning an empty string removes previous assignments. Duplicated options are ignored. For a list of valid mount options, please refer to [mount(8)](https://man7.org/linux/man-pages/man8/mount.8.html).\n\nValid partition names follow the [Discoverable Partitions Specification](https://uapi-group.org/specifications/specs/discoverable_partitions_specification): `root`, `usr`, `home`, `srv`, `esp`, `xbootldr`, `tmp`, `var`.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.\n\nAdded in version 247."],
[4,113,"Takes a boolean argument. If enabled, executed processes will run in an ephemeral copy of the root directory or root image. The ephemeral copy is placed in `/var/lib/systemd/ephemeral-trees/` while the service is active and is cleaned up when the service is stopped or restarted. If `RootDirectory=` is used and the root directory is a subvolume, the ephemeral copy will be created by making a snapshot of the subvolume.\n\nTo make sure making ephemeral copies can be made efficiently, the root directory or root image should be located on the same filesystem as `/var/lib/systemd/ephemeral-trees/`. When using `RootEphemeral=` with root directories, [btrfs(5)](https://btrfs.readthedocs.io/en/latest/btrfs-man5.html) should be used as the filesystem and the root directory should ideally be a subvolume which **systemd** can snapshot to make the ephemeral copy. For root images, a filesystem with support for reflinks should be used to ensure an efficient ephemeral copy.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.\n\nAdded in version 254."],
[4,114,"Takes a data integrity (dm-verity) root hash specified in hexadecimal, or the path to a file containing a root hash in ASCII hexadecimal format. This option enables data integrity checks using dm-verity, if the used image contains the appropriate integrity data (see above) or if `RootVerity=` is used. The specified hash must match the root hash of integrity data, and is usually at least 256 bits (and hence 64 formatted hexadecimal characters) long (in case of SHA256 for example). If this option is not specified, but the image file carries the \"`user.verity.roothash`\" extended file attribute (see [xattr(7)](https://man7.org/linux/man-pages/man7/xattr.7.html)), then the root hash is read from it, also as formatted hexadecimal characters. If the extended file attribute is not found (or is not supported by the underlying file system), but a file with the `.roothash` suffix is found next to the image file, bearing otherwise the same name (except if the image has the `.raw` suffix, in which case the root hash file must not have it in its name), the root hash is read from it and automatically used, also as formatted hexadecimal characters.\n\nIf the disk image contains a separate `/usr/` partition it may also be Verity protected, in which case the root hash may configured via an extended attribute \"`user.verity.usrhash`\" or a `.usrhash` file adjacent to the disk image. There's currently no option to configure the root hash for the `/usr/` file system via the unit file directly.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.\n\nAdded in version 246."],
[4,115,"Takes a PKCS7 signature of the `RootHash=` option as a path to a DER-encoded signature file, or as an ASCII base64 string encoding of a DER-encoded signature prefixed by \"`base64:`\". The dm-verity volume will only be opened if the signature of the root hash is valid and signed by a public key present in the kernel keyring. If this option is not specified, but a file with the `.roothash.p7s` suffix is found next to the image file, bearing otherwise the same name (except if the image has the `.raw` suffix, in which case the signature file must not have it in its name), the signature is read from it and automatically used.\n\nIf the disk image contains a separate `/usr/` partition it may also be Verity protected, in which case the signature for the root hash may configured via a `.usrhash.p7s` file adjacent to the disk image. There's currently no option to configure the root hash signature for the `/usr/` via the unit file directly.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.\n\nAdded in version 246."],
[4,116,"Takes the path to a data integrity (dm-verity) file. This option enables data integrity checks using dm-verity, if `RootImage=` is used and a root-hash is passed and if the used image itself does not contain the integrity data. The integrity data must be matched by the root hash. If this option is not specified, but a file with the `.verity` suffix is found next to the image file, bearing otherwise the same name (except if the image has the `.raw` suffix, in which case the verity data file must not have it in its name), the verity data is read from it and automatically used.\n\nThis option is supported only for disk images that contain a single file system, without an enveloping partition table. Images that contain a GPT partition table should instead include both root file system and matching Verity data in the same image, implementing the [Discoverable Partitions Specification](https://uapi-group.org/specifications/specs/discoverable_partitions_specification).\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.\n\nAdded in version 246."],
[4,117,"Takes an image policy string as per [systemd.image-policy(7)](systemd.image-policy.html) to use when mounting the disk images (DDI) specified in `RootImage=`, `MountImage=`, `ExtensionImage=`, respectively. If not specified the following policy string is the default for `RootImagePolicy=` and `MountImagePolicy`:\n\nroot=verity+signed+encrypted+unprotected+absent: \\\\\n        usr=verity+signed+encrypted+unprotected+absent: \\\\\n        home=encrypted+unprotected+absent: \\\\\n        srv=encrypted+unprotected+absent: \\\\\n        tmp=encrypted+unprotected+absent: \\\\\n        var=encrypted+unprotected+absent\n\nThe default policy for `ExtensionImagePolicy=` is:\n\nroot=verity+signed+encrypted+unprotected+absent: \\\\\n        usr=verity+signed+encrypted+unprotected+absent\n\nAdded in version 254."],
[4,118,"Takes a boolean argument. If on, a private mount namespace for the unit's processes is created and the API file systems `/proc/`, `/sys/`, `/dev/` and `/run/` (as an empty \"`tmpfs`\") are mounted inside of it, unless they are already mounted. Note that this option has no effect unless used in conjunction with `RootDirectory=`/`RootImage=` as these four mounts are generally mounted in the host anyway, and unless the root directory is changed, the private mount namespace will be a 1:1 copy of the host's, and include these four mounts. Note that the `/dev/` file system of the host is bind mounted if this option is used without `PrivateDevices=`. To run the service with a private, minimal version of `/dev/`, combine this option with `PrivateDevices=`.\n\nIn order to allow propagating mounts at runtime in a safe manner, `/run/systemd/propagate/` on the host will be used to set up new mounts, and `/run/host/incoming/` in the private namespace will be used as an intermediate step to store them before being moved to the final mount point.\n\nAdded in version 233."],
[4,119,"Takes one of \"`noaccess`\", \"`invisible`\", \"`ptraceable`\" or \"`default`\" (which it defaults to). When set, this controls the \"`hidepid=`\" mount option of the \"`procfs`\" instance for the unit that controls which directories with process metainformation (``/proc/_`PID`_``) are visible and accessible: when set to \"`noaccess`\" the ability to access most of other users' process metadata in `/proc/` is taken away for processes of the service. When set to \"`invisible`\" processes owned by other users are hidden from `/proc/`. If \"`ptraceable`\" all processes that cannot be `ptrace()`'ed by a process are hidden to it. If \"`default`\" no restrictions on `/proc/` access or visibility are made. For further details see [The /proc Filesystem](https://docs.kernel.org/filesystems/proc.html#mount-options). It is generally recommended to run most system services with this option set to \"`invisible`\". This option is implemented via file system namespacing, and thus cannot be used with services that shall be able to install mount points in the host file system hierarchy. Note that the root user is unaffected by this option, so to be effective it has to be used together with `User=` or `DynamicUser=yes`, and also without the \"`CAP_SYS_PTRACE`\" capability, which also allows a process to bypass this feature. It cannot be used for services that need to access metainformation about other users' processes. This option implies `MountAPIVFS=`.\n\nIf the kernel doesn't support per-mount point `hidepid=` mount options this setting remains without effect, and the unit's processes will be able to access and see other process as if the option was not used.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.\n\nAdded in version 247."],
[4,120,"Takes one of \"`all`\" (the default) and \"`pid`\". If \"`pid`\", all files and directories not directly associated with process management and introspection are made invisible in the `/proc/` file system configured for the unit's processes. This controls the \"`subset=`\" mount option of the \"`procfs`\" instance for the unit. For further details see [The /proc Filesystem](https://docs.kernel.org/filesystems/proc.html#mount-options). Note that Linux exposes various kernel APIs via `/proc/`, which are made unavailable with this setting. Since these APIs are used frequently this option is useful only in a few, specific cases, and is not suitable for most non-trivial programs.\n\nMuch like `ProtectProc=` above, this is implemented via file system mount namespacing, and hence the same restrictions apply: it is only available to system services, it disables mount propagation to the host mount table, and it implies `MountAPIVFS=`. Also, like `ProtectProc=` this setting is gracefully disabled if the used kernel does not support the \"`subset=`\" mount option of \"`procfs`\".\n\nAdded in version 247."],
[4,121,"Configures unit-specific bind mounts. A bind mount makes a particular file or directory available at an additional place in the unit's view of the file system. Any bind mounts created with this option are specific to the unit, and are not visible in the host's mount table. This option expects a whitespace separated list of bind mount definitions. Each definition consists of a colon-separated triple of source path, destination path and option string, where the latter two are optional. If only a source path is specified the source and destination is taken to be the same. The option string may be either \"`rbind`\" or \"`norbind`\" for configuring a recursive or non-recursive bind mount. If the destination path is omitted, the option string must be omitted too. Each bind mount definition may be prefixed with \"`-`\", in which case it will be ignored when its source path does not exist.\n\n`BindPaths=` creates regular writable bind mounts (unless the source file system mount is already marked read-only), while `BindReadOnlyPaths=` creates read-only bind mounts. These settings may be used more than once, each usage appends to the unit's list of bind mounts. If the empty string is assigned to either of these two options the entire list of bind mounts defined prior to this is reset. Note that in this case both read-only and regular bind mounts are reset, regardless which of the two settings is used.\n\nThis option is particularly useful when `RootDirectory=`/`RootImage=` is used. In this case the source path refers to a path on the host file system, while the destination path refers to a path below the root directory of the unit.\n\nNote that the destination directory must exist or systemd must be able to create it. Thus, it is not possible to use those options for mount points nested underneath paths specified in `InaccessiblePaths=`, or under `/home/` and other protected directories if `ProtectHome=yes` is specified. `TemporaryFileSystem=` with \"`:ro`\" or `ProtectHome=tmpfs` should be used instead.\n\nAdded in version 233."],
[4,122,"This setting is similar to `RootImage=` in that it mounts a file system hierarchy from a block device node or loopback file, but the destination directory can be specified as well as mount options. This option expects a whitespace separated list of mount definitions. Each definition consists of a colon-separated tuple of source path and destination definitions, optionally followed by another colon and a list of mount options.\n\nMount options may be defined as a single comma-separated list of options, in which case they will be implicitly applied to the root partition on the image, or a series of colon-separated tuples of partition name and mount options. Valid partition names and mount options are the same as for `RootImageOptions=` setting described above.\n\nEach mount definition may be prefixed with \"`-`\", in which case it will be ignored when its source path does not exist. The source argument is a path to a block device node or regular file. If source or destination contain a \"`:`\", it needs to be escaped as \"`\\:`\". The device node or file system image file needs to follow the same rules as specified for `RootImage=`. Any mounts created with this option are specific to the unit, and are not visible in the host's mount table.\n\nThese settings may be used more than once, each usage appends to the unit's list of mount paths. If the empty string is assigned, the entire list of mount paths defined prior to this is reset.\n\nNote that the destination directory must exist or systemd must be able to create it. Thus, it is not possible to use those options for mount points nested underneath paths specified in `InaccessiblePaths=`, or under `/home/` and other protected directories if `ProtectHome=yes` is specified.\n\nWhen `DevicePolicy=` is set to \"`closed`\" or \"`strict`\", or set to \"`auto`\" and `DeviceAllow=` is set, then this setting adds `/dev/loop-control` with `rw` mode, \"`block-loop`\" and \"`block-blkext`\" with `rwm` mode to `DeviceAllow=`. See [systemd.resource-control(5)](systemd.resource-control.html) for the details about `DevicePolicy=` or `DeviceAllow=`. Also, see `PrivateDevices=` below, as it may change the setting of `DevicePolicy=`.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.\n\nAdded in version 247."],
[4,123,"This setting is similar to `MountImages=` in that it mounts a file system hierarchy from a block device node or loopback file, but instead of providing a destination path, an overlay will be set up. This option expects a whitespace separated list of mount definitions. Each definition consists of a source path, optionally followed by a colon and a list of mount options.\n\nA read-only OverlayFS will be set up on top of `/usr/` and `/opt/` hierarchies for sysext images and `/etc/` hierarchy for confext images. The order in which the images are listed will determine the order in which the overlay is laid down: images specified first to last will result in overlayfs layers bottom to top.\n\nMount options may be defined as a single comma-separated list of options, in which case they will be implicitly applied to the root partition on the image, or a series of colon-separated tuples of partition name and mount options. Valid partition names and mount options are the same as for `RootImageOptions=` setting described above.\n\nEach mount definition may be prefixed with \"`-`\", in which case it will be ignored when its source path does not exist. The source argument is a path to a block device node or regular file. If the source path contains a \"`:`\", it needs to be escaped as \"`\\:`\". The device node or file system image file needs to follow the same rules as specified for `RootImage=`. Any mounts created with this option are specific to the unit, and are not visible in the host's mount table.\n\nThese settings may be used more than once, each usage appends to the unit's list of image paths. If the empty string is assigned, the entire list of mount paths defined prior to this is reset.\n\nEach sysext image must carry a `/usr/lib/extension-release.d/extension-release.IMAGE` file while each confext image must carry a `/etc/extension-release.d/extension-release.IMAGE` file, with the appropriate metadata which matches `RootImage=`/`RootDirectory=` or the host. See: [os-release(5)](os-release.html). To disable the safety check that the extension-release file name matches the image file name, the `x-systemd.relax-extension-release-check` mount option may be appended.\n\nWhen `DevicePolicy=` is set to \"`closed`\" or \"`strict`\", or set to \"`auto`\" and `DeviceAllow=` is set, then this setting adds `/dev/loop-control` with `rw` mode, \"`block-loop`\" and \"`block-blkext`\" with `rwm` mode to `DeviceAllow=`. See [systemd.resource-control(5)](systemd.resource-control.html) for the details about `DevicePolicy=` or `DeviceAllow=`. Also, see `PrivateDevices=` below, as it may change the setting of `DevicePolicy=`.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.\n\nAdded in version 248."],
[4,124,"This setting is similar to `BindReadOnlyPaths=` in that it mounts a file system hierarchy from a directory, but instead of providing a destination path, an overlay will be set up. This option expects a whitespace separated list of source directories.\n\nA read-only OverlayFS will be set up on top of `/usr/` and `/opt/` hierarchies for sysext images and `/etc/` hierarchy for confext images. The order in which the directories are listed will determine the order in which the overlay is laid down: directories specified first to last will result in overlayfs layers bottom to top.\n\nEach directory listed in `ExtensionDirectories=` may be prefixed with \"`-`\", in which case it will be ignored when its source path does not exist. Any mounts created with this option are specific to the unit, and are not visible in the host's mount table.\n\nThese settings may be used more than once, each usage appends to the unit's list of directories paths. If the empty string is assigned, the entire list of mount paths defined prior to this is reset.\n\nEach sysext directory must contain a `/usr/lib/extension-release.d/extension-release.IMAGE` file while each confext directory must carry a `/etc/extension-release.d/extension-release.IMAGE` file, with the appropriate metadata which matches `RootImage=`/`RootDirectory=` or the host. See: [os-release(5)](os-release.html).\n\nNote that usage from user units requires overlayfs support in unprivileged user namespaces, which was first introduced in kernel v5.11.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).\n\nAdded in version 251."],
[4,125,"Set the UNIX user or group that the processes are executed as, respectively. Takes a single user or group name, or a numeric ID as argument. For system services (services run by the system service manager, i.e. managed by PID 1) and for user services of the root user (services managed by root's instance of **systemd --user**), the default is \"`root`\", but `User=` may be used to specify a different user. For user services of any other user, switching user identity is not permitted, hence the only valid setting is the same user the user's service manager is running as. If no group is set, the default group of the user is used. This setting does not affect commands whose command line is prefixed with \"`+`\".\n\nNote that this enforces only weak restrictions on the user/group name syntax, but will generate warnings in many cases where user/group names do not adhere to the following rules: the specified name should consist only of the characters a-z, A-Z, 0-9, \"`_`\" and \"`-`\", except for the first character which must be one of a-z, A-Z and \"`_`\" (i.e. digits and \"`-`\" are not permitted as first character). The user/group name must have at least one character, and at most 31. These restrictions are made in order to avoid ambiguities and to ensure user/group names and unit files remain portable among Linux systems. For further details on the names accepted and the names warned about see [User/Group Name Syntax](https://systemd.io/USER_NAMES).\n\nWhen used in conjunction with `DynamicUser=` the user/group name specified is dynamically allocated at the time the service is started, and released at the time the service is stopped â€” unless it is already allocated statically (see below). If `DynamicUser=` is not used the specified user and group must have been created statically in the user database no later than the moment the service is started, for example using the [sysusers.d(5)](sysusers.d.html) facility, which is applied at boot or package install time. If the user does not exist by then program invocation will fail.\n\nIf the `User=` setting is used the supplementary group list is initialized from the specified user's default group list, as defined in the system's user and group database. Additional groups may be configured through the `SupplementaryGroups=` setting (see below)."],
[4,126,"Takes a boolean parameter. If set, a UNIX user and group pair is allocated dynamically when the unit is started, and released as soon as it is stopped. The user and group will not be added to `/etc/passwd` or `/etc/group`, but are managed transiently during runtime. The [nss-systemd(8)](nss-systemd.html) glibc NSS module provides integration of these dynamic users/groups into the system's user and group databases. The user and group name to use may be configured via `User=` and `Group=` (see above). If these options are not used and dynamic user/group allocation is enabled for a unit, the name of the dynamic user/group is implicitly derived from the unit name. If the unit name without the type suffix qualifies as valid user name it is used directly, otherwise a name incorporating a hash of it is used. If a statically allocated user or group of the configured name already exists, it is used and no dynamic user/group is allocated. Note that if `User=` is specified and the static group with the name exists, then it is required that the static user with the name already exists. Similarly, if `Group=` is specified and the static user with the name exists, then it is required that the static group with the name already exists. Dynamic users/groups are allocated from the UID/GID range 61184â€¦65519. It is recommended to avoid this range for regular system or login users. At any point in time each UID/GID from this range is only assigned to zero or one dynamically allocated users/groups in use. However, UID/GIDs are recycled after a unit is terminated. Care should be taken that any processes running as part of a unit for which dynamic users/groups are enabled do not leave files or directories owned by these users/groups around, as a different unit might get the same UID/GID assigned later on, and thus gain access to these files or directories. If `DynamicUser=` is enabled, `RemoveIPC=` and `PrivateTmp=` are implied (and cannot be turned off). This ensures that the lifetime of IPC objects and temporary files created by the executed processes is bound to the runtime of the service, and hence the lifetime of the dynamic user/group. Since `/tmp/` and `/var/tmp/` are usually the only world-writable directories on a system this ensures that a unit making use of dynamic user/group allocation cannot leave files around after unit termination. Furthermore `NoNewPrivileges=` and `RestrictSUIDSGID=` are implicitly enabled (and cannot be disabled), to ensure that processes invoked cannot take benefit or create SUID/SGID files or directories. Moreover `ProtectSystem=strict` and `ProtectHome=read-only` are implied, thus prohibiting the service to write to arbitrary file system locations. In order to allow the service to write to certain directories, they have to be allow-listed using `ReadWritePaths=`, but care must be taken so that UID/GID recycling doesn't create security issues involving files created by the service. Use `RuntimeDirectory=` (see below) in order to assign a writable runtime directory to a service, owned by the dynamic user/group and removed automatically when the unit is terminated. Use `StateDirectory=`, `CacheDirectory=` and `LogsDirectory=` in order to assign a set of writable directories for specific purposes to the service in a way that they are protected from vulnerabilities due to UID reuse (see below). If this option is enabled, care should be taken that the unit's processes do not get access to directories outside of these explicitly configured and managed ones. Specifically, do not use `BindPaths=` and be careful with `AF_UNIX` file descriptor passing for directory file descriptors, as this would permit processes to create files or directories owned by the dynamic user/group that are not subject to the lifecycle and access guarantees of the service. Note that this option is currently incompatible with D-Bus policies, thus a service using this option may currently not allocate a D-Bus service name (note that this does not affect calling into other D-Bus services). Defaults to off.\n\nAdded in version 232."],
[4,127,"Sets the supplementary Unix groups the processes are executed as. This takes a space-separated list of group names or IDs. This option may be specified more than once, in which case all listed groups are set as supplementary groups. When the empty string is assigned, the list of supplementary groups is reset, and all assignments prior to this one will have no effect. In any way, this option does not override, but extends the list of supplementary groups configured in the system group database for the user. This does not affect commands prefixed with \"`+`\"."],
[4,128,"Takes a boolean parameter that controls whether to set `$HOME`, `$LOGNAME`, and `$SHELL` environment variables. If unset, this is controlled by whether `User=` is set. If true, they will always be set for system services, i.e. even when the default user \"`root`\" is used. If false, the mentioned variables are not set by systemd, no matter whether `User=` is used or not. This option normally has no effect on user services, since these variables are typically inherited from user manager's own environment anyway.\n\nAdded in version 255."],
[4,129,"Sets the PAM service name to set up a session as. If set, the executed process will be registered as a PAM session under the specified service name. This is only useful in conjunction with the `User=` setting, and is otherwise ignored. If not set, no PAM session will be opened for the executed processes. See [pam(8)](https://man7.org/linux/man-pages/man8/pam.8.html) for details.\n\nNote that for each unit making use of this option a PAM session handler process will be maintained as part of the unit and stays around as long as the unit is active, to ensure that appropriate actions can be taken when the unit and hence the PAM session terminates. This process is named \"`(sd-pam)`\" and is an immediate child process of the unit's main process.\n\nNote that when this option is used for a unit it is very likely (depending on PAM configuration) that the main unit process will be migrated to its own session scope unit when it is activated. This process will hence be associated with two units: the unit it was originally started from (and for which `PAMName=` was configured), and the session scope unit. Any child processes of that process will however be associated with the session scope unit only. This has implications when used in combination with `NotifyAccess=``all`, as these child processes will not be able to affect changes in the original unit through notification messages. These messages will be considered belonging to the session scope unit and not the original unit. It is hence not recommended to use `PAMName=` in combination with `NotifyAccess=``all`."],
[4,130,"Controls which capabilities to include in the capability bounding set for the executed process. See [capabilities(7)](https://man7.org/linux/man-pages/man7/capabilities.7.html) for details. Takes a whitespace-separated list of capability names, e.g. `CAP_SYS_ADMIN`, `CAP_DAC_OVERRIDE`, `CAP_SYS_PTRACE`. Capabilities listed will be included in the bounding set, all others are removed. If the list of capabilities is prefixed with \"`~`\", all but the listed capabilities will be included, the effect of the assignment inverted. Note that this option also affects the respective capabilities in the effective, permitted and inheritable capability sets. If this option is not used, the capability bounding set is not modified on process execution, hence no limits on the capabilities of the process are enforced. This option may appear more than once, in which case the bounding sets are merged by `OR`, or by `AND` if the lines are prefixed with \"`~`\" (see below). If the empty string is assigned to this option, the bounding set is reset to the empty capability set, and all prior settings have no effect. If set to \"`~`\" (without any further argument), the bounding set is reset to the full set of available capabilities, also undoing any previous settings. This does not affect commands prefixed with \"`+`\".\n\nUse [systemd-analyze(1)](systemd-analyze.html)'s **capability** command to retrieve a list of capabilities defined on the local system.\n\nExample: if a unit has the following,\n\nCapabilityBoundingSet=CAP\\_A CAP\\_B\nCapabilityBoundingSet=CAP\\_B CAP\\_C\n\nthen `CAP_A`, `CAP_B`, and `CAP_C` are set. If the second line is prefixed with \"`~`\", e.g.,\n\nCapabilityBoundingSet=CAP\\_A CAP\\_B\nCapabilityBoundingSet=~CAP\\_B CAP\\_C\n\nthen, only `CAP_A` is set."],
[4,131,"Controls which capabilities to include in the ambient capability set for the executed process. Takes a whitespace-separated list of capability names, e.g. `CAP_SYS_ADMIN`, `CAP_DAC_OVERRIDE`, `CAP_SYS_PTRACE`. This option may appear more than once, in which case the ambient capability sets are merged (see the above examples in `CapabilityBoundingSet=`). If the list of capabilities is prefixed with \"`~`\", all but the listed capabilities will be included, the effect of the assignment inverted. If the empty string is assigned to this option, the ambient capability set is reset to the empty capability set, and all prior settings have no effect. If set to \"`~`\" (without any further argument), the ambient capability set is reset to the full set of available capabilities, also undoing any previous settings. Note that adding capabilities to the ambient capability set adds them to the process's inherited capability set.\n\nAmbient capability sets are useful if you want to execute a process as a non-privileged user but still want to give it some capabilities. Note that in this case option `keep-caps` is automatically added to `SecureBits=` to retain the capabilities over the user change. `AmbientCapabilities=` does not affect commands prefixed with \"`+`\".\n\nAdded in version 229."],
[4,132,"Takes a boolean argument. If true, ensures that the service process and all its children can never gain new privileges through `execve()` (e.g. via setuid or setgid bits, or filesystem capabilities). This is the simplest and most effective way to ensure that a process and its children can never elevate privileges again. Defaults to false. In case the service will be run in a new mount namespace anyway and SELinux is disabled, all file systems are mounted with `MS_NOSUID` flag. Also see [No New Privileges Flag](https://docs.kernel.org/userspace-api/no_new_privs.html).\n\nNote that this setting only has an effect on the unit's processes themselves (or any processes directly or indirectly forked off them). It has no effect on processes potentially invoked on request of them through tools such as [at(1)](https://man7.org/linux/man-pages/man1/at.1.html), [crontab(1)](https://man7.org/linux/man-pages/man1/crontab.1.html), [systemd-run(1)](systemd-run.html), or arbitrary IPC services.\n\nAdded in version 187."],
[4,133,"Controls the secure bits set for the executed process. Takes a space-separated combination of options from the following list: `keep-caps`, `keep-caps-locked`, `no-setuid-fixup`, `no-setuid-fixup-locked`, `noroot`, and `noroot-locked`. This option may appear more than once, in which case the secure bits are ORed. If the empty string is assigned to this option, the bits are reset to 0. This does not affect commands prefixed with \"`+`\". See [capabilities(7)](https://man7.org/linux/man-pages/man7/capabilities.7.html) for details."],
[4,134,"Set the SELinux security context of the executed process. If set, this will override the automated domain transition. However, the policy still needs to authorize the transition. This directive is ignored if SELinux is disabled. If prefixed by \"`-`\", failing to set the SELinux security context will be ignored, but it's still possible that the subsequent `execve()` may fail if the policy doesn't allow the transition for the non-overridden context. This does not affect commands prefixed with \"`+`\". See [setexeccon(3)](http://linux.die.net/man/3/setexeccon) for details.\n\nAdded in version 209."],
[4,135,"Takes a profile name as argument. The process executed by the unit will switch to this profile when started. Profiles must already be loaded in the kernel, or the unit will fail. If prefixed by \"`-`\", all errors will be ignored. This setting has no effect if AppArmor is not enabled. This setting does not affect commands prefixed with \"`+`\".\n\nAdded in version 210."],
[4,136,"Takes a `SMACK64` security label as argument. The process executed by the unit will be started under this label and SMACK will decide whether the process is allowed to run or not, based on it. The process will continue to run under the label specified here unless the executable has its own `SMACK64EXEC` label, in which case the process will transition to run under that label. When not specified, the label that systemd is running under is used. This directive is ignored if SMACK is disabled.\n\nThe value may be prefixed by \"`-`\", in which case all errors will be ignored. An empty value may be specified to unset previous assignments. This does not affect commands prefixed with \"`+`\".\n\nAdded in version 218."],
[4,137,"Set soft and hard limits on various resources for executed processes. See [setrlimit(2)](https://man7.org/linux/man-pages/man2/setrlimit.2.html) for details on the process resource limit concept. Process resource limits may be specified in two formats: either as single value to set a specific soft and hard limit to the same value, or as colon-separated pair `soft:hard` to set both limits individually (e.g. \"`LimitAS=4G:16G`\"). Use the string `infinity` to configure no limit on a specific resource. The multiplicative suffixes K, M, G, T, P and E (to the base 1024) may be used for resource limits measured in bytes (e.g. \"`LimitAS=16G`\"). For the limits referring to time values, the usual time units ms, s, min, h and so on may be used (see [systemd.time(7)](systemd.time.html) for details). Note that if no time unit is specified for `LimitCPU=` the default unit of seconds is implied, while for `LimitRTTIME=` the default unit of microseconds is implied. Also, note that the effective granularity of the limits might influence their enforcement. For example, time limits specified for `LimitCPU=` will be rounded up implicitly to multiples of 1s. For `LimitNICE=` the value may be specified in two syntaxes: if prefixed with \"`+`\" or \"`-`\", the value is understood as regular Linux nice value in the range -20â€¦19. If not prefixed like this the value is understood as raw resource limit parameter in the range 0â€¦40 (with 0 being equivalent to 1).\n\nNote that most process resource limits configured with these options are per-process, and processes may fork in order to acquire a new set of resources that are accounted independently of the original process, and may thus escape limits set. Also note that `LimitRSS=` is not implemented on Linux, and setting it has no effect. Often it is advisable to prefer the resource controls listed in [systemd.resource-control(5)](systemd.resource-control.html) over these per-process limits, as they apply to services as a whole, may be altered dynamically at runtime, and are generally more expressive. For example, `MemoryMax=` is a more powerful (and working) replacement for `LimitRSS=`.\n\nNote that `LimitNPROC=` will limit the number of processes from one (real) UID and not the number of processes started (forked) by the service. Therefore the limit is cumulative for all processes running under the same UID. Please also note that the `LimitNPROC=` will not be enforced if the service is running as root (and not dropping privileges). Due to these limitations, `TasksMax=` (see [systemd.resource-control(5)](systemd.resource-control.html)) is typically a better choice than `LimitNPROC=`.\n\nResource limits not configured explicitly for a unit default to the value configured in the various `DefaultLimitCPU=`, `DefaultLimitFSIZE=`, â€¦ options available in [systemd-system.conf(5)](systemd-system.conf.html), and â€“ if not configured there â€“ the kernel or per-user defaults, as defined by the OS (the latter only for user services, see below).\n\nFor system units these resource limits may be chosen freely. When these settings are configured in a user service (i.e. a service run by the per-user instance of the service manager) they cannot be used to raise the limits above those set for the user manager itself when it was first invoked, as the user's service manager generally lacks the privileges to do so. In user context these configuration options are hence only useful to lower the limits passed in or to raise the soft limit to the maximum of the hard limit as configured for the user. To raise the user's limits further, the available configuration mechanisms differ between operating systems, but typically require privileges. In most cases it is possible to configure higher per-user resource limits via PAM or by setting limits on the system service encapsulating the user's service manager, i.e. the user's instance of `user@.service`. After making such changes, make sure to restart the user's service manager.\n\n**TableÂ 1.Â Resource limit directives, their equivalent ulimit shell commands and the unit used**\n\nDirective\n\n**ulimit** equivalent\n\nUnit\n\nNotes\n\nLimitCPU=\n\nulimit -t\n\nSeconds\n\n\\-\n\nLimitFSIZE=\n\nulimit -f\n\nBytes\n\n\\-\n\nLimitDATA=\n\nulimit -d\n\nBytes\n\nDon't use. This limits the allowed address range, not memory use! Defaults to unlimited and should not be lowered. To limit memory use, see `MemoryMax=` in [systemd.resource-control(5)](systemd.resource-control.html).\n\nLimitSTACK=\n\nulimit -s\n\nBytes\n\n\\-\n\nLimitCORE=\n\nulimit -c\n\nBytes\n\n\\-\n\nLimitRSS=\n\nulimit -m\n\nBytes\n\nDon't use. No effect on Linux.\n\nLimitNOFILE=\n\nulimit -n\n\nNumber of File Descriptors\n\nDon't use. Be careful when raising the soft limit above 1024, since [select(2)](https://man7.org/linux/man-pages/man2/select.2.html) cannot function with file descriptors above 1023 on Linux. Nowadays, the hard limit defaults to 524288, a very high value compared to historical defaults. Typically applications should increase their soft limit to the hard limit on their own, if they are OK with working with file descriptors above 1023, i.e. do not use [select(2)](https://man7.org/linux/man-pages/man2/select.2.html). Note that file descriptors are nowadays accounted like any other form of memory, thus there should not be any need to lower the hard limit. Use `MemoryMax=` to control overall service memory use, including file descriptor memory.\n\nLimitAS=\n\nulimit -v\n\nBytes\n\nDon't use. This limits the allowed address range, not memory use! Defaults to unlimited and should not be lowered. To limit memory use, see `MemoryMax=` in [systemd.resource-control(5)](systemd.resource-control.html).\n\nLimitNPROC=\n\nulimit -u\n\nNumber of Processes\n\nThis limit is enforced based on the number of processes belonging to the user. Typically it's better to track processes per service, i.e. use `TasksMax=`, see [systemd.resource-control(5)](systemd.resource-control.html).\n\nLimitMEMLOCK=\n\nulimit -l\n\nBytes\n\n\\-\n\nLimitLOCKS=\n\nulimit -x\n\nNumber of Locks\n\n\\-\n\nLimitSIGPENDING=\n\nulimit -i\n\nNumber of Queued Signals\n\n\\-\n\nLimitMSGQUEUE=\n\nulimit -q\n\nBytes\n\n\\-\n\nLimitNICE=\n\nulimit -e\n\nNice Level\n\n\\-\n\nLimitRTPRIO=\n\nulimit -r\n\nRealtime Priority\n\n\\-\n\nLimitRTTIME=\n\nulimit -R\n\nMicroseconds\n\n\\-"],
[4,138,"Controls the file mode creation mask. Takes an access mode in octal notation. See [umask(2)](https://man7.org/linux/man-pages/man2/umask.2.html) for details. Defaults to 0022 for system units. For user units the default value is inherited from the per-user service manager (whose default is in turn inherited from the system service manager, and thus typically also is 0022 â€” unless overridden by a PAM module). In order to change the per-user mask for all user services, consider setting the `UMask=` setting of the user's `user@.service` system service instance. The per-user umask may also be set via the `umask` field of a user's [JSON User Record](https://systemd.io/USER_RECORD) (for users managed by [systemd-homed.service(8)](systemd-homed.service.html) this field may be controlled via **homectl --umask=**). It may also be set via a PAM module, such as [pam\\_umask(8)](https://man7.org/linux/man-pages/man8/pam_umask.8.html)."],
[4,139,"Controls which types of memory mappings will be saved if the process dumps core (using the ``/proc/_`pid`_/coredump_filter`` file). Takes a whitespace-separated combination of mapping type names or numbers (with the default base 16). Mapping type names are `private-anonymous`, `shared-anonymous`, `private-file-backed`, `shared-file-backed`, `elf-headers`, `private-huge`, `shared-huge`, `private-dax`, `shared-dax`, and the special values `all` (all types) and `default` (the kernel default of \"`` `private-anonymous` `shared-anonymous` `elf-headers` `private-huge` ``\"). See [core(5)](https://man7.org/linux/man-pages/man5/core.5.html) for the meaning of the mapping types. When specified multiple times, all specified masks are ORed. When not set, or if the empty value is assigned, the inherited value is not changed.\n\n**ExampleÂ 2.Â Add DAX pages to the dump filter**\n\nCoredumpFilter=default private-dax shared-dax\n\n  \n\nAdded in version 246."],
[4,140,"Controls how the kernel session keyring is set up for the service (see [session-keyring(7)](https://man7.org/linux/man-pages/man7/session-keyring.7.html) for details on the session keyring). Takes one of `inherit`, `private`, `shared`. If set to `inherit` no special keyring setup is done, and the kernel's default behaviour is applied. If `private` is used a new session keyring is allocated when a service process is invoked, and it is not linked up with any user keyring. This is the recommended setting for system services, as this ensures that multiple services running under the same system user ID (in particular the root user) do not share their key material among each other. If `shared` is used a new session keyring is allocated as for `private`, but the user keyring of the user configured with `User=` is linked into it, so that keys assigned to the user may be requested by the unit's processes. In this mode multiple units running processes under the same user ID may share key material. Unless `inherit` is selected the unique invocation ID for the unit (see below) is added as a protected key by the name \"`invocation_id`\" to the newly created session keyring. Defaults to `private` for services of the system service manager and to `inherit` for non-service units and for services of the user service manager.\n\nAdded in version 235."],
[4,141,"Sets the adjustment value for the Linux kernel's Out-Of-Memory (OOM) killer score for executed processes. Takes an integer between -1000 (to disable OOM killing of processes of this unit) and 1000 (to make killing of processes of this unit under memory pressure very likely). See [The /proc Filesystem](https://docs.kernel.org/filesystems/proc.html) for details. If not specified defaults to the OOM score adjustment level of the service manager itself, which is normally at 0.\n\nUse the `OOMPolicy=` setting of service units to configure how the service manager shall react to the kernel OOM killer or **systemd-oomd** terminating a process of the service. See [systemd.service(5)](systemd.service.html) for details."],
[4,142,"Sets the timer slack in nanoseconds for the executed processes. The timer slack controls the accuracy of wake-ups triggered by timers. See [prctl(2)](https://man7.org/linux/man-pages/man2/prctl.2.html) for more information. Note that in contrast to most other time span definitions this parameter takes an integer value in nano-seconds if no unit is specified. The usual time units are understood too."],
[4,143,"Controls which kernel architecture [uname(2)](https://man7.org/linux/man-pages/man2/uname.2.html) shall report, when invoked by unit processes. Takes one of the architecture identifiers `arm64`, `arm64-be`, `arm`, `arm-be`, `x86`, `x86-64`, `ppc`, `ppc-le`, `ppc64`, `ppc64-le`, `s390` or `s390x`. Which personality architectures are supported depends on the kernel's native architecture. Usually the 64-bit versions of the various system architectures support their immediate 32-bit personality architecture counterpart, but no others. For example, `x86-64` systems support the `x86-64` and `x86` personalities but no others. The personality feature is useful when running 32-bit services on a 64-bit host system. If not specified, the personality is left unmodified and thus reflects the personality of the host system's kernel. This option is not useful on architectures for which only one native word width was ever available, such as `m68k` (32-bit only) or `alpha` (64-bit only).\n\nAdded in version 209."],
[4,144,"Takes a boolean argument. If true, causes `SIGPIPE` to be ignored in the executed process. Defaults to true because `SIGPIPE` generally is useful only in shell pipelines."],
[4,145,"Sets the default nice level (scheduling priority) for executed processes. Takes an integer between -20 (highest priority) and 19 (lowest priority). In case of resource contention, smaller values mean more resources will be made available to the unit's processes, larger values mean less resources will be made available. See [setpriority(2)](https://man7.org/linux/man-pages/man2/setpriority.2.html) for details."],
[4,146,"Sets the CPU scheduling policy for executed processes. Takes one of `other`, `batch`, `idle`, `fifo` or `rr`. See [sched\\_setscheduler(2)](https://man7.org/linux/man-pages/man2/sched_setscheduler.2.html) for details."],
[4,147,"Sets the CPU scheduling priority for executed processes. The available priority range depends on the selected CPU scheduling policy (see above). For real-time scheduling policies an integer between 1 (lowest priority) and 99 (highest priority) can be used. In case of CPU resource contention, smaller values mean less CPU time is made available to the service, larger values mean more. See [sched\\_setscheduler(2)](https://man7.org/linux/man-pages/man2/sched_setscheduler.2.html) for details."],
[4,148,"Takes a boolean argument. If true, elevated CPU scheduling priorities and policies will be reset when the executed processes call [fork(2)](https://man7.org/linux/man-pages/man2/fork.2.html), and can hence not leak into child processes. See [sched\\_setscheduler(2)](https://man7.org/linux/man-pages/man2/sched_setscheduler.2.html) for details. Defaults to false."],
[4,149,"Controls the CPU affinity of the executed processes. Takes a list of CPU indices or ranges separated by either whitespace or commas. Alternatively, takes a special \"numa\" value in which case systemd automatically derives allowed CPU range based on the value of `NUMAMask=` option. CPU ranges are specified by the lower and upper CPU indices separated by a dash. This option may be specified more than once, in which case the specified CPU affinity masks are merged. If the empty string is assigned, the mask is reset, all assignments prior to this will have no effect. See [sched\\_setaffinity(2)](https://man7.org/linux/man-pages/man2/sched_setaffinity.2.html) for details."],
[4,150,"Controls the NUMA memory policy of the executed processes. Takes a policy type, one of: `default`, `preferred`, `bind`, `interleave` and `local`. A list of NUMA nodes that should be associated with the policy must be specified in `NUMAMask=`. For more details on each policy please see, [set\\_mempolicy(2)](https://man7.org/linux/man-pages/man2/set_mempolicy.2.html). For overall overview of NUMA support in Linux see, [numa(7)](https://man7.org/linux/man-pages/man7/numa.7.html).\n\nAdded in version 243."],
[4,151,"Controls the NUMA node list which will be applied alongside with selected NUMA policy. Takes a list of NUMA nodes and has the same syntax as a list of CPUs for `CPUAffinity=` option or special \"all\" value which will include all available NUMA nodes in the mask. Note that the list of NUMA nodes is not required for `default` and `local` policies and for `preferred` policy we expect a single NUMA node.\n\nAdded in version 243."],
[4,152,"Sets the I/O scheduling class for executed processes. Takes one of the strings `realtime`, `best-effort` or `idle`. The kernel's default scheduling class is `best-effort` at a priority of 4. If the empty string is assigned to this option, all prior assignments to both `IOSchedulingClass=` and `IOSchedulingPriority=` have no effect. See [ioprio\\_set(2)](https://man7.org/linux/man-pages/man2/ioprio_set.2.html) for details."],
[4,153,"Sets the I/O scheduling priority for executed processes. Takes an integer between 0 (highest priority) and 7 (lowest priority). In case of I/O contention, smaller values mean more I/O bandwidth is made available to the unit's processes, larger values mean less bandwidth. The available priorities depend on the selected I/O scheduling class (see above). If the empty string is assigned to this option, all prior assignments to both `IOSchedulingClass=` and `IOSchedulingPriority=` have no effect. For the kernel's default scheduling class (`best-effort`) this defaults to 4. See [ioprio\\_set(2)](https://man7.org/linux/man-pages/man2/ioprio_set.2.html) for details."],
[4,154,"Takes a boolean argument or the special values \"`full`\" or \"`strict`\". If true, mounts the `/usr/` and the boot loader directories (`/boot` and `/efi`) read-only for processes invoked by this unit. If set to \"`full`\", the `/etc/` directory is mounted read-only, too. If set to \"`strict`\" the entire file system hierarchy is mounted read-only, except for the API file system subtrees `/dev/`, `/proc/` and `/sys/` (protect these directories using `PrivateDevices=`, `ProtectKernelTunables=`, `ProtectControlGroups=`). This setting ensures that any modification of the vendor-supplied operating system (and optionally its configuration, and local mounts) is prohibited for the service. It is recommended to enable this setting for all long-running services, unless they are involved with system updates or need to modify the operating system in other ways. If this option is used, `ReadWritePaths=` may be used to exclude specific directories from being made read-only. This setting is implied if `DynamicUser=` is set. This setting cannot ensure protection in all cases. In general it has the same limitations as `ReadOnlyPaths=`, see below. Defaults to off.\n\nAdded in version 214."],
[4,155,"Takes a boolean argument or the special values \"`read-only`\" or \"`tmpfs`\". If true, the directories `/home/`, `/root`, and `/run/user` are made inaccessible and empty for processes invoked by this unit. If set to \"`read-only`\", the three directories are made read-only instead. If set to \"`tmpfs`\", temporary file systems are mounted on the three directories in read-only mode. The value \"`tmpfs`\" is useful to hide home directories not relevant to the processes invoked by the unit, while still allowing necessary directories to be made visible when listed in `BindPaths=` or `BindReadOnlyPaths=`.\n\nSetting this to \"`yes`\" is mostly equivalent to setting the three directories in `InaccessiblePaths=`. Similarly, \"`read-only`\" is mostly equivalent to `ReadOnlyPaths=`, and \"`tmpfs`\" is mostly equivalent to `TemporaryFileSystem=` with \"`:ro`\".\n\nIt is recommended to enable this setting for all long-running services (in particular network-facing ones), to ensure they cannot get access to private user data, unless the services actually require access to the user's private data. This setting is implied if `DynamicUser=` is set. This setting cannot ensure protection in all cases. In general it has the same limitations as `ReadOnlyPaths=`, see below.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).\n\nAdded in version 214."],
[4,156,"These options take a whitespace-separated list of directory names. The specified directory names must be relative, and may not include \"`..`\". If set, when the unit is started, one or more directories by the specified names will be created (including their parents) below the locations defined in the following table. Also, the corresponding environment variable will be defined with the full paths of the directories. If multiple directories are set, then in the environment variable the paths are concatenated with colon (\"`:`\").\n\n**TableÂ 2.Â Automatic directory creation and environment variables**\n\nDirectory\n\nBelow path for system units\n\nBelow path for user units\n\nEnvironment variable set\n\n`RuntimeDirectory=`\n\n`/run/`\n\n`$XDG_RUNTIME_DIR`\n\n`$RUNTIME_DIRECTORY`\n\n`StateDirectory=`\n\n`/var/lib/`\n\n`$XDG_STATE_HOME`\n\n`$STATE_DIRECTORY`\n\n`CacheDirectory=`\n\n`/var/cache/`\n\n`$XDG_CACHE_HOME`\n\n`$CACHE_DIRECTORY`\n\n`LogsDirectory=`\n\n`/var/log/`\n\n`$XDG_STATE_HOME``/log/`\n\n`$LOGS_DIRECTORY`\n\n`ConfigurationDirectory=`\n\n`/etc/`\n\n`$XDG_CONFIG_HOME`\n\n`$CONFIGURATION_DIRECTORY`\n\n  \n\nIn case of `RuntimeDirectory=` the innermost subdirectories are removed when the unit is stopped. It is possible to preserve the specified directories in this case if `RuntimeDirectoryPreserve=` is configured to `restart` or `yes` (see below). The directories specified with `StateDirectory=`, `CacheDirectory=`, `LogsDirectory=`, `ConfigurationDirectory=` are not removed when the unit is stopped.\n\nExcept in case of `ConfigurationDirectory=`, the innermost specified directories will be owned by the user and group specified in `User=` and `Group=`. If the specified directories already exist and their owning user or group do not match the configured ones, all files and directories below the specified directories as well as the directories themselves will have their file ownership recursively changed to match what is configured. As an optimization, if the specified directories are already owned by the right user and group, files and directories below of them are left as-is, even if they do not match what is requested. The innermost specified directories will have their access mode adjusted to the what is specified in `RuntimeDirectoryMode=`, `StateDirectoryMode=`, `CacheDirectoryMode=`, `LogsDirectoryMode=` and `ConfigurationDirectoryMode=`.\n\nThese options imply `BindPaths=` for the specified paths. When combined with `RootDirectory=` or `RootImage=` these paths always reside on the host and are mounted from there into the unit's file system namespace.\n\nIf `DynamicUser=` is used, the logic for `CacheDirectory=`, `LogsDirectory=` and `StateDirectory=` is slightly altered: the directories are created below `/var/cache/private`, `/var/log/private` and `/var/lib/private`, respectively, which are host directories made inaccessible to unprivileged users, which ensures that access to these directories cannot be gained through dynamic user ID recycling. Symbolic links are created to hide this difference in behaviour. Both from perspective of the host and from inside the unit, the relevant directories hence always appear directly below `/var/cache`, `/var/log` and `/var/lib`.\n\nUse `RuntimeDirectory=` to manage one or more runtime directories for the unit and bind their lifetime to the daemon runtime. This is particularly useful for unprivileged daemons that cannot create runtime directories in `/run/` due to lack of privileges, and to make sure the runtime directory is cleaned up automatically after use. For runtime directories that require more complex or different configuration or lifetime guarantees, please consider using [tmpfiles.d(5)](tmpfiles.d.html).\n\n`RuntimeDirectory=`, `StateDirectory=`, `CacheDirectory=` and `LogsDirectory=` optionally support a second parameter, separated by \"`:`\". The second parameter will be interpreted as a destination path that will be created as a symlink to the directory. The symlinks will be created after any `BindPaths=` or `TemporaryFileSystem=` options have been set up, to make ephemeral symlinking possible. The same source can have multiple symlinks, by using the same first parameter, but a different second parameter.\n\nThe directories defined by these options are always created under the standard paths used by systemd (`/var/`, `/run/`, `/etc/`, â€¦). If the service needs directories in a different location, a different mechanism has to be used to create them.\n\n[tmpfiles.d(5)](tmpfiles.d.html) provides functionality that overlaps with these options. Using these options is recommended, because the lifetime of the directories is tied directly to the lifetime of the unit, and it is not necessary to ensure that the `tmpfiles.d` configuration is executed before the unit is started.\n\nTo remove any of the directories created by these settings, use the **systemctl clean â€¦** command on the relevant units, see [systemctl(1)](systemctl.html) for details.\n\nExample: if a system service unit has the following,\n\nRuntimeDirectory=foo/bar baz\n\nthe service manager creates `/run/foo` (if it does not exist), `/run/foo/bar`, and `/run/baz`. The directories `/run/foo/bar` and `/run/baz` except `/run/foo` are owned by the user and group specified in `User=` and `Group=`, and removed when the service is stopped.\n\nExample: if a system service unit has the following,\n\nRuntimeDirectory=foo/bar\nStateDirectory=aaa/bbb ccc\n\nthen the environment variable \"`RUNTIME_DIRECTORY`\" is set with \"`/run/foo/bar`\", and \"`STATE_DIRECTORY`\" is set with \"`/var/lib/aaa/bbb:/var/lib/ccc`\".\n\nExample: if a system service unit has the following,\n\nRuntimeDirectory=foo:bar foo:baz\n\nthe service manager creates `/run/foo` (if it does not exist), and `/run/bar` plus `/run/baz` as symlinks to `/run/foo`.\n\nAdded in version 211."],
[4,157,"Specifies the access mode of the directories specified in `RuntimeDirectory=`, `StateDirectory=`, `CacheDirectory=`, `LogsDirectory=`, or `ConfigurationDirectory=`, respectively, as an octal number. Defaults to `0755`. See \"Permissions\" in [path\\_resolution(7)](https://man7.org/linux/man-pages/man7/path_resolution.7.html) for a discussion of the meaning of permission bits.\n\nAdded in version 234."],
[4,158,"Takes a boolean argument or `restart`. If set to `no` (the default), the directories specified in `RuntimeDirectory=` are always removed when the service stops. If set to `restart` the directories are preserved when the service is both automatically and manually restarted. Here, the automatic restart means the operation specified in `Restart=`, and manual restart means the one triggered by **systemctl restart foo.service**. If set to `yes`, then the directories are not removed when the service is stopped. Note that since the runtime directory `/run/` is a mount point of \"`tmpfs`\", then for system services the directories specified in `RuntimeDirectory=` are removed when the system is rebooted.\n\nAdded in version 235."],
[4,159,"Configures a timeout on the clean-up operation requested through **systemctl clean â€¦**, see [systemctl(1)](systemctl.html) for details. Takes the usual time values and defaults to `infinity`, i.e. by default no timeout is applied. If a timeout is configured the clean operation will be aborted forcibly when the timeout is reached, potentially leaving resources on disk.\n\nAdded in version 244."],
[4,160,"Sets up a new file system namespace for executed processes. These options may be used to limit access a process has to the file system. Each setting takes a space-separated list of paths relative to the host's root directory (i.e. the system running the service manager). Note that if paths contain symlinks, they are resolved relative to the root directory set with `RootDirectory=`/`RootImage=`.\n\nPaths listed in `ReadWritePaths=` are accessible from within the namespace with the same access modes as from outside of it. Paths listed in `ReadOnlyPaths=` are accessible for reading only, writing will be refused even if the usual file access controls would permit this. Nest `ReadWritePaths=` inside of `ReadOnlyPaths=` in order to provide writable subdirectories within read-only directories. Use `ReadWritePaths=` in order to allow-list specific paths for write access if `ProtectSystem=strict` is used. Note that `ReadWritePaths=` cannot be used to gain write access to a file system whose superblock is mounted read-only. On Linux, for each mount point write access is granted only if the mount point itself _and_ the file system superblock backing it are not marked read-only. `ReadWritePaths=` only controls the former, not the latter, hence a read-only file system superblock remains protected.\n\nPaths listed in `InaccessiblePaths=` will be made inaccessible for processes inside the namespace along with everything below them in the file system hierarchy. This may be more restrictive than desired, because it is not possible to nest `ReadWritePaths=`, `ReadOnlyPaths=`, `BindPaths=`, or `BindReadOnlyPaths=` inside it. For a more flexible option, see `TemporaryFileSystem=`.\n\nContent in paths listed in `NoExecPaths=` are not executable even if the usual file access controls would permit this. Nest `ExecPaths=` inside of `NoExecPaths=` in order to provide executable content within non-executable directories.\n\nNon-directory paths may be specified as well. These options may be specified more than once, in which case all paths listed will have limited access from within the namespace. If the empty string is assigned to this option, the specific list is reset, and all prior assignments have no effect.\n\nPaths in `ReadWritePaths=`, `ReadOnlyPaths=`, `InaccessiblePaths=`, `ExecPaths=` and `NoExecPaths=` may be prefixed with \"`-`\", in which case they will be ignored when they do not exist. If prefixed with \"`+`\" the paths are taken relative to the root directory of the unit, as configured with `RootDirectory=`/`RootImage=`, instead of relative to the root directory of the host (see above). When combining \"`-`\" and \"`+`\" on the same path make sure to specify \"`-`\" first, and \"`+`\" second.\n\nNote that these settings will disconnect propagation of mounts from the unit's processes to the host. This means that this setting may not be used for services which shall be able to install mount points in the main mount namespace. For `ReadWritePaths=` and `ReadOnlyPaths=`, propagation in the other direction is not affected, i.e. mounts created on the host generally appear in the unit processes' namespace, and mounts removed on the host also disappear there too. In particular, note that mount propagation from host to unit will result in unmodified mounts to be created in the unit's namespace, i.e. writable mounts appearing on the host will be writable in the unit's namespace too, even when propagated below a path marked with `ReadOnlyPaths=`! Restricting access with these options hence does not extend to submounts of a directory that are created later on. This means the lock-down offered by that setting is not complete, and does not offer full protection.\n\nNote that the effect of these settings may be undone by privileged processes. In order to set up an effective sandboxed environment for a unit it is thus recommended to combine these settings with either `CapabilityBoundingSet=~CAP_SYS_ADMIN` or `SystemCallFilter=~@mount`.\n\nPlease be extra careful when applying these options to API file systems (a list of them could be found in `MountAPIVPS=`), since they may be required for basic system functionalities. Moreover, `/run/` needs to be writable for setting up mount namespace and propagation.\n\nSimple allow-list example using these directives:\n\n\\[Service\\]\nReadOnlyPaths=/\nReadWritePaths=/var /run\nInaccessiblePaths=-/lost+found\nNoExecPaths=/\nExecPaths=/usr/sbin/my\\_daemon /usr/lib /usr/lib64\n\nThese options are only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).\n\nAdded in version 231."],
[4,161,"Takes a space-separated list of mount points for temporary file systems (tmpfs). If set, a new file system namespace is set up for executed processes, and a temporary file system is mounted on each mount point. This option may be specified more than once, in which case temporary file systems are mounted on all listed mount points. If the empty string is assigned to this option, the list is reset, and all prior assignments have no effect. Each mount point may optionally be suffixed with a colon (\"`:`\") and mount options such as \"`size=10%`\" or \"`ro`\". By default, each temporary file system is mounted with \"`nodev,strictatime,mode=0755`\". These can be disabled by explicitly specifying the corresponding mount options, e.g., \"`dev`\" or \"`nostrictatime`\".\n\nThis is useful to hide files or directories not relevant to the processes invoked by the unit, while necessary files or directories can be still accessed by combining with `BindPaths=` or `BindReadOnlyPaths=`:\n\nExample: if a unit has the following,\n\nTemporaryFileSystem=/var:ro\nBindReadOnlyPaths=/var/lib/systemd\n\nthen the invoked processes by the unit cannot see any files or directories under `/var/` except for `/var/lib/systemd` or its contents.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).\n\nAdded in version 238."],
[4,162,"Takes a boolean argument. If true, sets up a new file system namespace for the executed processes and mounts private `/tmp/` and `/var/tmp/` directories inside it that are not shared by processes outside of the namespace. This is useful to secure access to temporary files of the process, but makes sharing between processes via `/tmp/` or `/var/tmp/` impossible. If true, all temporary files created by a service in these directories will be removed after the service is stopped. Defaults to false. It is possible to run two or more units within the same private `/tmp/` and `/var/tmp/` namespace by using the `JoinsNamespaceOf=` directive, see [systemd.unit(5)](systemd.unit.html) for details. This setting is implied if `DynamicUser=` is set. For this setting, the same restrictions regarding mount propagation and privileges apply as for `ReadOnlyPaths=` and related calls, see above. Enabling this setting has the side effect of adding `Requires=` and `After=` dependencies on all mount units necessary to access `/tmp/` and `/var/tmp/`. Moreover an implicitly `After=` ordering on [systemd-tmpfiles-setup.service(8)](systemd-tmpfiles-setup.service.html) is added.\n\nNote that the implementation of this setting might be impossible (for example if mount namespaces are not available), and the unit should be written in a way that does not solely rely on this setting for security.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl)."],
[4,163,"Takes a boolean argument. If true, sets up a new `/dev/` mount for the executed processes and only adds API pseudo devices such as `/dev/null`, `/dev/zero` or `/dev/random` (as well as the pseudo TTY subsystem) to it, but no physical devices such as `/dev/sda`, system memory `/dev/mem`, system ports `/dev/port` and others. This is useful to turn off physical device access by the executed process. Defaults to false.\n\nEnabling this option will install a system call filter to block low-level I/O system calls that are grouped in the `@raw-io` set, remove `CAP_MKNOD` and `CAP_SYS_RAWIO` from the capability bounding set for the unit, and set `DevicePolicy=closed` (see [systemd.resource-control(5)](systemd.resource-control.html) for details). Note that using this setting will disconnect propagation of mounts from the service to the host (propagation in the opposite direction continues to work). This means that this setting may not be used for services which shall be able to install mount points in the main mount namespace. The new `/dev/` will be mounted read-only and 'noexec'. The latter may break old programs which try to set up executable memory by using [mmap(2)](https://man7.org/linux/man-pages/man2/mmap.2.html) of `/dev/zero` instead of using `MAP_ANON`. For this setting the same restrictions regarding mount propagation and privileges apply as for `ReadOnlyPaths=` and related calls, see above.\n\nNote that the implementation of this setting might be impossible (for example if mount namespaces are not available), and the unit should be written in a way that does not solely rely on this setting for security.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).\n\nWhen access to some but not all devices must be possible, the `DeviceAllow=` setting might be used instead. See [systemd.resource-control(5)](systemd.resource-control.html).\n\nAdded in version 209."],
[4,164,"Takes a boolean argument. If true, sets up a new network namespace for the executed processes and configures only the loopback network device \"`lo`\" inside it. No other network devices will be available to the executed process. This is useful to turn off network access by the executed process. Defaults to false. It is possible to run two or more units within the same private network namespace by using the `JoinsNamespaceOf=` directive, see [systemd.unit(5)](systemd.unit.html) for details. Note that this option will disconnect all socket families from the host, including `AF_NETLINK` and `AF_UNIX`. Effectively, for `AF_NETLINK` this means that device configuration events received from [systemd-udevd.service(8)](systemd-udevd.service.html) are not delivered to the unit's processes. And for `AF_UNIX` this has the effect that `AF_UNIX` sockets in the abstract socket namespace of the host will become unavailable to the unit's processes (however, those located in the file system will continue to be accessible).\n\nNote that the implementation of this setting might be impossible (for example if network namespaces are not available), and the unit should be written in a way that does not solely rely on this setting for security.\n\nWhen this option is enabled, `PrivateMounts=` is implied unless it is explicitly disabled, and `/sys` will be remounted to associate it with the new network namespace.\n\nWhen this option is used on a socket unit any sockets bound on behalf of this unit will be bound within a private network namespace. This may be combined with `JoinsNamespaceOf=` to listen on sockets inside of network namespaces of other services.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl)."],
[4,165,"Takes an absolute file system path referring to a Linux network namespace pseudo-file (i.e. a file like `/proc/$PID/ns/net` or a bind mount or symlink to one). When set the invoked processes are added to the network namespace referenced by that path. The path has to point to a valid namespace file at the moment the processes are forked off. If this option is used `PrivateNetwork=` has no effect. If this option is used together with `JoinsNamespaceOf=` then it only has an effect if this unit is started before any of the listed units that have `PrivateNetwork=` or `NetworkNamespacePath=` configured, as otherwise the network namespace of those units is reused.\n\nWhen this option is enabled, `PrivateMounts=` is implied unless it is explicitly disabled, and `/sys` will be remounted to associate it with the new network namespace.\n\nWhen this option is used on a socket unit any sockets bound on behalf of this unit will be bound within the specified network namespace.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).\n\nAdded in version 242."],
[4,166,"Takes a boolean argument. If true, sets up a new IPC namespace for the executed processes. Each IPC namespace has its own set of System V IPC identifiers and its own POSIX message queue file system. This is useful to avoid name clash of IPC identifiers. Defaults to false. It is possible to run two or more units within the same private IPC namespace by using the `JoinsNamespaceOf=` directive, see [systemd.unit(5)](systemd.unit.html) for details.\n\nNote that IPC namespacing does not have an effect on `AF_UNIX` sockets, which are the most common form of IPC used on Linux. Instead, `AF_UNIX` sockets in the file system are subject to mount namespacing, and those in the abstract namespace are subject to network namespacing. IPC namespacing only has an effect on SysV IPC (which is mostly legacy) as well as POSIX message queues (for which `AF_UNIX`/`SOCK_SEQPACKET` sockets are typically a better replacement). IPC namespacing also has no effect on POSIX shared memory (which is subject to mount namespacing) either. See [ipc\\_namespaces(7)](https://man7.org/linux/man-pages/man7/ipc_namespaces.7.html) for the details.\n\nNote that the implementation of this setting might be impossible (for example if IPC namespaces are not available), and the unit should be written in a way that does not solely rely on this setting for security.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).\n\nAdded in version 248."],
[4,167,"Takes an absolute file system path referring to a Linux IPC namespace pseudo-file (i.e. a file like `/proc/$PID/ns/ipc` or a bind mount or symlink to one). When set the invoked processes are added to the network namespace referenced by that path. The path has to point to a valid namespace file at the moment the processes are forked off. If this option is used `PrivateIPC=` has no effect. If this option is used together with `JoinsNamespaceOf=` then it only has an effect if this unit is started before any of the listed units that have `PrivateIPC=` or `IPCNamespacePath=` configured, as otherwise the network namespace of those units is reused.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).\n\nAdded in version 248."],
[4,168,"Takes a boolean argument. When set, it enables KSM (kernel samepage merging) for the processes. KSM is a memory-saving de-duplication feature. Anonymous memory pages with identical content can be replaced by a single write-protected page. This feature should only be enabled for jobs that share the same security domain. For details, see [Kernel Samepage Merging](https://docs.kernel.org/admin-guide/mm/ksm.html) in the kernel documentation.\n\nNote that this functionality might not be available, for example if KSM is disabled in the kernel, or the kernel doesn't support controlling KSM at the process level through [prctl(2)](https://man7.org/linux/man-pages/man2/prctl.2.html).\n\nAdded in version 254."],
[4,169,"Takes a boolean argument. If true, sets up a new user namespace for the executed processes and configures a minimal user and group mapping, that maps the \"`root`\" user and group as well as the unit's own user and group to themselves and everything else to the \"`nobody`\" user and group. This is useful to securely detach the user and group databases used by the unit from the rest of the system, and thus to create an effective sandbox environment. All files, directories, processes, IPC objects and other resources owned by users/groups not equaling \"`root`\" or the unit's own will stay visible from within the unit but appear owned by the \"`nobody`\" user and group. If this mode is enabled, all unit processes are run without privileges in the host user namespace (regardless if the unit's own user/group is \"`root`\" or not). Specifically this means that the process will have zero process capabilities on the host's user namespace, but full capabilities within the service's user namespace. Settings such as `CapabilityBoundingSet=` will affect only the latter, and there's no way to acquire additional capabilities in the host's user namespace. Defaults to off.\n\nWhen this setting is set up by a per-user instance of the service manager, the mapping of the \"`root`\" user and group to itself is omitted (unless the user manager is root). Additionally, in the per-user instance manager case, the user namespace will be set up before most other namespaces. This means that combining `PrivateUsers=``true` with other namespaces will enable use of features not normally supported by the per-user instances of the service manager.\n\nThis setting is particularly useful in conjunction with `RootDirectory=`/`RootImage=`, as the need to synchronize the user and group databases in the root directory and on the host is reduced, as the only users and groups who need to be matched are \"`root`\", \"`nobody`\" and the unit's own user and group.\n\nNote that the implementation of this setting might be impossible (for example if user namespaces are not available), and the unit should be written in a way that does not solely rely on this setting for security.\n\nAdded in version 232."],
[4,170,"Takes a boolean argument. When set, sets up a new UTS namespace for the executed processes. In addition, changing hostname or domainname is prevented. Defaults to off.\n\nNote that the implementation of this setting might be impossible (for example if UTS namespaces are not available), and the unit should be written in a way that does not solely rely on this setting for security.\n\nNote that when this option is enabled for a service hostname changes no longer propagate from the system into the service, it is hence not suitable for services that need to take notice of system hostname changes dynamically.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).\n\nAdded in version 242."],
[4,171,"Takes a boolean argument. If set, writes to the hardware clock or system clock will be denied. Defaults to off. Enabling this option removes `CAP_SYS_TIME` and `CAP_WAKE_ALARM` from the capability bounding set for this unit, installs a system call filter to block calls that can set the clock, and `DeviceAllow=char-rtc r` is implied. Note that the system calls are blocked altogether, the filter does not take into account that some of the calls can be used to read the clock state with some parameter combinations. Effectively, `/dev/rtc0`, `/dev/rtc1`, etc. are made read-only to the service. See [systemd.resource-control(5)](systemd.resource-control.html) for the details about `DeviceAllow=`.\n\nIt is recommended to turn this on for most services that do not need modify the clock or check its state.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).\n\nAdded in version 245."],
[4,172,"Takes a boolean argument. If true, kernel variables accessible through `/proc/sys/`, `/sys/`, `/proc/sysrq-trigger`, `/proc/latency_stats`, `/proc/acpi`, `/proc/timer_stats`, `/proc/fs` and `/proc/irq` will be made read-only to all processes of the unit. Usually, tunable kernel variables should be initialized only at boot-time, for example with the [sysctl.d(5)](sysctl.d.html) mechanism. Few services need to write to these at runtime; it is hence recommended to turn this on for most services. For this setting the same restrictions regarding mount propagation and privileges apply as for `ReadOnlyPaths=` and related calls, see above. Defaults to off. Note that this option does not prevent indirect changes to kernel tunables effected by IPC calls to other processes. However, `InaccessiblePaths=` may be used to make relevant IPC file system objects inaccessible. If `ProtectKernelTunables=` is set, `MountAPIVFS=yes` is implied.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).\n\nAdded in version 232."],
[4,173,"Takes a boolean argument. If true, explicit module loading will be denied. This allows module load and unload operations to be turned off on modular kernels. It is recommended to turn this on for most services that do not need special file systems or extra kernel modules to work. Defaults to off. Enabling this option removes `CAP_SYS_MODULE` from the capability bounding set for the unit, and installs a system call filter to block module system calls, also `/usr/lib/modules` is made inaccessible. For this setting the same restrictions regarding mount propagation and privileges apply as for `ReadOnlyPaths=` and related calls, see above. Note that limited automatic module loading due to user configuration or kernel mapping tables might still happen as side effect of requested user operations, both privileged and unprivileged. To disable module auto-load feature please see [sysctl.d(5)](sysctl.d.html) `kernel.modules_disabled` mechanism and `/proc/sys/kernel/modules_disabled` documentation.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).\n\nAdded in version 232."],
[4,174,"Takes a boolean argument. If true, access to the kernel log ring buffer will be denied. It is recommended to turn this on for most services that do not need to read from or write to the kernel log ring buffer. Enabling this option removes `CAP_SYSLOG` from the capability bounding set for this unit, and installs a system call filter to block the [syslog(2)](https://man7.org/linux/man-pages/man2/syslog.2.html) system call (not to be confused with the libc API [syslog(3)](https://man7.org/linux/man-pages/man3/syslog.3.html) for userspace logging). The kernel exposes its log buffer to userspace via `/dev/kmsg` and `/proc/kmsg`. If enabled, these are made inaccessible to all the processes in the unit.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).\n\nAdded in version 244."],
[4,175,"Takes a boolean argument. If true, the Linux Control Groups ([cgroups(7)](https://man7.org/linux/man-pages/man7/cgroups.7.html)) hierarchies accessible through `/sys/fs/cgroup/` will be made read-only to all processes of the unit. Except for container managers no services should require write access to the control groups hierarchies; it is hence recommended to turn this on for most services. For this setting the same restrictions regarding mount propagation and privileges apply as for `ReadOnlyPaths=` and related calls, see above. Defaults to off. If `ProtectControlGroups=` is set, `MountAPIVFS=yes` is implied.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.\n\nAdded in version 232."],
[4,176,"Restricts the set of socket address families accessible to the processes of this unit. Takes \"`none`\", or a space-separated list of address family names to allow-list, such as `AF_UNIX`, `AF_INET` or `AF_INET6`. When \"`none`\" is specified, then all address families will be denied. When prefixed with \"`~`\" the listed address families will be applied as deny list, otherwise as allow list. Note that this restricts access to the [socket(2)](https://man7.org/linux/man-pages/man2/socket.2.html) system call only. Sockets passed into the process by other means (for example, by using socket activation with socket units, see [systemd.socket(5)](systemd.socket.html)) are unaffected. Also, sockets created with `socketpair()` (which creates connected AF\\_UNIX sockets only) are unaffected. Note that this option has no effect on 32-bit x86, s390, s390x, mips, mips-le, ppc, ppc-le, ppc64, ppc64-le and is ignored (but works correctly on other ABIs, including x86-64). Note that on systems supporting multiple ABIs (such as x86/x86-64) it is recommended to turn off alternative ABIs for services, so that they cannot be used to circumvent the restrictions of this option. Specifically, it is recommended to combine this option with `SystemCallArchitectures=native` or similar. By default, no restrictions apply, all address families are accessible to processes. If assigned the empty string, any previous address family restriction changes are undone. This setting does not affect commands prefixed with \"`+`\".\n\nUse this option to limit exposure of processes to remote access, in particular via exotic and sensitive network protocols, such as `AF_PACKET`. Note that in most cases, the local `AF_UNIX` address family should be included in the configured allow list as it is frequently used for local communication, including for [syslog(2)](https://man7.org/linux/man-pages/man2/syslog.2.html) logging.\n\nAdded in version 211."],
[4,177,"Restricts the set of filesystems processes of this unit can open files on. Takes a space-separated list of filesystem names. Any filesystem listed is made accessible to the unit's processes, access to filesystem types not listed is prohibited (allow-listing). If the first character of the list is \"`~`\", the effect is inverted: access to the filesystems listed is prohibited (deny-listing). If the empty string is assigned, access to filesystems is not restricted.\n\nIf you specify both types of this option (i.e. allow-listing and deny-listing), the first encountered will take precedence and will dictate the default action (allow access to the filesystem or deny it). Then the next occurrences of this option will add or delete the listed filesystems from the set of the restricted filesystems, depending on its type and the default action.\n\nExample: if a unit has the following,\n\nRestrictFileSystems=ext4 tmpfs\nRestrictFileSystems=ext2 ext4\n\nthen access to `ext4`, `tmpfs`, and `ext2` is allowed and access to other filesystems is denied.\n\nExample: if a unit has the following,\n\nRestrictFileSystems=ext4 tmpfs\nRestrictFileSystems=~ext4\n\nthen only access `tmpfs` is allowed.\n\nExample: if a unit has the following,\n\nRestrictFileSystems=~ext4 tmpfs\nRestrictFileSystems=ext4\n\nthen only access to `tmpfs` is denied.\n\nAs the number of possible filesystems is large, predefined sets of filesystems are provided. A set starts with \"`@`\" character, followed by name of the set.\n\n**TableÂ 3.Â Currently predefined filesystem sets**\n\nSet\n\nDescription\n\n@basic-api\n\nBasic filesystem API.\n\n@auxiliary-api\n\nAuxiliary filesystem API.\n\n@common-block\n\nCommon block device filesystems.\n\n@historical-block\n\nHistorical block device filesystems.\n\n@network\n\nWell-known network filesystems.\n\n@privileged-api\n\nPrivileged filesystem API.\n\n@temporary\n\nTemporary filesystems: tmpfs, ramfs.\n\n@known\n\nAll known filesystems defined by the kernel. This list is defined statically in systemd based on a kernel version that was available when this systemd version was released. It will become progressively more out-of-date as the kernel is updated.\n\n  \n\nUse [systemd-analyze(1)](systemd-analyze.html)'s **filesystems** command to retrieve a list of filesystems defined on the local system.\n\nNote that this setting might not be supported on some systems (for example if the LSM eBPF hook is not enabled in the underlying kernel or if not using the unified control group hierarchy). In that case this setting has no effect.\n\nThis option cannot be bypassed by prefixing \"`+`\" to the executable path in the service unit, as it applies to the whole control group.\n\nAdded in version 250."],
[4,178,"Restricts access to Linux namespace functionality for the processes of this unit. For details about Linux namespaces, see [namespaces(7)](https://man7.org/linux/man-pages/man7/namespaces.7.html). Either takes a boolean argument, or a space-separated list of namespace type identifiers. If false (the default), no restrictions on namespace creation and switching are made. If true, access to any kind of namespacing is prohibited. Otherwise, a space-separated list of namespace type identifiers must be specified, consisting of any combination of: `cgroup`, `ipc`, `net`, `mnt`, `pid`, `user` and `uts`. Any namespace type listed is made accessible to the unit's processes, access to namespace types not listed is prohibited (allow-listing). By prepending the list with a single tilde character (\"`~`\") the effect may be inverted: only the listed namespace types will be made inaccessible, all unlisted ones are permitted (deny-listing). If the empty string is assigned, the default namespace restrictions are applied, which is equivalent to false. This option may appear more than once, in which case the namespace types are merged by `OR`, or by `AND` if the lines are prefixed with \"`~`\" (see examples below). Internally, this setting limits access to the [unshare(2)](https://man7.org/linux/man-pages/man2/unshare.2.html), [clone(2)](https://man7.org/linux/man-pages/man2/clone.2.html) and [setns(2)](https://man7.org/linux/man-pages/man2/setns.2.html) system calls, taking the specified flags parameters into account. Note that â€” if this option is used â€” in addition to restricting creation and switching of the specified types of namespaces (or all of them, if true) access to the `setns()` system call with a zero flags parameter is prohibited. This setting is only supported on x86, x86-64, mips, mips-le, mips64, mips64-le, mips64-n32, mips64-le-n32, ppc64, ppc64-le, s390 and s390x, and enforces no restrictions on other architectures.\n\nExample: if a unit has the following,\n\nRestrictNamespaces=cgroup ipc\nRestrictNamespaces=cgroup net\n\nthen `cgroup`, `ipc`, and `net` are set. If the second line is prefixed with \"`~`\", e.g.,\n\nRestrictNamespaces=cgroup ipc\nRestrictNamespaces=~cgroup net\n\nthen, only `ipc` is set.\n\nAdded in version 233."],
[4,179,"Takes a boolean argument. If set, locks down the [personality(2)](https://man7.org/linux/man-pages/man2/personality.2.html) system call so that the kernel execution domain may not be changed from the default or the personality selected with `Personality=` directive. This may be useful to improve security, because odd personality emulations may be poorly tested and source of vulnerabilities.\n\nAdded in version 235."],
[4,180,"Takes a boolean argument. If set, attempts to create memory mappings that are writable and executable at the same time, or to change existing memory mappings to become executable, or mapping shared memory segments as executable, are prohibited. Specifically, a system call filter is added (or preferably, an equivalent kernel check is enabled with [prctl(2)](https://man7.org/linux/man-pages/man2/prctl.2.html)) that rejects [mmap(2)](https://man7.org/linux/man-pages/man2/mmap.2.html) system calls with both `PROT_EXEC` and `PROT_WRITE` set, [mprotect(2)](https://man7.org/linux/man-pages/man2/mprotect.2.html) or [pkey\\_mprotect(2)](https://man7.org/linux/man-pages/man2/pkey_mprotect.2.html) system calls with `PROT_EXEC` set and [shmat(2)](https://man7.org/linux/man-pages/man2/shmat.2.html) system calls with `SHM_EXEC` set. Note that this option is incompatible with programs and libraries that generate program code dynamically at runtime, including JIT execution engines, executable stacks, and code \"trampoline\" feature of various C compilers. This option improves service security, as it makes harder for software exploits to change running code dynamically. However, the protection can be circumvented, if the service can write to a filesystem, which is not mounted with `noexec` (such as `/dev/shm`), or it can use `memfd_create()`. This can be prevented by making such file systems inaccessible to the service (e.g. `InaccessiblePaths=/dev/shm`) and installing further system call filters (`SystemCallFilter=~memfd_create`). Note that this feature is fully available on x86-64, and partially on x86. Specifically, the `shmat()` protection is not available on x86. Note that on systems supporting multiple ABIs (such as x86/x86-64) it is recommended to turn off alternative ABIs for services, so that they cannot be used to circumvent the restrictions of this option. Specifically, it is recommended to combine this option with `SystemCallArchitectures=native` or similar.\n\nAdded in version 231."],
[4,181,"Takes a boolean argument. If set, any attempts to enable realtime scheduling in a process of the unit are refused. This restricts access to realtime task scheduling policies such as `SCHED_FIFO`, `SCHED_RR` or `SCHED_DEADLINE`. See [sched(7)](https://man7.org/linux/man-pages/man7/sched.7.html) for details about these scheduling policies. Realtime scheduling policies may be used to monopolize CPU time for longer periods of time, and may hence be used to lock up or otherwise trigger Denial-of-Service situations on the system. It is hence recommended to restrict access to realtime scheduling to the few programs that actually require them. Defaults to off.\n\nAdded in version 231."],
[4,182,"Takes a boolean argument. If set, any attempts to set the set-user-ID (SUID) or set-group-ID (SGID) bits on files or directories will be denied (for details on these bits see [inode(7)](https://man7.org/linux/man-pages/man7/inode.7.html)). As the SUID/SGID bits are mechanisms to elevate privileges, and allow users to acquire the identity of other users, it is recommended to restrict creation of SUID/SGID files to the few programs that actually require them. Note that this restricts marking of any type of file system object with these bits, including both regular files and directories (where the SGID is a different meaning than for files, see documentation). This option is implied if `DynamicUser=` is enabled. Defaults to off.\n\nAdded in version 242."],
[4,183,"Takes a boolean parameter. If set, all System V and POSIX IPC objects owned by the user and group the processes of this unit are run as are removed when the unit is stopped. This setting only has an effect if at least one of `User=`, `Group=` and `DynamicUser=` are used. It has no effect on IPC objects owned by the root user. Specifically, this removes System V semaphores, as well as System V and POSIX shared memory segments and message queues. If multiple units use the same user or group the IPC objects are removed when the last of these units is stopped. This setting is implied if `DynamicUser=` is set.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.\n\nAdded in version 232."],
[4,184,"Takes a boolean parameter. If set, the processes of this unit will be run in their own private file system (mount) namespace with all mount propagation from the processes towards the host's main file system namespace turned off. This means any file system mount points established or removed by the unit's processes will be private to them and not be visible to the host. However, file system mount points established or removed on the host will be propagated to the unit's processes. See [mount\\_namespaces(7)](https://man7.org/linux/man-pages/man7/mount_namespaces.7.html) for details on file system namespaces. Defaults to off.\n\nWhen turned on, this executes three operations for each invoked process: a new `CLONE_NEWNS` namespace is created, after which all existing mounts are remounted to `MS_SLAVE` to disable propagation from the unit's processes to the host (but leaving propagation in the opposite direction in effect). Finally, the mounts are remounted again to the propagation mode configured with `MountFlags=`, see below.\n\nFile system namespaces are set up individually for each process forked off by the service manager. Mounts established in the namespace of the process created by `ExecStartPre=` will hence be cleaned up automatically as soon as that process exits and will not be available to subsequent processes forked off for `ExecStart=` (and similar applies to the various other commands configured for units). Similarly, `JoinsNamespaceOf=` does not permit sharing kernel mount namespaces between units, it only enables sharing of the `/tmp/` and `/var/tmp/` directories.\n\nOther file system namespace unit settings â€” `PrivateMounts=`, `PrivateTmp=`, `PrivateDevices=`, `ProtectSystem=`, `ProtectHome=`, `ReadOnlyPaths=`, `InaccessiblePaths=`, `ReadWritePaths=`, â€¦ â€” also enable file system namespacing in a fashion equivalent to this option. Hence it is primarily useful to explicitly request this behaviour if none of the other settings are used.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl).\n\nAdded in version 239."],
[4,185,"Takes a mount propagation setting: `shared`, `slave` or `private`, which controls whether file system mount points in the file system namespaces set up for this unit's processes will receive or propagate mounts and unmounts from other file system namespaces. See [mount(2)](https://man7.org/linux/man-pages/man2/mount.2.html) for details on mount propagation, and the three propagation flags in particular.\n\nThis setting only controls the _final_ propagation setting in effect on all mount points of the file system namespace created for each process of this unit. Other file system namespacing unit settings (see the discussion in `PrivateMounts=` above) will implicitly disable mount and unmount propagation from the unit's processes towards the host by changing the propagation setting of all mount points in the unit's file system namespace to `slave` first. Setting this option to `shared` does not reestablish propagation in that case.\n\nIf not set â€“ but file system namespaces are enabled through another file system namespace unit setting â€“ `shared` mount propagation is used, but â€” as mentioned â€” as `slave` is applied first, propagation from the unit's processes to the host is still turned off.\n\nIt is not recommended to use `private` mount propagation for units, as this means temporary mounts (such as removable media) of the host will stay mounted and thus indefinitely busy in forked off processes, as unmount propagation events won't be received by the file system namespace of the unit.\n\nUsually, it is best to leave this setting unmodified, and use higher level file system namespacing options instead, in particular `PrivateMounts=`, see above.\n\nThis option is only available for system services, or for services running in per-user instances of the service manager in which case `PrivateUsers=` is implicitly enabled (requires unprivileged user namespaces support to be enabled in the kernel via the \"`kernel.unprivileged_userns_clone=`\" sysctl)."],
[4,186,"Takes a space-separated list of system call names. If this setting is used, all system calls executed by the unit processes except for the listed ones will result in immediate process termination with the `SIGSYS` signal (allow-listing). (See `SystemCallErrorNumber=` below for changing the default action). If the first character of the list is \"`~`\", the effect is inverted: only the listed system calls will result in immediate process termination (deny-listing). Deny-listed system calls and system call groups may optionally be suffixed with a colon (\"`:`\") and \"`errno`\" error number (between 0 and 4095) or errno name such as `EPERM`, `EACCES` or `EUCLEAN` (see [errno(3)](https://man7.org/linux/man-pages/man3/errno.3.html) for a full list). This value will be returned when a deny-listed system call is triggered, instead of terminating the processes immediately. Special setting \"`kill`\" can be used to explicitly specify killing. This value takes precedence over the one given in `SystemCallErrorNumber=`, see below. This feature makes use of the Secure Computing Mode 2 interfaces of the kernel ('seccomp filtering') and is useful for enforcing a minimal sandboxing environment. Note that the `execve()`, `exit()`, `exit_group()`, `getrlimit()`, `rt_sigreturn()`, `sigreturn()` system calls and the system calls for querying time and sleeping are implicitly allow-listed and do not need to be listed explicitly. This option may be specified more than once, in which case the filter masks are merged. If the empty string is assigned, the filter is reset, all prior assignments will have no effect. This does not affect commands prefixed with \"`+`\".\n\nNote that on systems supporting multiple ABIs (such as x86/x86-64) it is recommended to turn off alternative ABIs for services, so that they cannot be used to circumvent the restrictions of this option. Specifically, it is recommended to combine this option with `SystemCallArchitectures=native` or similar.\n\nNote that strict system call filters may impact execution and error handling code paths of the service invocation. Specifically, access to the `execve()` system call is required for the execution of the service binary â€” if it is blocked service invocation will necessarily fail. Also, if execution of the service binary fails for some reason (for example: missing service executable), the error handling logic might require access to an additional set of system calls in order to process and log this failure correctly. It might be necessary to temporarily disable system call filters in order to simplify debugging of such failures.\n\nIf you specify both types of this option (i.e. allow-listing and deny-listing), the first encountered will take precedence and will dictate the default action (termination or approval of a system call). Then the next occurrences of this option will add or delete the listed system calls from the set of the filtered system calls, depending of its type and the default action. (For example, if you have started with an allow list rule for `read()` and `write()`, and right after it add a deny list rule for `write()`, then `write()` will be removed from the set.)\n\nAs the number of possible system calls is large, predefined sets of system calls are provided. A set starts with \"`@`\" character, followed by name of the set.\n\n**TableÂ 4.Â Currently predefined system call sets**\n\nSet\n\nDescription\n\n@aio\n\nAsynchronous I/O ([io\\_setup(2)](https://man7.org/linux/man-pages/man2/io_setup.2.html), [io\\_submit(2)](https://man7.org/linux/man-pages/man2/io_submit.2.html), and related calls)\n\n@basic-io\n\nSystem calls for basic I/O: reading, writing, seeking, file descriptor duplication and closing ([read(2)](https://man7.org/linux/man-pages/man2/read.2.html), [write(2)](https://man7.org/linux/man-pages/man2/write.2.html), and related calls)\n\n@chown\n\nChanging file ownership ([chown(2)](https://man7.org/linux/man-pages/man2/chown.2.html), [fchownat(2)](https://man7.org/linux/man-pages/man2/fchownat.2.html), and related calls)\n\n@clock\n\nSystem calls for changing the system clock ([adjtimex(2)](https://man7.org/linux/man-pages/man2/adjtimex.2.html), [settimeofday(2)](https://man7.org/linux/man-pages/man2/settimeofday.2.html), and related calls)\n\n@cpu-emulation\n\nSystem calls for CPU emulation functionality ([vm86(2)](https://man7.org/linux/man-pages/man2/vm86.2.html) and related calls)\n\n@debug\n\nDebugging, performance monitoring and tracing functionality ([ptrace(2)](https://man7.org/linux/man-pages/man2/ptrace.2.html), [perf\\_event\\_open(2)](https://man7.org/linux/man-pages/man2/perf_event_open.2.html) and related calls)\n\n@file-system\n\nFile system operations: opening, creating files and directories for read and write, renaming and removing them, reading file properties, or creating hard and symbolic links\n\n@io-event\n\nEvent loop system calls ([poll(2)](https://man7.org/linux/man-pages/man2/poll.2.html), [select(2)](https://man7.org/linux/man-pages/man2/select.2.html), [epoll(7)](https://man7.org/linux/man-pages/man7/epoll.7.html), [eventfd(2)](https://man7.org/linux/man-pages/man2/eventfd.2.html) and related calls)\n\n@ipc\n\nPipes, SysV IPC, POSIX Message Queues and other IPC ([mq\\_overview(7)](https://man7.org/linux/man-pages/man7/mq_overview.7.html), [svipc(7)](https://man7.org/linux/man-pages/man7/svipc.7.html))\n\n@keyring\n\nKernel keyring access ([keyctl(2)](https://man7.org/linux/man-pages/man2/keyctl.2.html) and related calls)\n\n@memlock\n\nLocking of memory in RAM ([mlock(2)](https://man7.org/linux/man-pages/man2/mlock.2.html), [mlockall(2)](https://man7.org/linux/man-pages/man2/mlockall.2.html) and related calls)\n\n@module\n\nLoading and unloading of kernel modules ([init\\_module(2)](https://man7.org/linux/man-pages/man2/init_module.2.html), [delete\\_module(2)](https://man7.org/linux/man-pages/man2/delete_module.2.html) and related calls)\n\n@mount\n\nMounting and unmounting of file systems ([mount(2)](https://man7.org/linux/man-pages/man2/mount.2.html), [chroot(2)](https://man7.org/linux/man-pages/man2/chroot.2.html), and related calls)\n\n@network-io\n\nSocket I/O (including local AF\\_UNIX): [socket(7)](https://man7.org/linux/man-pages/man7/socket.7.html), [unix(7)](https://man7.org/linux/man-pages/man7/unix.7.html)\n\n@obsolete\n\nUnusual, obsolete or unimplemented ([create\\_module(2)](https://man7.org/linux/man-pages/man2/create_module.2.html), [gtty(2)](https://man7.org/linux/man-pages/man2/gtty.2.html), â€¦)\n\n@pkey\n\nSystem calls that deal with memory protection keys ([pkeys(7)](https://man7.org/linux/man-pages/man7/pkeys.7.html))\n\n@privileged\n\nAll system calls which need super-user capabilities ([capabilities(7)](https://man7.org/linux/man-pages/man7/capabilities.7.html))\n\n@process\n\nProcess control, execution, namespacing operations ([clone(2)](https://man7.org/linux/man-pages/man2/clone.2.html), [kill(2)](https://man7.org/linux/man-pages/man2/kill.2.html), [namespaces(7)](https://man7.org/linux/man-pages/man7/namespaces.7.html), â€¦)\n\n@raw-io\n\nRaw I/O port access ([ioperm(2)](https://man7.org/linux/man-pages/man2/ioperm.2.html), [iopl(2)](https://man7.org/linux/man-pages/man2/iopl.2.html), `pciconfig_read()`, â€¦)\n\n@reboot\n\nSystem calls for rebooting and reboot preparation ([reboot(2)](https://man7.org/linux/man-pages/man2/reboot.2.html), `kexec()`, â€¦)\n\n@resources\n\nSystem calls for changing resource limits, memory and scheduling parameters ([setrlimit(2)](https://man7.org/linux/man-pages/man2/setrlimit.2.html), [setpriority(2)](https://man7.org/linux/man-pages/man2/setpriority.2.html), â€¦)\n\n@sandbox\n\nSystem calls for sandboxing programs ([seccomp(2)](https://man7.org/linux/man-pages/man2/seccomp.2.html), Landlock system calls, â€¦)\n\n@setuid\n\nSystem calls for changing user ID and group ID credentials, ([setuid(2)](https://man7.org/linux/man-pages/man2/setuid.2.html), [setgid(2)](https://man7.org/linux/man-pages/man2/setgid.2.html), [setresuid(2)](https://man7.org/linux/man-pages/man2/setresuid.2.html), â€¦)\n\n@signal\n\nSystem calls for manipulating and handling process signals ([signal(2)](https://man7.org/linux/man-pages/man2/signal.2.html), [sigprocmask(2)](https://man7.org/linux/man-pages/man2/sigprocmask.2.html), â€¦)\n\n@swap\n\nSystem calls for enabling/disabling swap devices ([swapon(2)](https://man7.org/linux/man-pages/man2/swapon.2.html), [swapoff(2)](https://man7.org/linux/man-pages/man2/swapoff.2.html))\n\n@sync\n\nSynchronizing files and memory to disk ([fsync(2)](https://man7.org/linux/man-pages/man2/fsync.2.html), [msync(2)](https://man7.org/linux/man-pages/man2/msync.2.html), and related calls)\n\n@system-service\n\nA reasonable set of system calls used by common system services, excluding any special purpose calls. This is the recommended starting point for allow-listing system calls for system services, as it contains what is typically needed by system services, but excludes overly specific interfaces. For example, the following APIs are excluded: \"`@clock`\", \"`@mount`\", \"`@swap`\", \"`@reboot`\".\n\n@timer\n\nSystem calls for scheduling operations by time ([alarm(2)](https://man7.org/linux/man-pages/man2/alarm.2.html), [timer\\_create(2)](https://man7.org/linux/man-pages/man2/timer_create.2.html), â€¦)\n\n@known\n\nAll system calls defined by the kernel. This list is defined statically in systemd based on a kernel version that was available when this systemd version was released. It will become progressively more out-of-date as the kernel is updated.\n\n  \nNote, that as new system calls are added to the kernel, additional system calls might be added to the groups above. Contents of the sets may also change between systemd versions. In addition, the list of system calls depends on the kernel version and architecture for which systemd was compiled. Use **systemd-analyzeÂ syscall-filter** to list the actual list of system calls in each filter.\n\nGenerally, allow-listing system calls (rather than deny-listing) is the safer mode of operation. It is recommended to enforce system call allow lists for all long-running system services. Specifically, the following lines are a relatively safe basic choice for the majority of system services:\n\n\\[Service\\]\nSystemCallFilter=@system-service\nSystemCallErrorNumber=EPERM\n\nNote that various kernel system calls are defined redundantly: there are multiple system calls for executing the same operation. For example, the `pidfd_send_signal()` system call may be used to execute operations similar to what can be done with the older `kill()` system call, hence blocking the latter without the former only provides weak protection. Since new system calls are added regularly to the kernel as development progresses, keeping system call deny lists comprehensive requires constant work. It is thus recommended to use allow-listing instead, which offers the benefit that new system calls are by default implicitly blocked until the allow list is updated.\n\nAlso note that a number of system calls are required to be accessible for the dynamic linker to work. The dynamic linker is required for running most regular programs (specifically: all dynamic ELF binaries, which is how most distributions build packaged programs). This means that blocking these system calls (which include `open()`, `openat()` or `mmap()`) will make most programs typically shipped with generic distributions unusable.\n\nIt is recommended to combine the file system namespacing related options with `SystemCallFilter=~@mount`, in order to prohibit the unit's processes to undo the mappings. Specifically these are the options `PrivateTmp=`, `PrivateDevices=`, `ProtectSystem=`, `ProtectHome=`, `ProtectKernelTunables=`, `ProtectControlGroups=`, `ProtectKernelLogs=`, `ProtectClock=`, `ReadOnlyPaths=`, `InaccessiblePaths=` and `ReadWritePaths=`.\n\nAdded in version 187."],
[4,187,"Takes an \"`errno`\" error number (between 1 and 4095) or errno name such as `EPERM`, `EACCES` or `EUCLEAN`, to return when the system call filter configured with `SystemCallFilter=` is triggered, instead of terminating the process immediately. See [errno(3)](https://man7.org/linux/man-pages/man3/errno.3.html) for a full list of error codes. When this setting is not used, or when the empty string or the special setting \"`kill`\" is assigned, the process will be terminated immediately when the filter is triggered.\n\nAdded in version 209."],
[4,188,"Takes a space-separated list of architecture identifiers to include in the system call filter. The known architecture identifiers are the same as for `ConditionArchitecture=` described in [systemd.unit(5)](systemd.unit.html), as well as `x32`, `mips64-n32`, `mips64-le-n32`, and the special identifier `native`. The special identifier `native` implicitly maps to the native architecture of the system (or more precisely: to the architecture the system manager is compiled for). By default, this option is set to the empty list, i.e. no filtering is applied.\n\nIf this setting is used, processes of this unit will only be permitted to call native system calls, and system calls of the specified architectures. For the purposes of this option, the x32 architecture is treated as including x86-64 system calls. However, this setting still fulfills its purpose, as explained below, on x32.\n\nSystem call filtering is not equally effective on all architectures. For example, on x86 filtering of network socket-related calls is not possible, due to ABI limitations â€” a limitation that x86-64 does not have, however. On systems supporting multiple ABIs at the same time â€” such as x86/x86-64 â€” it is hence recommended to limit the set of permitted system call architectures so that secondary ABIs may not be used to circumvent the restrictions applied to the native ABI of the system. In particular, setting `SystemCallArchitectures=native` is a good choice for disabling non-native ABIs.\n\nSystem call architectures may also be restricted system-wide via the `SystemCallArchitectures=` option in the global configuration. See [systemd-system.conf(5)](systemd-system.conf.html) for details.\n\nAdded in version 209."],
[4,189,"Takes a space-separated list of system call names. If this setting is used, all system calls executed by the unit processes for the listed ones will be logged. If the first character of the list is \"`~`\", the effect is inverted: all system calls except the listed system calls will be logged. This feature makes use of the Secure Computing Mode 2 interfaces of the kernel ('seccomp filtering') and is useful for auditing or setting up a minimal sandboxing environment. This option may be specified more than once, in which case the filter masks are merged. If the empty string is assigned, the filter is reset, all prior assignments will have no effect. This does not affect commands prefixed with \"`+`\".\n\nAdded in version 247."],
[4,190,"Sets environment variables for executed processes. Each line is unquoted using the rules described in \"Quoting\" section in [systemd.syntax(7)](systemd.syntax.html) and becomes a list of variable assignments. If you need to assign a value containing spaces or the equals sign to a variable, put quotes around the whole assignment. Variable expansion is not performed inside the strings and the \"`$`\" character has no special meaning. Specifier expansion is performed, see the \"Specifiers\" section in [systemd.unit(5)](systemd.unit.html).\n\nThis option may be specified more than once, in which case all listed variables will be set. If the same variable is listed twice, the later setting will override the earlier setting. If the empty string is assigned to this option, the list of environment variables is reset, all prior assignments have no effect.\n\nThe names of the variables can contain ASCII letters, digits, and the underscore character. Variable names cannot be empty or start with a digit. In variable values, most characters are allowed, but non-printable characters are currently rejected.\n\nExample:\n\nEnvironment=\"VAR1=word1 word2\" VAR2=word3 \"VAR3=$word 5 6\"\n\ngives three variables \"`VAR1`\", \"`VAR2`\", \"`VAR3`\" with the values \"`word1 word2`\", \"`word3`\", \"`$word 5 6`\".\n\nSee [environ(7)](https://man7.org/linux/man-pages/man7/environ.7.html) for details about environment variables.\n\nNote that environment variables are not suitable for passing secrets (such as passwords, key material, â€¦) to service processes. Environment variables set for a unit are exposed to unprivileged clients via D-Bus IPC, and generally not understood as being data that requires protection. Moreover, environment variables are propagated down the process tree, including across security boundaries (such as setuid/setgid executables), and hence might leak to processes that should not have access to the secret data. Use `LoadCredential=`, `LoadCredentialEncrypted=` or `SetCredentialEncrypted=` (see below) to pass data to unit processes securely."],
[4,191,"Similar to `Environment=`, but reads the environment variables from a text file. The text file should contain newline-separated variable assignments. Empty lines, lines without an \"`=`\" separator, or lines starting with \"`;`\" or \"`#`\" will be ignored, which may be used for commenting. The file must be encoded with UTF-8. Valid characters are [unicode scalar values](https://www.unicode.org/glossary/#unicode_scalar_value) other than [unicode noncharacters](https://www.unicode.org/glossary/#noncharacter), `U+0000` `NUL`, and `U+FEFF` [unicode byte order mark](https://www.unicode.org/glossary/#byte_order_mark). Control codes other than `NUL` are allowed.\n\nIn the file, an unquoted value after the \"`=`\" is parsed with the same backslash-escape rules as [POSIX shell unquoted text](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02_01), but unlike in a shell, interior whitespace is preserved and quotes after the first non-whitespace character are preserved. Leading and trailing whitespace (space, tab, carriage return) is discarded, but interior whitespace within the line is preserved verbatim. A line ending with a backslash will be continued to the following one, with the newline itself discarded. A backslash \"`\\`\" followed by any character other than newline will preserve the following character, so that \"`\\\\`\" will become the value \"`\\`\".\n\nIn the file, a \"`'`\"-quoted value after the \"`=`\" can span multiple lines and contain any character verbatim other than single quote, like [POSIX shell single-quoted text](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02_02). No backslash-escape sequences are recognized. Leading and trailing whitespace outside of the single quotes is discarded.\n\nIn the file, a \"`\"`\"-quoted value after the \"`=`\" can span multiple lines, and the same escape sequences are recognized as in [POSIX shell double-quoted text](https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02_03). Backslash (\"`\\`\") followed by any of \"``\"\\`$``\" will preserve that character. A backslash followed by newline is a line continuation, and the newline itself is discarded. A backslash followed by any other character is ignored; both the backslash and the following character are preserved verbatim. Leading and trailing whitespace outside of the double quotes is discarded.\n\nThe argument passed should be an absolute filename or wildcard expression, optionally prefixed with \"`-`\", which indicates that if the file does not exist, it will not be read and no error or warning message is logged. This option may be specified more than once in which case all specified files are read. If the empty string is assigned to this option, the list of file to read is reset, all prior assignments have no effect.\n\nThe files listed with this directive will be read shortly before the process is executed (more specifically, after all processes from a previous unit state terminated. This means you can generate these files in one unit state, and read it with this option in the next. The files are read from the file system of the service manager, before any file system changes like bind mounts take place).\n\nSettings from these files override settings made with `Environment=`. If the same variable is set twice from these files, the files will be read in the order they are specified and the later setting will override the earlier setting."],
[4,192,"Pass environment variables set for the system service manager to executed processes. Takes a space-separated list of variable names. This option may be specified more than once, in which case all listed variables will be passed. If the empty string is assigned to this option, the list of environment variables to pass is reset, all prior assignments have no effect. Variables specified that are not set for the system manager will not be passed and will be silently ignored. Note that this option is only relevant for the system service manager, as system services by default do not automatically inherit any environment variables set for the service manager itself. However, in case of the user service manager all environment variables are passed to the executed processes anyway, hence this option is without effect for the user service manager.\n\nVariables set for invoked processes due to this setting are subject to being overridden by those configured with `Environment=` or `EnvironmentFile=`.\n\nExample:\n\nPassEnvironment=VAR1 VAR2 VAR3\n\npasses three variables \"`VAR1`\", \"`VAR2`\", \"`VAR3`\" with the values set for those variables in PID1.\n\nSee [environ(7)](https://man7.org/linux/man-pages/man7/environ.7.html) for details about environment variables.\n\nAdded in version 228."],
[4,193,"Explicitly unset environment variable assignments that would normally be passed from the service manager to invoked processes of this unit. Takes a space-separated list of variable names or variable assignments. This option may be specified more than once, in which case all listed variables/assignments will be unset. If the empty string is assigned to this option, the list of environment variables/assignments to unset is reset. If a variable assignment is specified (that is: a variable name, followed by \"`=`\", followed by its value), then any environment variable matching this precise assignment is removed. If a variable name is specified (that is a variable name without any following \"`=`\" or value), then any assignment matching the variable name, regardless of its value is removed. Note that the effect of `UnsetEnvironment=` is applied as final step when the environment list passed to executed processes is compiled. That means it may undo assignments from any configuration source, including assignments made through `Environment=` or `EnvironmentFile=`, inherited from the system manager's global set of environment variables, inherited via `PassEnvironment=`, set by the service manager itself (such as `$NOTIFY_SOCKET` and such), or set by a PAM module (in case `PAMName=` is used).\n\nSee \"Environment Variables in Spawned Processes\" below for a description of how those settings combine to form the inherited environment. See [environ(7)](https://man7.org/linux/man-pages/man7/environ.7.html) for general information about environment variables.\n\nAdded in version 235."],
[4,194,"Controls where file descriptor 0 (STDIN) of the executed processes is connected to. Takes one of `null`, `tty`, `tty-force`, `tty-fail`, `data`, ``file:_`path`_``, `socket` or ``fd:_`name`_``.\n\nIf `null` is selected, standard input will be connected to `/dev/null`, i.e. all read attempts by the process will result in immediate EOF.\n\nIf `tty` is selected, standard input is connected to a TTY (as configured by `TTYPath=`, see below) and the executed process becomes the controlling process of the terminal. If the terminal is already being controlled by another process, the executed process waits until the current controlling process releases the terminal.\n\n`tty-force` is similar to `tty`, but the executed process is forcefully and immediately made the controlling process of the terminal, potentially removing previous controlling processes from the terminal.\n\n`tty-fail` is similar to `tty`, but if the terminal already has a controlling process start-up of the executed process fails.\n\nThe `data` option may be used to configure arbitrary textual or binary data to pass via standard input to the executed process. The data to pass is configured via `StandardInputText=`/`StandardInputData=` (see below). Note that the actual file descriptor type passed (memory file, regular file, UNIX pipe, â€¦) might depend on the kernel and available privileges. In any case, the file descriptor is read-only, and when read returns the specified data followed by EOF.\n\nThe ``file:_`path`_`` option may be used to connect a specific file system object to standard input. An absolute path following the \"`:`\" character is expected, which may refer to a regular file, a FIFO or special file. If an `AF_UNIX` socket in the file system is specified, a stream socket is connected to it. The latter is useful for connecting standard input of processes to arbitrary system services.\n\nThe `socket` option is valid in socket-activated services only, and requires the relevant socket unit file (see [systemd.socket(5)](systemd.socket.html) for details) to have `Accept=yes` set, or to specify a single socket only. If this option is set, standard input will be connected to the socket the service was activated from, which is primarily useful for compatibility with daemons designed for use with the traditional [inetd(8)](https://www.freebsd.org/cgi/man.cgi?inetd(8)) socket activation daemon (`$LISTEN_FDS` (and related) environment variables are not passed when `socket` value is configured).\n\nThe ``fd:_`name`_`` option connects standard input to a specific, named file descriptor provided by a socket unit. The name may be specified as part of this option, following a \"`:`\" character (e.g. \"`fd:foobar`\"). If no name is specified, the name \"`stdin`\" is implied (i.e. \"`fd`\" is equivalent to \"`fd:stdin`\"). At least one socket unit defining the specified name must be provided via the `Sockets=` option, and the file descriptor name may differ from the name of its containing socket unit. If multiple matches are found, the first one will be used. See `FileDescriptorName=` in [systemd.socket(5)](systemd.socket.html) for more details about named file descriptors and their ordering.\n\nThis setting defaults to `null`, unless `StandardInputText=`/`StandardInputData=` are set, in which case it defaults to `data`."],
[4,195,"Controls where file descriptor 1 (stdout) of the executed processes is connected to. Takes one of `inherit`, `null`, `tty`, `journal`, `kmsg`, `journal+console`, `kmsg+console`, ``file:_`path`_``, ``append:_`path`_``, ``truncate:_`path`_``, `socket` or ``fd:_`name`_``.\n\n`inherit` duplicates the file descriptor of standard input for standard output.\n\n`null` connects standard output to `/dev/null`, i.e. everything written to it will be lost.\n\n`tty` connects standard output to a tty (as configured via `TTYPath=`, see below). If the TTY is used for output only, the executed process will not become the controlling process of the terminal, and will not fail or wait for other processes to release the terminal.\n\n`journal` connects standard output with the journal, which is accessible via [journalctl(1)](journalctl.html). Note that everything that is written to kmsg (see below) is implicitly stored in the journal as well, the specific option listed below is hence a superset of this one. (Also note that any external, additional syslog daemons receive their log data from the journal, too, hence this is the option to use when logging shall be processed with such a daemon.)\n\n`kmsg` connects standard output with the kernel log buffer which is accessible via [dmesg(1)](https://man7.org/linux/man-pages/man1/dmesg.1.html), in addition to the journal. The journal daemon might be configured to send all logs to kmsg anyway, in which case this option is no different from `journal`.\n\n`journal+console` and `kmsg+console` work in a similar way as the two options above but copy the output to the system console as well.\n\nThe ``file:_`path`_`` option may be used to connect a specific file system object to standard output. The semantics are similar to the same option of `StandardInput=`, see above. If _`path`_ refers to a regular file on the filesystem, it is opened (created if it doesn't exist yet) for writing at the beginning of the file, but without truncating it. If standard input and output are directed to the same file path, it is opened only once â€” for reading as well as writing â€” and duplicated. This is particularly useful when the specified path refers to an `AF_UNIX` socket in the file system, as in that case only a single stream connection is created for both input and output.\n\n``append:_`path`_`` is similar to ``file:_`path`_`` above, but it opens the file in append mode.\n\n``truncate:_`path`_`` is similar to ``file:_`path`_`` above, but it truncates the file when opening it. For units with multiple command lines, e.g. `Type=oneshot` services with multiple `ExecStart=`, or services with `ExecCondition=`, `ExecStartPre=` or `ExecStartPost=`, the output file is reopened and therefore re-truncated for each command line. If the output file is truncated while another process still has the file open, e.g. by an `ExecReload=` running concurrently with an `ExecStart=`, and the other process continues writing to the file without adjusting its offset, then the space between the file pointers of the two processes may be filled with `NUL` bytes, producing a sparse file. Thus, ``truncate:_`path`_`` is typically only useful for units where only one process runs at a time, such as services with a single `ExecStart=` and no `ExecStartPost=`, `ExecReload=`, `ExecStop=` or similar.\n\n`socket` connects standard output to a socket acquired via socket activation. The semantics are similar to the same option of `StandardInput=`, see above.\n\nThe ``fd:_`name`_`` option connects standard output to a specific, named file descriptor provided by a socket unit. A name may be specified as part of this option, following a \"`:`\" character (e.g. \"``fd:_`foobar`_``\"). If no name is specified, the name \"`stdout`\" is implied (i.e. \"`fd`\" is equivalent to \"`fd:stdout`\"). At least one socket unit defining the specified name must be provided via the `Sockets=` option, and the file descriptor name may differ from the name of its containing socket unit. If multiple matches are found, the first one will be used. See `FileDescriptorName=` in [systemd.socket(5)](systemd.socket.html) for more details about named descriptors and their ordering.\n\nIf the standard output (or error output, see below) of a unit is connected to the journal or the kernel log buffer, the unit will implicitly gain a dependency of type `After=` on `systemd-journald.socket` (also see the \"Implicit Dependencies\" section above). Also note that in this case stdout (or stderr, see below) will be an `AF_UNIX` stream socket, and not a pipe or FIFO that can be re-opened. This means when executing shell scripts the construct **echo \"hello\" > /dev/stderr** for writing text to stderr will not work. To mitigate this use the construct **echo \"hello\" >&2** instead, which is mostly equivalent and avoids this pitfall.\n\nIf `StandardInput=` is set to one of `tty`, `tty-force`, `tty-fail`, `socket`, or ``fd:_`name`_``, this setting defaults to `inherit`.\n\nIn other cases, this setting defaults to the value set with `DefaultStandardOutput=` in [systemd-system.conf(5)](systemd-system.conf.html), which defaults to `journal`. Note that setting this parameter might result in additional dependencies to be added to the unit (see above)."],
[4,196,"Controls where file descriptor 2 (stderr) of the executed processes is connected to. The available options are identical to those of `StandardOutput=`, with some exceptions: if set to `inherit` the file descriptor used for standard output is duplicated for standard error, while ``fd:_`name`_`` will use a default file descriptor name of \"`stderr`\".\n\nThis setting defaults to the value set with `DefaultStandardError=` in [systemd-system.conf(5)](systemd-system.conf.html), which defaults to `inherit`. Note that setting this parameter might result in additional dependencies to be added to the unit (see above)."],
[4,197,"Configures arbitrary textual or binary data to pass via file descriptor 0 (STDIN) to the executed processes. These settings have no effect unless `StandardInput=` is set to `data` (which is the default if `StandardInput=` is not set otherwise, but `StandardInputText=`/`StandardInputData=` is). Use this option to embed process input data directly in the unit file.\n\n`StandardInputText=` accepts arbitrary textual data. C-style escapes for special characters as well as the usual \"`%`\"-specifiers are resolved. Each time this setting is used the specified text is appended to the per-unit data buffer, followed by a newline character (thus every use appends a new line to the end of the buffer). Note that leading and trailing whitespace of lines configured with this option is removed. If an empty line is specified the buffer is cleared (hence, in order to insert an empty line, add an additional \"`\\n`\" to the end or beginning of a line).\n\n`StandardInputData=` accepts arbitrary binary data, encoded in [Base64](https://tools.ietf.org/html/rfc2045#section-6.8). No escape sequences or specifiers are resolved. Any whitespace in the encoded version is ignored during decoding.\n\nNote that `StandardInputText=` and `StandardInputData=` operate on the same data buffer, and may be mixed in order to configure both binary and textual data for the same input stream. The textual or binary data is joined strictly in the order the settings appear in the unit file. Assigning an empty string to either will reset the data buffer.\n\nPlease keep in mind that in order to maintain readability long unit file settings may be split into multiple lines, by suffixing each line (except for the last) with a \"`\\`\" character (see [systemd.unit(5)](systemd.unit.html) for details). This is particularly useful for large data configured with these two options. Example:\n\nâ€¦\nStandardInput=data\nStandardInputData=V2XigLJyZSBubyBzdHJhbmdlcnMgdG8gbG92ZQpZb3Uga25vdyB0aGUgcnVsZXMgYW5kIHNvIGRv \\\\\n                  IEkKQSBmdWxsIGNvbW1pdG1lbnQncyB3aGF0IEnigLJtIHRoaW5raW5nIG9mCllvdSB3b3VsZG4n \\\\\n                  dCBnZXQgdGhpcyBmcm9tIGFueSBvdGhlciBndXkKSSBqdXN0IHdhbm5hIHRlbGwgeW91IGhvdyBJ \\\\\n                  J20gZmVlbGluZwpHb3R0YSBtYWtlIHlvdSB1bmRlcnN0YW5kCgpOZXZlciBnb25uYSBnaXZlIHlv \\\\\n                  dSB1cApOZXZlciBnb25uYSBsZXQgeW91IGRvd24KTmV2ZXIgZ29ubmEgcnVuIGFyb3VuZCBhbmQg \\\\\n                  ZGVzZXJ0IHlvdQpOZXZlciBnb25uYSBtYWtlIHlvdSBjcnkKTmV2ZXIgZ29ubmEgc2F5IGdvb2Ri \\\\\n                  eWUKTmV2ZXIgZ29ubmEgdGVsbCBhIGxpZSBhbmQgaHVydCB5b3UK\nâ€¦\n\nAdded in version 236."],
[4,198,"Configures filtering by log level of log messages generated by this unit. Takes a **syslog** log level, one of `emerg` (lowest log level, only highest priority messages), `alert`, `crit`, `err`, `warning`, `notice`, `info`, `debug` (highest log level, also lowest priority messages). See [syslog(3)](https://man7.org/linux/man-pages/man3/syslog.3.html) for details. By default no filtering is applied (i.e. the default maximum log level is `debug`). Use this option to configure the logging system to drop log messages of a specific service above the specified level. For example, set `LogLevelMax=``info` in order to turn off debug logging of a particularly chatty unit. Note that the configured level is applied to any log messages written by any of the processes belonging to this unit, as well as any log messages written by the system manager process (PID 1) in reference to this unit, sent via any supported logging protocol. The filtering is applied early in the logging pipeline, before any kind of further processing is done. Moreover, messages which pass through this filter successfully might still be dropped by filters applied at a later stage in the logging subsystem. For example, `MaxLevelStore=` configured in [journald.conf(5)](journald.conf.html) might prohibit messages of higher log levels to be stored on disk, even though the per-unit `LogLevelMax=` permitted it to be processed.\n\nAdded in version 236."],
[4,199,"Configures additional log metadata fields to include in all log records generated by processes associated with this unit, including systemd. This setting takes one or more journal field assignments in the format \"`FIELD=VALUE`\" separated by whitespace. See [systemd.journal-fields(7)](systemd.journal-fields.html) for details on the journal field concept. Even though the underlying journal implementation permits binary field values, this setting accepts only valid UTF-8 values. To include space characters in a journal field value, enclose the assignment in double quotes (\"). The usual specifiers are expanded in all assignments (see below). Note that this setting is not only useful for attaching additional metadata to log records of a unit, but given that all fields and values are indexed may also be used to implement cross-unit log record matching. Assign an empty string to reset the list.\n\nAdded in version 236."],
[4,200,"Configures the rate limiting that is applied to log messages generated by this unit. If, in the time interval defined by `LogRateLimitIntervalSec=`, more messages than specified in `LogRateLimitBurst=` are logged by a service, all further messages within the interval are dropped until the interval is over. A message about the number of dropped messages is generated. The time specification for `LogRateLimitIntervalSec=` may be specified in the following units: \"s\", \"min\", \"h\", \"ms\", \"us\". See [systemd.time(7)](systemd.time.html) for details. The default settings are set by `RateLimitIntervalSec=` and `RateLimitBurst=` configured in [journald.conf(5)](journald.conf.html). Note that this only applies to log messages that are processed by the logging subsystem, i.e. by [systemd-journald.service(8)](systemd-journald.service.html). This means that if you connect a service's stderr directly to a file via `StandardOutput=file:â€¦` or a similar setting, the rate limiting will not be applied to messages written that way (but it will be enforced for messages generated via [syslog(3)](https://man7.org/linux/man-pages/man3/syslog.3.html) and similar functions).\n\nAdded in version 240."],
[4,201,"Define an extended regular expression to filter log messages based on the `MESSAGE=` field of the structured message. If the first character of the pattern is \"`~`\", log entries matching the pattern should be discarded. This option takes a single pattern as an argument but can be used multiple times to create a list of allowed and denied patterns. If the empty string is assigned, the filter is reset, and all prior assignments will have no effect.\n\nBecause the \"`~`\" character is used to define denied patterns, it must be replaced with \"`\\x7e`\" to allow a message starting with \"`~`\". For example, \"`~foobar`\" would add a pattern matching \"`foobar`\" to the deny list, while \"`\\x7efoobar`\" would add a pattern matching \"`~foobar`\" to the allow list.\n\nLog messages are tested against denied patterns (if any), then against allowed patterns (if any). If a log message matches any of the denied patterns, it will be discarded, whatever the allowed patterns. Then, remaining log messages are tested against allowed patterns. Messages matching against none of the allowed pattern are discarded. If no allowed patterns are defined, then all messages are processed directly after going through denied filters.\n\nFiltering is based on the unit for which `LogFilterPatterns=` is defined, meaning log messages coming from [systemd(1)](systemd.html) about the unit are not taken into account. Filtered log messages won't be forwarded to traditional syslog daemons, the kernel log buffer (kmsg), the systemd console, or sent as wall messages to all logged-in users.\n\nAdded in version 253."],
[4,202,"Run the unit's processes in the specified journal namespace. Expects a short user-defined string identifying the namespace. If not used the processes of the service are run in the default journal namespace, i.e. their log stream is collected and processed by `systemd-journald.service`. If this option is used any log data generated by processes of this unit (regardless if via the `syslog()`, journal native logging or stdout/stderr logging) is collected and processed by an instance of the `systemd-journald@.service` template unit, which manages the specified namespace. The log data is stored in a data store independent from the default log namespace's data store. See [systemd-journald.service(8)](systemd-journald.service.html) for details about journal namespaces.\n\nInternally, journal namespaces are implemented through Linux mount namespacing and over-mounting the directory that contains the relevant `AF_UNIX` sockets used for logging in the unit's mount namespace. Since mount namespaces are used this setting disconnects propagation of mounts from the unit's processes to the host, similarly to how `ReadOnlyPaths=` and similar settings describe above work. Journal namespaces may hence not be used for services that need to establish mount points on the host.\n\nWhen this option is used the unit will automatically gain ordering and requirement dependencies on the two socket units associated with the `systemd-journald@.service` instance so that they are automatically established prior to the unit starting up. Note that when this option is used log output of this service does not appear in the regular [journalctl(1)](journalctl.html) output, unless the `--namespace=` option is used.\n\nThis option is only available for system services and is not supported for services running in per-user instances of the service manager.\n\nAdded in version 245."],
[4,203,"Sets the process name (\"**syslog** tag\") to prefix log lines sent to the logging system or the kernel log buffer with. If not set, defaults to the process name of the executed process. This option is only useful when `StandardOutput=` or `StandardError=` are set to `journal` or `kmsg` (or to the same settings in combination with `+console`) and only applies to log messages written to stdout or stderr."],
[4,204,"Sets the **syslog** facility identifier to use when logging. One of `kern`, `user`, `mail`, `daemon`, `auth`, `syslog`, `lpr`, `news`, `uucp`, `cron`, `authpriv`, `ftp`, `local0`, `local1`, `local2`, `local3`, `local4`, `local5`, `local6` or `local7`. See [syslog(3)](https://man7.org/linux/man-pages/man3/syslog.3.html) for details. This option is only useful when `StandardOutput=` or `StandardError=` are set to `journal` or `kmsg` (or to the same settings in combination with `+console`), and only applies to log messages written to stdout or stderr. Defaults to `daemon`."],
[4,205,"The default **syslog** log level to use when logging to the logging system or the kernel log buffer. One of `emerg`, `alert`, `crit`, `err`, `warning`, `notice`, `info`, `debug`. See [syslog(3)](https://man7.org/linux/man-pages/man3/syslog.3.html) for details. This option is only useful when `StandardOutput=` or `StandardError=` are set to `journal` or `kmsg` (or to the same settings in combination with `+console`), and only applies to log messages written to stdout or stderr. Note that individual lines output by executed processes may be prefixed with a different log level which can be used to override the default log level specified here. The interpretation of these prefixes may be disabled with `SyslogLevelPrefix=`, see below. For details, see [sd-daemon(3)](sd-daemon.html). Defaults to `info`."],
[4,206,"Takes a boolean argument. If true and `StandardOutput=` or `StandardError=` are set to `journal` or `kmsg` (or to the same settings in combination with `+console`), log lines written by the executed process that are prefixed with a log level will be processed with this log level set but the prefix removed. If set to false, the interpretation of these prefixes is disabled and the logged lines are passed on as-is. This only applies to log messages written to stdout or stderr. For details about this prefixing see [sd-daemon(3)](sd-daemon.html). Defaults to true."],
[4,207,"Sets the terminal device node to use if standard input, output, or error are connected to a TTY (see above). Defaults to `/dev/console`."],
[4,208,"Reset the terminal device specified with `TTYPath=` before and after execution. Defaults to \"`no`\"."],
[4,209,"Disconnect all clients which have opened the terminal device specified with `TTYPath=` before and after execution. Defaults to \"`no`\"."],
[4,210,"Configure the size of the TTY specified with `TTYPath=`. If unset or set to the empty string, the kernel default is used.\n\nAdded in version 250."],
[4,211,"If the terminal device specified with `TTYPath=` is a virtual console terminal, try to deallocate the TTY before and after execution. This ensures that the screen and scrollback buffer is cleared. Defaults to \"`no`\"."],
[4,212,"Pass a credential to the unit. Credentials are limited-size binary or textual objects that may be passed to unit processes. They are primarily used for passing cryptographic keys (both public and private) or certificates, user account information or identity information from host to services. The data is accessible from the unit's processes via the file system, at a read-only location that (if possible and permitted) is backed by non-swappable memory. The data is only accessible to the user associated with the unit, via the `User=`/`DynamicUser=` settings (as well as the superuser). When available, the location of credentials is exported as the `$CREDENTIALS_DIRECTORY` environment variable to the unit's processes.\n\nThe `LoadCredential=` setting takes a textual ID to use as name for a credential plus a file system path, separated by a colon. The ID must be a short ASCII string suitable as filename in the filesystem, and may be chosen freely by the user. If the specified path is absolute it is opened as regular file and the credential data is read from it. If the absolute path refers to an `AF_UNIX` stream socket in the file system a connection is made to it (only once at unit start-up) and the credential data read from the connection, providing an easy IPC integration point for dynamically transferring credentials from other services.\n\nIf the specified path is not absolute and itself qualifies as valid credential identifier it is attempted to find a credential that the service manager itself received under the specified name â€” which may be used to propagate credentials from an invoking environment (e.g. a container manager that invoked the service manager) into a service. If no matching system credential is found, the directories `/etc/credstore/`, `/run/credstore/` and `/usr/lib/credstore/` are searched for files under the credential's name â€” which hence are recommended locations for credential data on disk. If `LoadCredentialEncrypted=` is used `/run/credstore.encrypted/`, `/etc/credstore.encrypted/`, and `/usr/lib/credstore.encrypted/` are searched as well.\n\nIf the file system path is omitted it is chosen identical to the credential name, i.e. this is a terse way to declare credentials to inherit from the service manager into a service. This option may be used multiple times, each time defining an additional credential to pass to the unit.\n\nIf an absolute path referring to a directory is specified, every file in that directory (recursively) will be loaded as a separate credential. The ID for each credential will be the provided ID suffixed with \"`_$FILENAME`\" (e.g., \"`Key_file1`\"). When loading from a directory, symlinks will be ignored.\n\nThe contents of the file/socket may be arbitrary binary or textual data, including newline characters and `NUL` bytes.\n\nThe `LoadCredentialEncrypted=` setting is identical to `LoadCredential=`, except that the credential data is decrypted and authenticated before being passed on to the executed processes. Specifically, the referenced path should refer to a file or socket with an encrypted credential, as implemented by [systemd-creds(1)](systemd-creds.html). This credential is loaded, decrypted, authenticated and then passed to the application in plaintext form, in the same way a regular credential specified via `LoadCredential=` would be. A credential configured this way may be symmetrically encrypted/authenticated with a secret key derived from the system's TPM2 security chip, or with a secret key stored in `/var/lib/systemd/credentials.secret`, or with both. Using encrypted and authenticated credentials improves security as credentials are not stored in plaintext and only authenticated and decrypted into plaintext the moment a service requiring them is started. Moreover, credentials may be bound to the local hardware and installations, so that they cannot easily be analyzed offline, or be generated externally. When `DevicePolicy=` is set to \"`closed`\" or \"`strict`\", or set to \"`auto`\" and `DeviceAllow=` is set, or `PrivateDevices=` is set, then this setting adds `/dev/tpmrm0` with `rw` mode to `DeviceAllow=`. See [systemd.resource-control(5)](systemd.resource-control.html) for the details about `DevicePolicy=` or `DeviceAllow=`.\n\nThe credential files/IPC sockets must be accessible to the service manager, but don't have to be directly accessible to the unit's processes: the credential data is read and copied into separate, read-only copies for the unit that are accessible to appropriately privileged processes. This is particularly useful in combination with `DynamicUser=` as this way privileged data can be made available to processes running under a dynamic UID (i.e. not a previously known one) without having to open up access to all users.\n\nIn order to reference the path a credential may be read from within a `ExecStart=` command line use \"`${CREDENTIALS_DIRECTORY}/mycred`\", e.g. \"`ExecStart=cat ${CREDENTIALS_DIRECTORY}/mycred`\". In order to reference the path a credential may be read from within a `Environment=` line use \"`%d/mycred`\", e.g. \"`Environment=MYCREDPATH=%d/mycred`\". For system services the path may also be referenced as \"``/run/credentials/_`UNITNAME`_``\" in cases where no interpolation is possible, e.g. configuration files of software that does not yet support credentials natively. `$CREDENTIALS_DIRECTORY` is considered the primary interface to look for credentials, though, since it also works for user services.\n\nCurrently, an accumulated credential size limit of 1 MB per unit is enforced.\n\nThe service manager itself may receive system credentials that can be propagated to services from a hosting container manager or VM hypervisor. See the [Container Interface](https://systemd.io/CONTAINER_INTERFACE) documentation for details about the former. For the latter, pass [DMI/SMBIOS](https://www.dmtf.org/standards/smbios) OEM string table entries (field type 11) with a prefix of \"`io.systemd.credential:`\" or \"`io.systemd.credential.binary:`\". In both cases a key/value pair separated by \"`=`\" is expected, in the latter case the right-hand side is Base64 decoded when parsed (thus permitting binary data to be passed in). Example [qemu](https://www.qemu.org/docs/master/system/index.html) switch: \"`-smbios type=11,value=io.systemd.credential:xx=yy`\", or \"`-smbios type=11,value=io.systemd.credential.binary:rick=TmV2ZXIgR29ubmEgR2l2ZSBZb3UgVXA=`\". Alternatively, use the **qemu** \"`fw_cfg`\" node \"`opt/io.systemd.credentials/`\". Example **qemu** switch: \"`-fw_cfg name=opt/io.systemd.credentials/mycred,string=supersecret`\". They may also be passed from the UEFI firmware environment via [systemd-stub(7)](systemd-stub.html), from the initrd (see [systemd(1)](systemd.html)), or be specified on the kernel command line using the \"`systemd.set_credential=`\" and \"`systemd.set_credential_binary=`\" switches (see [systemd(1)](systemd.html) â€“ this is not recommended since unprivileged userspace can read the kernel command line).\n\nIf referencing an `AF_UNIX` stream socket to connect to, the connection will originate from an abstract namespace socket, that includes information about the unit and the credential ID in its socket name. Use [getpeername(2)](https://man7.org/linux/man-pages/man2/getpeername.2.html) to query this information. The returned socket name is formatted as `NUL` _`RANDOM`_ \"`/unit/`\" _`UNIT`_ \"`/`\" _`ID`_, i.e. a `NUL` byte (as required for abstract namespace socket names), followed by a random string (consisting of alphadecimal characters), followed by the literal string \"`/unit/`\", followed by the requesting unit name, followed by the literal character \"`/`\", followed by the textual credential ID requested. Example: \"`\\0adf9d86b6eda275e/unit/foobar.service/credx`\" in case the credential \"`credx`\" is requested for a unit \"`foobar.service`\". This functionality is useful for using a single listening socket to serve credentials to multiple consumers.\n\nFor further information see [System and Service Credentials](https://systemd.io/CREDENTIALS) documentation.\n\nAdded in version 247."],
[4,213,"Pass one or more credentials to the unit. Takes a credential name for which we'll attempt to find a credential that the service manager itself received under the specified name â€” which may be used to propagate credentials from an invoking environment (e.g. a container manager that invoked the service manager) into a service. If the credential name is a glob, all credentials matching the glob are passed to the unit. Matching credentials are searched for in the system credentials, the encrypted system credentials, and under `/etc/credstore/`, `/run/credstore/`, `/usr/lib/credstore/`, `/run/credstore.encrypted/`, `/etc/credstore.encrypted/`, and `/usr/lib/credstore.encrypted/` in that order. When multiple credentials of the same name are found, the first one found is used.\n\nThe globbing expression implements a restrictive subset of [glob(7)](https://man7.org/linux/man-pages/man7/glob.7.html): only a single trailing \"`*`\" wildcard may be specified. Both \"`?`\" and \"`[]`\" wildcards are not permitted, nor are \"`*`\" wildcards anywhere except at the end of the glob expression.\n\nWhen multiple credentials of the same name are found, credentials found by `LoadCredential=` and `LoadCredentialEncrypted=` take priority over credentials found by `ImportCredential=`.\n\nAdded in version 254."],
[4,214,"The `SetCredential=` setting is similar to `LoadCredential=` but accepts a literal value to use as data for the credential, instead of a file system path to read the data from. Do not use this option for data that is supposed to be secret, as it is accessible to unprivileged processes via IPC. It's only safe to use this for user IDs, public key material and similar non-sensitive data. For everything else use `LoadCredential=`. In order to embed binary data into the credential data use C-style escaping (i.e. \"`\\n`\" to embed a newline, or \"`\\x00`\" to embed a `NUL` byte).\n\nThe `SetCredentialEncrypted=` setting is identical to `SetCredential=` but expects an encrypted credential in literal form as value. This allows embedding confidential credentials securely directly in unit files. Use [systemd-creds(1)](systemd-creds.html)' `-p` switch to generate suitable `SetCredentialEncrypted=` lines directly from plaintext credentials. For further details see `LoadCredentialEncrypted=` above.\n\nWhen multiple credentials of the same name are found, credentials found by `LoadCredential=`, `LoadCredentialEncrypted=` and `ImportCredential=` take priority over credentials found by `SetCredential=`. As such, `SetCredential=` will act as default if no credentials are found by any of the former. In this case not being able to retrieve the credential from the path specified in `LoadCredential=` or `LoadCredentialEncrypted=` is not considered fatal.\n\nAdded in version 247."],
[4,215,"Takes a four character identifier string for an [utmp(5)](https://man7.org/linux/man-pages/man5/utmp.5.html) and wtmp entry for this service. This should only be set for services such as **getty** implementations (such as [agetty(8)](http://linux.die.net/man/8/agetty)) where utmp/wtmp entries must be created and cleared before and after execution, or for services that shall be executed as if they were run by a **getty** process (see below). If the configured string is longer than four characters, it is truncated and the terminal four characters are used. This setting interprets %I style string replacements. This setting is unset by default, i.e. no utmp/wtmp entries are created or cleaned up for this service."],
[4,216,"Takes one of \"`init`\", \"`login`\" or \"`user`\". If `UtmpIdentifier=` is set, controls which type of [utmp(5)](https://man7.org/linux/man-pages/man5/utmp.5.html)/wtmp entries for this service are generated. This setting has no effect unless `UtmpIdentifier=` is set too. If \"`init`\" is set, only an `INIT_PROCESS` entry is generated and the invoked process must implement a **getty**\\-compatible utmp/wtmp logic. If \"`login`\" is set, first an `INIT_PROCESS` entry, followed by a `LOGIN_PROCESS` entry is generated. In this case, the invoked process must implement a [login(1)](http://linux.die.net/man/1/login)\\-compatible utmp/wtmp logic. If \"`user`\" is set, first an `INIT_PROCESS` entry, then a `LOGIN_PROCESS` entry and finally a `USER_PROCESS` entry is generated. In this case, the invoked process may be any process that is suitable to be run as session leader. Defaults to \"`init`\".\n\nAdded in version 225."],
[2,"AmbientCapabilities","",131,5,null],
[2,"AppArmorProfile","",135,5,null],
[2,"BindPaths","",121,5,null],
[2,"BindReadOnlyPaths","",121,5,null],
[2,"CPUAffinity","",149,5,null],
[2,"CPUSchedulingPolicy","",146,5,null],
[2,"CPUSchedulingPriority","",147,5,null],
[2,"CPUSchedulingResetOnFork","",148,5,null],
[2,"CacheDirectory","",156,5,null],
[2,"CacheDirectoryMode","",157,5,null],
[2,"CapabilityBoundingSet","",130,5,null],
[2,"ConfigurationDirectory","",156,5,null],
[2,"ConfigurationDirectoryMode","",157,5,null],
[2,"CoredumpFilter","",139,5,null],
[2,"DynamicUser","",126,5,null],
[2,"Environment","",190,5,null],
[2,"EnvironmentFile","",191,5,null],
[2,"ExecPaths","",160,5,null],
[2,"ExecSearchPath","",108,5,null],
[2,"ExtensionDirectories","",124,5,null],
[2,"ExtensionImagePolicy","",117,5,null],
[2,"ExtensionImages","",123,5,null],
[2,"Group","",125,5,null],
[2,"IOSchedulingClass","",152,5,null],
[2,"IOSchedulingPriority","",153,5,null],
[2,"IPCNamespacePath","",167,5,null],
[2,"IgnoreSIGPIPE","",144,5,null],
[2,"ImportCredential","GLOB",213,5,null],
[2,"InaccessiblePaths","",160,5,null],
[2,"KeyringMode","",140,5,null],
[2,"LimitAS","",137,5,null],
[2,"LimitCORE","",137,5,null],
[2,"LimitCPU","",137,5,null],
[2,"LimitDATA","",137,5,null],
[2,"LimitFSIZE","",137,5,null],
[2,"LimitLOCKS","",137,5,null],
[2,"LimitMEMLOCK","",137,5,null],
[2,"LimitMSGQUEUE","",137,5,null],
[2,"LimitNICE","",137,5,null],
[2,"LimitNOFILE","",137,5,null],
[2,"LimitNPROC","",137,5,null],
[2,"LimitRSS","",137,5,null],
[2,"LimitRTPRIO","",137,5,null],
[2,"LimitRTTIME","",137,5,null],
[2,"LimitSIGPENDING","",137,5,null],
[2,"LimitSTACK","",137,5,null],
[2,"LoadCredential","ID[:PATH]",212,5,null],
[2,"LoadCredentialEncrypted","ID[:PATH]",212,5,null],
[2,"LockPersonality","",179,5,null],
[2,"LogExtraFields","",199,5,null],
[2,"LogFilterPatterns","",201,5,null],
[2,"LogLevelMax","",198,5,null],
[2,"LogNamespace","",202,5,null],
[2,"LogRateLimitBurst","",200,5,null],
[2,"LogRateLimitIntervalSec","",200,5,null],
[2,"LogsDirectory","",156,5,null],
[2,"LogsDirectoryMode","",157,5,null],
[2,"MemoryDenyWriteExecute","",180,5,null],
[2,"MemoryKSM","",168,5,null],
[2,"MountAPIVFS","",118,5,null],
[2,"MountFlags","",185,5,null],
[2,"MountImagePolicy","",117,5,null],
[2,"MountImages","",122,5,null],
[2,"NUMAMask","",151,5,null],
[2,"NUMAPolicy","",150,5,null],
[2,"NetworkNamespacePath","",165,5,null],
[2,"Nice","",145,5,null],
[2,"NoExecPaths","",160,5,null],
[2,"NoNewPrivileges","",132,5,null],
[2,"OOMScoreAdjust","",141,5,null],
[2,"PAMName","",129,5,null],
[2,"PassEnvironment","",192,5,null],
[2,"Personality","",143,5,null],
[2,"PrivateDevices","",163,5,null],
[2,"PrivateIPC","",166,5,null],
[2,"PrivateMounts","",184,5,null],
[2,"PrivateNetwork","",164,5,null],
[2,"PrivateTmp","",162,5,null],
[2,"PrivateUsers","",169,5,null],
[2,"ProcSubset","",120,5,null],
[2,"ProtectClock","",171,5,null],
[2,"ProtectControlGroups","",175,5,null],
[2,"ProtectHome","",155,5,null],
[2,"ProtectHostname","",170,5,null],
[2,"ProtectKernelLogs","",174,5,null],
[2,"ProtectKernelModules","",173,5,null],
[2,"ProtectKernelTunables","",172,5,null],
[2,"ProtectProc","",119,5,null],
[2,"ProtectSystem","",154,5,null],
[2,"ReadOnlyPaths","",160,5,null],
[2,"ReadWritePaths","",160,5,null],
[2,"RemoveIPC","",183,5,null],
[2,"RestrictAddressFamilies","",176,5,null],
[2,"RestrictFileSystems","",177,5,null],
[2,"RestrictNamespaces","",178,5,null],
[2,"RestrictRealtime","",181,5,null],
[2,"RestrictSUIDSGID","",182,5,null],
[2,"RootDirectory","",110,5,null],
[2,"RootEphemeral","",113,5,null],
[2,"RootHash","",114,5,null],
[2,"RootHashSignature","",115,5,null],
[2,"RootImage","",111,5,null],
[2,"RootImageOptions","",112,5,null],
[2,"RootImagePolicy","",117,5,null],
[2,"RootVerity","",116,5,null],
[2,"RuntimeDirectory","",156,5,null],
[2,"RuntimeDirectoryMode","",157,5,null],
[2,"RuntimeDirectoryPreserve","",158,5,null],
[2,"SELinuxContext","",134,5,null],
[2,"SecureBits","",133,5,null],
[2,"SetCredential","ID:VALUE",214,5,null],
[2,"SetCredentialEncrypted","ID:VALUE",214,5,null],
[2,"SetLoginEnvironment","",128,5,null],
[2,"SmackProcessLabel","",136,5,null],
[2,"StandardError","",196,5,null],
[2,"StandardInput","",194,5,null],
[2,"StandardInputData","",197,5,null],
[2,"StandardInputText","",197,5,null],
[2,"StandardOutput","",195,5,null],
[2,"StateDirectory","",156,5,null],
[2,"StateDirectoryMode","",157,5,null],
[2,"SupplementaryGroups","",127,5,null],
[2,"SyslogFacility","",204,5,null],
[2,"SyslogIdentifier","",203,5,null],
[2,"SyslogLevel","",205,5,null],
[2,"SyslogLevelPrefix","",206,5,null],
[2,"SystemCallArchitectures","",188,5,null],
[2,"SystemCallErrorNumber","",187,5,null],
[2,"SystemCallFilter","",186,5,null],
[2,"SystemCallLog","",189,5,null],
[2,"TTYColumns","",210,5,null],
[2,"TTYPath","",207,5,null],
[2,"TTYReset","",208,5,null],
[2,"TTYRows","",210,5,null],
[2,"TTYVHangup","",209,5,null],
[2,"TTYVTDisallocate","",211,5,null],
[2,"TemporaryFileSystem","",161,5,null],
[2,"TimeoutCleanSec","",159,5,null],
[2,"TimerSlackNSec","",142,5,null],
[2,"UMask","",138,5,null],
[2,"UnsetEnvironment","",193,5,null],
[2,"User","",125,5,null],
[2,"UtmpIdentifier","",215,5,null],
[2,"UtmpMode","",216,5,null],
[2,"WorkingDirectory","",109,5,null],
[3,7,"systemd.automount(5)","systemd.automount â€” Automount unit configuration","systemd.automount.html"],
[6,3,"Automount"],
[4,217,"Takes an absolute path of a directory of the automount point. If the automount point does not exist at time that the automount point is installed, it is created. This string must be reflected in the unit filename. (See above.) This option is mandatory."],
[4,218,"Extra mount options to use when creating the autofs mountpoint. This takes a comma-separated list of options. This setting is optional. Note that the usual specifier expansion is applied to this setting, literal percent characters should hence be written as \"`%%`\".\n\nAdded in version 250."],
[4,219,"Directories of automount points (and any parent directories) are automatically created if needed. This option specifies the file system access mode used when creating these directories. Takes an access mode in octal notation. Defaults to 0755."],
[4,220,"Configures an idle timeout. Once the mount has been idle for the specified time, systemd will attempt to unmount. Takes a unit-less value in seconds, or a time span value such as \"5min 20s\". Pass 0 to disable the timeout logic. The timeout is disabled by default.\n\nAdded in version 220."],
[2,"DirectoryMode","",219,7,3],
[2,"ExtraOptions","",218,7,3],
[2,"TimeoutIdleSec","",220,7,3],
[2,"Where","",217,7,3],
[3,8,"systemd.mount(5)","systemd.mount â€” Mount unit configuration","systemd.mount.html"],
[6,4,"Mount"],
[4,221,"Configures a `Requires=` and an `After=` dependency between the created mount unit and another systemd unit, such as a device or mount unit. The argument should be a unit name, or an absolute path to a device node or mount point. This option may be specified more than once. This option is particularly useful for mount point declarations that need an additional device to be around (such as an external journal device for journal file systems) or an additional mount to be in place (such as an overlay file system that merges multiple mount points). See `After=` and `Requires=` in [systemd.unit(5)](systemd.unit.html) for details.\n\nNote that this option always applies to the created mount unit only regardless whether `x-systemd.automount` has been specified.\n\nAdded in version 220."],
[4,222,"In the created mount unit, configures a `Before=` or `After=` dependency on another systemd unit, such as a mount unit. The argument should be a unit name or an absolute path to a mount point. This option may be specified more than once. This option is particularly useful for mount point declarations with `nofail` option that are mounted asynchronously but need to be mounted before or after some unit start, for example, before `local-fs.target` unit. See `Before=` and `After=` in [systemd.unit(5)](systemd.unit.html) for details.\n\nNote that these options always apply to the created mount unit only regardless whether `x-systemd.automount` has been specified.\n\nAdded in version 233."],
[4,223,"In the created mount unit, configures a `WantedBy=` or `RequiredBy=` dependency on another unit. This option may be specified more than once. If this is specified, the normal automatic dependencies on the created mount unit, e.g., `local-fs.target`, are not automatically created. See `WantedBy=` and `RequiredBy=` in [systemd.unit(5)](systemd.unit.html) for details.\n\nAdded in version 245."],
[4,224,"Configures a `RequiresMountsFor=` dependency between the created mount unit and other mount units. The argument must be an absolute path. This option may be specified more than once. See `RequiresMountsFor=` in [systemd.unit(5)](systemd.unit.html) for details.\n\nAdded in version 220."],
[4,225,"Takes a boolean argument. If true or no argument, a `BindsTo=` dependency on the backing device is set. If false, the mount unit is not stopped no matter whether the backing device is still present. This is useful when the file system is backed by volume managers. If not set, and the mount comes from unit fragments, i.e. generated from `/etc/fstab` by [systemd-fstab-generator(8)](systemd-fstab-generator.html) or loaded from a manually configured mount unit, a combination of `Requires=` and `StopPropagatedFrom=` dependencies is set on the backing device. If doesn't, only `Requires=` is used.\n\nAdded in version 233."],
[4,226,"Configures the idle timeout of the automount unit. See `TimeoutIdleSec=` in [systemd.automount(5)](systemd.automount.html) for details.\n\nAdded in version 220."],
[4,227,"Configure how long systemd should wait for a device to show up before giving up on an entry from `/etc/fstab`. Specify a time in seconds or explicitly append a unit such as \"`s`\", \"`min`\", \"`h`\", \"`ms`\".\n\nNote that this option can only be used in `/etc/fstab`, and will be ignored when part of the `Options=` setting in a unit file.\n\nAdded in version 215."],
[4,228,"Configure how long systemd should wait for the mount command to finish before giving up on an entry from `/etc/fstab`. Specify a time in seconds or explicitly append a unit such as \"`s`\", \"`min`\", \"`h`\", \"`ms`\".\n\nNote that this option can only be used in `/etc/fstab`, and will be ignored when part of the `Options=` setting in a unit file.\n\nSee `TimeoutSec=` below for details.\n\nAdded in version 233."],
[4,229,"Takes an absolute path of a device node, file or other resource to mount. See [mount(8)](https://man7.org/linux/man-pages/man8/mount.8.html) for details. If this refers to a device node, a dependency on the respective device unit is automatically created. (See [systemd.device(5)](systemd.device.html) for more information.) This option is mandatory. Note that the usual specifier expansion is applied to this setting, literal percent characters should hence be written as \"`%%`\". If this mount is a bind mount and the specified path does not exist yet it is created as directory."],
[4,230,"Takes an absolute path of a file or directory for the mount point; in particular, the destination cannot be a symbolic link. If the mount point does not exist at the time of mounting, it is created as either a directory or a file. The former is the usual case; the latter is done only if this mount is a bind mount and the source (`What=`) is not a directory. This string must be reflected in the unit filename. (See above.) This option is mandatory."],
[4,231,"Takes a string for the file system type. See [mount(8)](https://man7.org/linux/man-pages/man8/mount.8.html) for details. This setting is optional."],
[4,232,"Mount options to use when mounting. This takes a comma-separated list of options. This setting is optional. Note that the usual specifier expansion is applied to this setting, literal percent characters should hence be written as \"`%%`\"."],
[4,233,"Takes a boolean argument. If true, parsing of the options specified in `Options=` is relaxed, and unknown mount options are tolerated. This corresponds with [mount(8)](https://man7.org/linux/man-pages/man8/mount.8.html)'s _`-s`_ switch. Defaults to off.\n\nAdded in version 215."],
[4,234,"Takes a boolean argument. If true, detach the filesystem from the filesystem hierarchy at time of the unmount operation, and clean up all references to the filesystem as soon as they are not busy anymore. This corresponds with [umount(8)](https://man7.org/linux/man-pages/man8/umount.8.html)'s _`-l`_ switch. Defaults to off.\n\nAdded in version 232."],
[4,235,"Takes a boolean argument. If false, a mount point that shall be mounted read-write but cannot be mounted so is retried to be mounted read-only. If true the operation will fail immediately after the read-write mount attempt did not succeed. This corresponds with [mount(8)](https://man7.org/linux/man-pages/man8/mount.8.html)'s _`-w`_ switch. Defaults to off.\n\nAdded in version 246."],
[4,236,"Takes a boolean argument. If true, force an unmount (in case of an unreachable NFS system). This corresponds with [umount(8)](https://man7.org/linux/man-pages/man8/umount.8.html)'s _`-f`_ switch. Defaults to off.\n\nAdded in version 232."],
[4,237,"Directories of mount points (and any parent directories) are automatically created if needed. This option specifies the file system access mode used when creating these directories. Takes an access mode in octal notation. Defaults to 0755."],
[4,238,"Configures the time to wait for the mount command to finish. If a command does not exit within the configured time, the mount will be considered failed and be shut down again. All commands still running will be terminated forcibly via `SIGTERM`, and after another delay of this time with `SIGKILL`. (See `KillMode=` in [systemd.kill(5)](systemd.kill.html).) Takes a unit-less value in seconds, or a time span value such as \"5min 20s\". Pass 0 to disable the timeout logic. The default value is set from `DefaultTimeoutStartSec=` option in [systemd-system.conf(5)](systemd-system.conf.html)."],
[2,"DirectoryMode","",237,8,4],
[2,"ForceUnmount","",236,8,4],
[2,"LazyUnmount","",234,8,4],
[2,"Options","",232,8,4],
[2,"ReadWriteOnly","",235,8,4],
[2,"SloppyOptions","",233,8,4],
[2,"TimeoutSec","",238,8,4],
[2,"Type","",231,8,4],
[2,"What","",229,8,4],
[2,"Where","",230,8,4],
[2,"x-systemd.after","",222,8,null],
[2,"x-systemd.before","",222,8,null],
[2,"x-systemd.device-bound","",225,8,null],
[2,"x-systemd.device-timeout","",227,8,null],
[2,"x-systemd.idle-timeout","",226,8,null],
[2,"x-systemd.mount-timeout","",228,8,null],
[2,"x-systemd.required-by","",223,8,null],
[2,"x-systemd.requires","",221,8,null],
[2,"x-systemd.requires-mounts-for","",224,8,null],
[2,"x-systemd.wanted-by","",223,8,null],
[3,9,"systemd.path(5)","systemd.path â€” Path unit configuration","systemd.path.html"],
[4,239,"Defines paths to monitor for certain changes: `PathExists=` may be used to watch the mere existence of a file or directory. If the file specified exists, the configured unit is activated. `PathExistsGlob=` works similarly, but checks for the existence of at least one file matching the globbing pattern specified. `PathChanged=` may be used to watch a file or directory and activate the configured unit whenever it changes. It is not activated on every write to the watched file but it is activated if the file which was open for writing gets closed. `PathModified=` is similar, but additionally it is activated also on simple writes to the watched file. `DirectoryNotEmpty=` may be used to watch a directory and activate the configured unit whenever it contains at least one file.\n\nThe arguments of these directives must be absolute file system paths.\n\nMultiple directives may be combined, of the same and of different types, to watch multiple paths. If the empty string is assigned to any of these options, the list of paths to watch is reset, and any prior assignments of these options will not have any effect.\n\nIf a path already exists (in case of `PathExists=` and `PathExistsGlob=`) or a directory already is not empty (in case of `DirectoryNotEmpty=`) at the time the path unit is activated, then the configured unit is immediately activated as well. Something similar does not apply to `PathChanged=` and `PathModified=`.\n\nIf the path itself or any of the containing directories are not accessible, **systemd** will watch for permission changes and notice that conditions are satisfied when permissions allow that."],
[4,240,"The unit to activate when any of the configured paths changes. The argument is a unit name, whose suffix is not \"`.path`\". If not specified, this value defaults to a service that has the same name as the path unit, except for the suffix. (See above.) It is recommended that the unit name that is activated and the unit name of the path unit are named identical, except for the suffix."],
[4,241,"Takes a boolean argument. If true, the directories to watch are created before watching. This option is ignored for `PathExists=` settings. Defaults to `false`."],
[4,242,"If `MakeDirectory=` is enabled, use the mode specified here to create the directories in question. Takes an access mode in octal notation. Defaults to `0755`."],
[4,243,"Configures a limit on how often this path unit may be activated within a specific time interval. The `TriggerLimitIntervalSec=` may be used to configure the length of the time interval in the usual time units \"`us`\", \"`ms`\", \"`s`\", \"`min`\", \"`h`\", â€¦ and defaults to 2s. See [systemd.time(7)](systemd.time.html) for details on the various time units understood. The `TriggerLimitBurst=` setting takes a positive integer value and specifies the number of permitted activations per time interval, and defaults to 200. Set either to 0 to disable any form of trigger rate limiting. If the limit is hit, the unit is placed into a failure mode, and will not watch the paths anymore until restarted. Note that this limit is enforced before the service activation is enqueued.\n\nAdded in version 250."],
[2,"DirectoryMode","",242,9,null],
[2,"DirectoryNotEmpty","",239,9,null],
[2,"MakeDirectory","",241,9,null],
[2,"PathChanged","",239,9,null],
[2,"PathExists","",239,9,null],
[2,"PathExistsGlob","",239,9,null],
[2,"PathModified","",239,9,null],
[2,"TriggerLimitBurst","",243,9,null],
[2,"TriggerLimitIntervalSec","",243,9,null],
[2,"Unit","",240,9,null],
[3,10,"systemd.kill(5)","systemd.kill â€” Process killing procedure configuration","systemd.kill.html"],
[4,244,"Specifies how processes of this unit shall be killed. One of `control-group`, `mixed`, `process`, `none`.\n\nIf set to `control-group`, all remaining processes in the control group of this unit will be killed on unit stop (for services: after the stop command is executed, as configured with `ExecStop=`). If set to `mixed`, the `SIGTERM` signal (see below) is sent to the main process while the subsequent `SIGKILL` signal (see below) is sent to all remaining processes of the unit's control group. If set to `process`, only the main process itself is killed (not recommended!). If set to `none`, no process is killed (strongly recommended against!). In this case, only the stop command will be executed on unit stop, but no process will be killed otherwise. Processes remaining alive after stop are left in their control group and the control group continues to exist after stop unless empty.\n\nNote that it is not recommended to set `KillMode=` to `process` or even `none`, as this allows processes to escape the service manager's lifecycle and resource management, and to remain running even while their service is considered stopped and is assumed to not consume any resources.\n\nProcesses will first be terminated via `SIGTERM` (unless the signal to send is changed via `KillSignal=` or `RestartKillSignal=`). Optionally, this is immediately followed by a `SIGHUP` (if enabled with `SendSIGHUP=`). If processes still remain after:\n\n*   the main process of a unit has exited (applies to `KillMode=`: `mixed`)\n    \n*   the delay configured via the `TimeoutStopSec=` has passed (applies to `KillMode=`: `control-group`, `mixed`, `process`)\n    \n\nthe termination request is repeated with the `SIGKILL` signal or the signal specified via `FinalKillSignal=` (unless this is disabled via the `SendSIGKILL=` option). See [kill(2)](https://man7.org/linux/man-pages/man2/kill.2.html) for more information.\n\nDefaults to `control-group`.\n\nAdded in version 187."],
[4,245,"Specifies which signal to use when stopping a service. This controls the signal that is sent as first step of shutting down a unit (see above), and is usually followed by `SIGKILL` (see above and below). For a list of valid signals, see [signal(7)](https://man7.org/linux/man-pages/man7/signal.7.html). Defaults to `SIGTERM`.\n\nNote that, right after sending the signal specified in this setting, systemd will always send `SIGCONT`, to ensure that even suspended tasks can be terminated cleanly.\n\nAdded in version 187."],
[4,246,"Specifies which signal to use when restarting a service. The same as `KillSignal=` described above, with the exception that this setting is used in a restart job. Not set by default, and the value of `KillSignal=` is used.\n\nAdded in version 244."],
[4,247,"Specifies whether to send `SIGHUP` to remaining processes immediately after sending the signal configured with `KillSignal=`. This is useful to indicate to shells and shell-like programs that their connection has been severed. Takes a boolean value. Defaults to \"`no`\".\n\nAdded in version 207."],
[4,248,"Specifies whether to send `SIGKILL` (or the signal specified by `FinalKillSignal=`) to remaining processes after a timeout, if the normal shutdown procedure left processes of the service around. When disabled, a `KillMode=` of `control-group` or `mixed` service will not restart if processes from prior services exist within the control group. Takes a boolean value. Defaults to \"`yes`\".\n\nAdded in version 187."],
[4,249,"Specifies which signal to send to remaining processes after a timeout if `SendSIGKILL=` is enabled. The signal configured here should be one that is not typically caught and processed by services (`SIGTERM` is not suitable). Developers can find it useful to use this to generate a coredump to troubleshoot why a service did not terminate upon receiving the initial `SIGTERM` signal. This can be achieved by configuring `LimitCORE=` and setting `FinalKillSignal=` to either `SIGQUIT` or `SIGABRT`. Defaults to `SIGKILL`.\n\nAdded in version 240."],
[4,250,"Specifies which signal to use to terminate the service when the watchdog timeout expires (enabled through `WatchdogSec=`). Defaults to `SIGABRT`.\n\nAdded in version 240."],
[2,"FinalKillSignal","",249,10,null],
[2,"KillMode","",244,10,null],
[2,"KillSignal","",245,10,null],
[2,"RestartKillSignal","",246,10,null],
[2,"SendSIGHUP","",247,10,null],
[2,"SendSIGKILL","",248,10,null],
[2,"WatchdogSignal","",250,10,null],
[3,11,"systemd.scope(5)","systemd.scope â€” Scope unit configuration","systemd.scope.html"],
[4,251,"Configure the out-of-memory (OOM) killing policy for the kernel and the userspace OOM killer [systemd-oomd.service(8)](systemd-oomd.service.html). On Linux, when memory becomes scarce to the point that the kernel has trouble allocating memory for itself, it might decide to kill a running process in order to free up memory and reduce memory pressure. Note that `systemd-oomd.service` is a more flexible solution that aims to prevent out-of-memory situations for the userspace too, not just the kernel, by attempting to terminate services earlier, before the kernel would have to act.\n\nThis setting takes one of `continue`, `stop` or `kill`. If set to `continue` and a process in the unit is killed by the OOM killer, this is logged but the unit continues running. If set to `stop` the event is logged but the unit is terminated cleanly by the service manager. If set to `kill` and one of the unit's processes is killed by the OOM killer the kernel is instructed to kill all remaining processes of the unit too, by setting the `memory.oom.group` attribute to `1`; also see kernel page [Control Group v2](https://docs.kernel.org/admin-guide/cgroup-v2.html).\n\nDefaults to the setting `DefaultOOMPolicy=` in [systemd-system.conf(5)](systemd-system.conf.html) is set to, except for units where `Delegate=` is turned on, where it defaults to `continue`.\n\nUse the `OOMScoreAdjust=` setting to configure whether processes of the unit shall be considered preferred or less preferred candidates for process termination by the Linux OOM killer logic. See [systemd.exec(5)](systemd.exec.html) for details.\n\nThis setting also applies to [systemd-oomd.service(8)](systemd-oomd.service.html). Similarly to the kernel OOM kills performed by the kernel, this setting determines the state of the unit after **systemd-oomd** kills a cgroup associated with it.\n\nAdded in version 243."],
[4,252,"Configures a maximum time for the scope to run. If this is used and the scope has been active for longer than the specified time it is terminated and put into a failure state. Pass \"`infinity`\" (the default) to configure no runtime limit.\n\nAdded in version 244."],
[4,253,"This option modifies `RuntimeMaxSec=` by increasing the maximum runtime by an evenly distributed duration between 0 and the specified value (in seconds). If `RuntimeMaxSec=` is unspecified, then this feature will be disabled.\n\nAdded in version 250."],
[2,"OOMPolicy","",251,11,null],
[2,"RuntimeMaxSec","",252,11,null],
[2,"RuntimeRandomizedExtraSec","",253,11,null],
[3,12,"systemd.swap(5)","systemd.swap â€” Swap unit configuration","systemd.swap.html"],
[4,254,"Configure how long systemd should wait for a device to show up before giving up on an entry from `/etc/fstab`. Specify a time in seconds or explicitly append a unit such as \"`s`\", \"`min`\", \"`h`\", \"`ms`\".\n\nNote that this option can only be used in `/etc/fstab`, and will be ignored when part of the `Options=` setting in a unit file.\n\nAdded in version 215."],
[4,255,"Takes an absolute path of a device node or file to use for paging. See [swapon(8)](https://man7.org/linux/man-pages/man8/swapon.8.html) for details. If this refers to a device node, a dependency on the respective device unit is automatically created. (See [systemd.device(5)](systemd.device.html) for more information.) If this refers to a file, a dependency on the respective mount unit is automatically created. (See [systemd.mount(5)](systemd.mount.html) for more information.) This option is mandatory. Note that the usual specifier expansion is applied to this setting, literal percent characters should hence be written as \"`%%`\"."],
[4,256,"Swap priority to use when activating the swap device or file. This takes an integer. This setting is optional and ignored when the priority is set by `pri=` in the `Options=` key."],
[4,257,"May contain an option string for the swap device. This may be used for controlling discard options among other functionality, if the swap backing device supports the discard or trim operation. (See [swapon(8)](https://man7.org/linux/man-pages/man8/swapon.8.html) for more information.) Note that the usual specifier expansion is applied to this setting, literal percent characters should hence be written as \"`%%`\".\n\nAdded in version 217."],
[4,258,"Configures the time to wait for the swapon command to finish. If a command does not exit within the configured time, the swap will be considered failed and be shut down again. All commands still running will be terminated forcibly via `SIGTERM`, and after another delay of this time with `SIGKILL`. (See `KillMode=` in [systemd.kill(5)](systemd.kill.html).) Takes a unit-less value in seconds, or a time span value such as \"5min 20s\". Pass \"`0`\" to disable the timeout logic. Defaults to `DefaultTimeoutStartSec=` from the manager configuration file (see [systemd-system.conf(5)](systemd-system.conf.html))."],
[2,"Options","",257,12,null],
[2,"Priority","",256,12,null],
[2,"TimeoutSec","",258,12,null],
[2,"What","",255,12,null],
[2,"x-systemd.device-timeout","",254,12,null],
[3,13,"systemd-network-generator.service(8)","systemd-network-generator.service, systemd-network-generator â€” Generate network configuration from the kernel command line","systemd-network-generator.service.html"],
[4,259,"Translated into [systemd.network(5)](systemd.network.html) files.\n\nIn addition to the parameters [dracut.cmdline(7)](https://man7.org/linux/man-pages/man7/dracut.cmdline.7.html) defines the `ip=` option accepts the special value \"`link-local`\". If selected, the network interfaces will be configured for link-local addressing (IPv4LL, IPv6LL) only, DHCP or IPv6RA will not be enabled.\n\nAdded in version 245."],
[4,260,"Translated into [systemd.link(5)](systemd.link.html) files.\n\nAdded in version 245."],
[4,261,"Translated into [systemd.netdev(5)](systemd.netdev.html) files.\n\nAdded in version 245."],
[2,"bond","",261,13,null],
[2,"bootdev","",261,13,null],
[2,"bridge","",261,13,null],
[2,"ifname","",260,13,null],
[2,"ip","",259,13,null],
[2,"nameserver","",259,13,null],
[2,"net.ifname-policy","",260,13,null],
[2,"rd.peerdns","",259,13,null],
[2,"rd.route","",259,13,null],
[2,"vlan","",261,13,null],
[3,14,"kernel-command-line(7)","kernel-command-line â€” Kernel command line parameters","kernel-command-line.html"],
[4,262,"Parameters understood by the system and service manager to control system behavior. For details, see [systemd(1)](systemd.html).\n\nAdded in version 186."],
[4,263,"Additional parameters understood by [systemd-debug-generator(8)](systemd-debug-generator.html), to mask or start specific units at boot, or invoke a debug shell on tty9.\n\nAdded in version 215."],
[4,264,"Additional parameters understood by [systemd-run-generator(8)](systemd-run-generator.html), to run a command line specified on the kernel command line as system service after booting up.\n\nAdded in version 240."],
[4,265,"During early boot, the generation of core dump files is disabled until a core dump handler (if any) takes over. This parameter allows specifying an absolute path where core dump files should be stored until a handler is installed. The path should be absolute and may contain specifiers, see [core(5)](https://man7.org/linux/man-pages/man5/core.5.html) for details.\n\nAdded in version 240."],
[4,266,"This parameter is understood by several system tools to control whether or not they should restore system state from the previous boot. For details, see [systemd-backlight@.service(8)](systemd-backlight@.service.html) and [systemd-rfkill.service(8)](systemd-rfkill.service.html).\n\nAdded in version 209."],
[4,267,"This parameter controls whether the system shall boot up in volatile mode. Takes a boolean argument, or the special value \"`state`\". If false (the default), normal boot mode is selected, the root directory and `/var/` are mounted as specified on the kernel command line or `/etc/fstab`, or otherwise configured. If true, full state-less boot mode is selected. In this case the root directory is mounted as volatile memory file system (\"`tmpfs`\"), and only `/usr/` is mounted from the file system configured as root device, in read-only mode. This enables fully state-less boots were the vendor-supplied OS is used as shipped, with only default configuration and no stored state in effect, as `/etc/` and `/var/` (as well as all other resources shipped in the root file system) are reset at boot and lost on shutdown. If this setting is set to \"`state`\" the root file system is mounted read-only, however `/var/` is mounted as a volatile memory file system (\"`tmpfs`\"), so that the system boots up with the normal configuration applied, but all state reset at boot and lost at shutdown. If this setting is set to \"`overlay`\" the root file system is set up as \"`overlayfs`\" mount combining the read-only root directory with a writable \"`tmpfs`\", so that no modifications are made to disk, but the file system may be modified nonetheless with all changes being lost at reboot. For details, see [systemd-volatile-root.service(8)](systemd-volatile-root.service.html) and [systemd-fstab-generator(8)](systemd-fstab-generator.html).\n\nAdded in version 233."],
[4,268,"Parameters understood by the system and service manager to control locale and language settings. For details, see [systemd(1)](systemd.html).\n\nAdded in version 186."],
[4,269,"Parameters understood by the file system checker services. For details, see [systemd-fsck@.service(8)](systemd-fsck@.service.html).\n\nAdded in version 186."],
[4,270,"Parameter understood by the file quota checker service. For details, see [systemd-quotacheck.service(8)](systemd-quotacheck.service.html).\n\nAdded in version 186."],
[4,271,"Parameters understood by the journal service. For details, see [systemd-journald.service(8)](systemd-journald.service.html).\n\nAdded in version 186."],
[4,272,"Parameters understood by the virtual console setup logic. For details, see [vconsole.conf(5)](vconsole.conf.html).\n\nAdded in version 186."],
[4,273,"Parameters understood by the device event managing daemon. For details, see [systemd-udevd.service(8)](systemd-udevd.service.html).\n\nAdded in version 186."],
[4,274,"May be used to disable the Plymouth boot splash. For details, see [plymouth(8)](http://linux.die.net/man/8/plymouth).\n\nAdded in version 186."],
[4,275,"Configures the LUKS full-disk encryption logic at boot. For details, see [systemd-cryptsetup-generator(8)](systemd-cryptsetup-generator.html).\n\nAdded in version 186."],
[4,276,"Configures the `/etc/fstab` logic at boot. For details, see [systemd-fstab-generator(8)](systemd-fstab-generator.html).\n\nAdded in version 186."],
[4,277,"Configures the root file system and its file system type and mount options, as well as whether it shall be mounted read-only or read-write initially. For details, see [systemd-fstab-generator(8)](systemd-fstab-generator.html).\n\nIf `root=` is not set (or set to \"`gpt-auto`\") the automatic root partition discovery implemented by [systemd-gpt-auto-generator(8)](systemd-gpt-auto-generator.html) will be in effect. In this case `rootfstype=`, `rootflags=`, `ro`, `rw` will be interpreted by **systemd-gpt-auto-generator**.\n\nAdded in version 215."],
[4,278,"Configures the /usr file system (if required) and its file system type and mount options. For details, see [systemd-fstab-generator(8)](systemd-fstab-generator.html).\n\nAdded in version 235."],
[4,279,"Configures the integrity protection root hash for the root and `/usr` file systems, and other related parameters. For details, see [systemd-veritysetup-generator(8)](systemd-veritysetup-generator.html).\n\nAdded in version 233."],
[4,280,"Configures whether the `serial-getty@.service` will run. For details, see [systemd-getty-generator(8)](systemd-getty-generator.html).\n\nAdded in version 250."],
[4,281,"Configures whether GPT-based partition auto-discovery shall be attempted. For details, see [systemd-gpt-auto-generator(8)](systemd-gpt-auto-generator.html).\n\nAdded in version 215."],
[4,282,"When GPT-based partition auto-discovery is used, configures the image dissection policy string to apply, as per [systemd.image-policy(7)](systemd.image-policy.html). For details see [systemd-gpt-auto-generator(8)](systemd-gpt-auto-generator.html).\n\nAdded in version 254."],
[4,283,"Overrides the default start job timeout `DefaultTimeoutStartSec=` at boot. For details, see [systemd-system.conf(5)](systemd-system.conf.html).\n\nAdded in version 230."],
[4,284,"Overrides the default device timeout `DefaultDeviceTimeoutSec=` at boot. For details, see [systemd-system.conf(5)](systemd-system.conf.html).\n\nAdded in version 254."],
[4,285,"Overrides the watchdog device path `WatchdogDevice=`. For details, see [systemd-system.conf(5)](systemd-system.conf.html).\n\nAdded in version 236."],
[4,286,"Overrides the watchdog timeout settings otherwise configured with `RuntimeWatchdog=`, `RebootWatchdog=` and `KExecWatchdogSec=`. Takes a time value (if no unit is specified, seconds is the implicitly assumed time unit) or the special strings \"`off`\" or \"`default`\". For details, see [systemd-system.conf(5)](systemd-system.conf.html).\n\nAdded in version 250."],
[4,287,"Overrides the watchdog pre-timeout settings otherwise configured with `RuntimeWatchdogPreSec=`. Takes a time value (if no unit is specified, seconds is the implicitly assumed time unit) or the special strings \"`off`\" or \"`default`\". For details, see [systemd-system.conf(5)](systemd-system.conf.html).\n\nAdded in version 251."],
[4,288,"Overrides the watchdog pre-timeout settings otherwise configured with `RuntimeWatchdogPreGovernor=`. Takes a string value. For details, see [systemd-system.conf(5)](systemd-system.conf.html).\n\nAdded in version 251."],
[4,289,"Overrides the CPU affinity mask for the service manager and the default for all child processes it forks. This takes precedence over `CPUAffinity=`, see [systemd-system.conf(5)](systemd-system.conf.html) for details.\n\nAdded in version 245."],
[4,290,"Load a specific kernel module early at boot. For details, see [systemd-modules-load.service(8)](systemd-modules-load.service.html).\n\nAdded in version 187."],
[4,291,"Configures DNS server information and search domains, see [systemd-resolved.service(8)](systemd-resolved.service.html) for details.\n\nAdded in version 253."],
[4,292,"Enables resume from hibernation using the specified device and mount options. All [fstab(5)](https://man7.org/linux/man-pages/man5/fstab.5.html)\\-like paths are supported. For details, see [systemd-hibernate-resume-generator(8)](systemd-hibernate-resume-generator.html).\n\nAdded in version 217."],
[4,293,"Takes a boolean argument, defaults to on. If off, [systemd-firstboot.service(8)](systemd-firstboot.service.html) will not query the user for basic system settings, even if the system boots up for the first time and the relevant settings are not initialized yet. Not to be confused with `systemd.condition-first-boot=` (see below), which overrides the result of the `ConditionFirstBoot=` unit file condition, and thus controls more than just `systemd-firstboot.service` behaviour.\n\nAdded in version 233."],
[4,294,"Takes a boolean argument. If specified, overrides the result of `ConditionNeedsUpdate=` unit condition checks. See [systemd.unit(5)](systemd.unit.html) for details.\n\nAdded in version 246."],
[4,295,"Takes a boolean argument. If specified, overrides the result of `ConditionFirstBoot=` unit condition checks. See [systemd.unit(5)](systemd.unit.html) for details. Not to be confused with `systemd.firstboot=` which only controls behaviour of the `systemd-firstboot.service` system service but has no effect on the condition check (see above).\n\nAdded in version 246."],
[4,296,"Takes a decimal, numeric timestamp in Î¼s since January 1st 1970, 00:00am, to set the system clock to. The system time is set to the specified timestamp early during boot. It is not propagated to the hardware clock (RTC).\n\nAdded in version 246."],
[4,297,"Takes a base64 encoded random seed value to credit with full entropy to the kernel's random pool during early service manager initialization. This option is useful in testing environments where delays due to random pool initialization in entropy starved virtual machines shall be avoided.\n\nNote that if this option is used the seed is accessible to unprivileged programs from `/proc/cmdline`. This option is hence a security risk when used outside of test systems, since the (possibly) only seed used for initialization of the kernel's entropy pool might be easily acquired by unprivileged programs.\n\nIt is recommended to pass 512 bytes of randomized data (as that matches the Linux kernel pool size), which may be generated with a command like the following:\n\ndd if=/dev/urandom bs=512 count=1 status=none | base64 -w 0\n\nAgain: do not use this option outside of testing environments, it's a security risk elsewhere, as secret key material derived from the entropy pool can possibly be reconstructed by unprivileged programs.\n\nAdded in version 246."],
[4,298,"Accepts a hostname to set during early boot. If specified takes precedence over what is set in `/etc/hostname`. Note that this does not bar later runtime changes to the hostname, it simply controls the initial hostname set during early boot.\n\nAdded in version 246."],
[4,299,"These arguments allow configuring default values for `$TERM`, `TTYRows=`, and `TTYColumns=` for tty _`tty`_. Additionally, `systemd.tty.term.console` will configure the `$TERM` value used by **systemd** if not set explicitly using `TERM` on the kernel command line. The tty name should be specified without the `/dev/` prefix (e.g. \"`systemd.tty.rows.ttyS0=80`\").\n\nAdded in version 254."],
[2,"domain","",291,14,null],
[2,"fsck.mode","",269,14,null],
[2,"fsck.repair","",269,14,null],
[2,"fstab","",276,14,null],
[2,"locale.LANG","",268,14,null],
[2,"locale.LANGUAGE","",268,14,null],
[2,"locale.LC_ADDRESS","",268,14,null],
[2,"locale.LC_COLLATE","",268,14,null],
[2,"locale.LC_CTYPE","",268,14,null],
[2,"locale.LC_IDENTIFICATION","",268,14,null],
[2,"locale.LC_MEASUREMENT","",268,14,null],
[2,"locale.LC_MESSAGES","",268,14,null],
[2,"locale.LC_MONETARY","",268,14,null],
[2,"locale.LC_NAME","",268,14,null],
[2,"locale.LC_NUMERIC","",268,14,null],
[2,"locale.LC_PAPER","",268,14,null],
[2,"locale.LC_TELEPHONE","",268,14,null],
[2,"locale.LC_TIME","",268,14,null],
[2,"luks","",275,14,null],
[2,"luks.crypttab","",275,14,null],
[2,"luks.key","",275,14,null],
[2,"luks.name","",275,14,null],
[2,"luks.options","",275,14,null],
[2,"luks.uuid","",275,14,null],
[2,"modules_load","",290,14,null],
[2,"mount.usr","",278,14,null],
[2,"mount.usrflags","",278,14,null],
[2,"mount.usrfstype","",278,14,null],
[2,"nameserver","",291,14,null],
[2,"net.ifnames","",273,14,null],
[2,"net.naming-scheme","",273,14,null],
[2,"plymouth.enable","",274,14,null],
[2,"quotacheck.mode","",270,14,null],
[2,"rd.fstab","",276,14,null],
[2,"rd.luks","",275,14,null],
[2,"rd.luks.crypttab","",275,14,null],
[2,"rd.luks.key","",275,14,null],
[2,"rd.luks.name","",275,14,null],
[2,"rd.luks.options","",275,14,null],
[2,"rd.luks.uuid","",275,14,null],
[2,"rd.modules_load","",290,14,null],
[2,"rd.systemd.gpt_auto","",281,14,null],
[2,"rd.systemd.image_policy","",282,14,null],
[2,"rd.systemd.unit","",262,14,null],
[2,"rd.systemd.verity","",279,14,null],
[2,"rd.udev.children_max","",273,14,null],
[2,"rd.udev.event_timeout","",273,14,null],
[2,"rd.udev.exec_delay","",273,14,null],
[2,"rd.udev.log_level","",273,14,null],
[2,"rd.udev.timeout_signal","",273,14,null],
[2,"rd.veritytab","",279,14,null],
[2,"resume","",292,14,null],
[2,"resumeflags","",292,14,null],
[2,"root","",277,14,null],
[2,"rootflags","",277,14,null],
[2,"rootfstype","",277,14,null],
[2,"roothash","",279,14,null],
[2,"systemd.clock-usec","",296,14,null],
[2,"systemd.condition-first-boot","",295,14,null],
[2,"systemd.condition-needs-update","",294,14,null],
[2,"systemd.cpu_affinity","",289,14,null],
[2,"systemd.default_device_timeout_sec","",284,14,null],
[2,"systemd.default_standard_error","",262,14,null],
[2,"systemd.default_standard_output","",262,14,null],
[2,"systemd.default_timeout_start_sec","",283,14,null],
[2,"systemd.early_core_pattern","",265,14,null],
[2,"systemd.firstboot","",293,14,null],
[2,"systemd.getty_auto","",280,14,null],
[2,"systemd.gpt_auto","",281,14,null],
[2,"systemd.hostname","",298,14,null],
[2,"systemd.image_policy","",282,14,null],
[2,"systemd.import_credentials","",262,14,null],
[2,"systemd.journald.forward_to_console","",271,14,null],
[2,"systemd.journald.forward_to_kmsg","",271,14,null],
[2,"systemd.journald.forward_to_syslog","",271,14,null],
[2,"systemd.journald.forward_to_wall","",271,14,null],
[2,"systemd.log_level","",262,14,null],
[2,"systemd.log_location","",262,14,null],
[2,"systemd.log_target","",262,14,null],
[2,"systemd.machine_id","",262,14,null],
[2,"systemd.mask","",263,14,null],
[2,"systemd.random-seed","",297,14,null],
[2,"systemd.reload_limit_burst","",262,14,null],
[2,"systemd.reload_limit_interval_sec","",262,14,null],
[2,"systemd.restore_state","",266,14,null],
[2,"systemd.run","",264,14,null],
[2,"systemd.run_failure_action","",264,14,null],
[2,"systemd.run_success_action","",264,14,null],
[2,"systemd.set_credential","",262,14,null],
[2,"systemd.set_credential_binary","",262,14,null],
[2,"systemd.setenv","",262,14,null],
[2,"systemd.status_unit_format","",262,14,null],
[2,"systemd.tty.columns.tty","",299,14,null],
[2,"systemd.tty.rows.tty","",299,14,null],
[2,"systemd.tty.term.tty","",299,14,null],
[2,"systemd.unit","",262,14,null],
[2,"systemd.verity","",279,14,null],
[2,"systemd.verity.root_options","",279,14,null],
[2,"systemd.verity_root_data","",279,14,null],
[2,"systemd.verity_root_hash","",279,14,null],
[2,"systemd.verity_usr_data","",279,14,null],
[2,"systemd.verity_usr_hash","",279,14,null],
[2,"systemd.verity_usr_options","",279,14,null],
[2,"systemd.volatile","",267,14,null],
[2,"systemd.wants","",263,14,null],
[2,"systemd.watchdog_device","",285,14,null],
[2,"systemd.watchdog_pre_sec","",287,14,null],
[2,"systemd.watchdog_pretimeout_governor","",288,14,null],
[2,"systemd.watchdog_sec","",286,14,null],
[2,"udev.children_max","",273,14,null],
[2,"udev.event_timeout","",273,14,null],
[2,"udev.exec_delay","",273,14,null],
[2,"udev.log_level","",273,14,null],
[2,"udev.timeout_signal","",273,14,null],
[2,"usrhash","",279,14,null],
[2,"vconsole.font","",272,14,null],
[2,"vconsole.font_map","",272,14,null],
[2,"vconsole.font_unimap","",272,14,null],
[2,"vconsole.keymap","",272,14,null],
[2,"vconsole.keymap_toggle","",272,14,null],
[2,"veritytab","",279,14,null],
[3,15,"systemd-resolved.service(8)","systemd-resolved.service, systemd-resolved â€” Network Name Resolution manager","systemd-resolved.service.html"],
[4,300,"Takes the IP address of a DNS server (in case of `nameserver=`), and a DNS search domain (in case of `domain=`). May be used multiple times, to define multiple DNS servers/search domains. If either of these options are specified `/etc/resolv.conf` will not be read and the `DNS=` and `Domains=` settings of [resolved.conf(5)](resolved.conf.html) will be ignored. These two kernel command line options hence override system configuration.\n\nAdded in version 253."],
[2,"domain","",300,15,null],
[2,"nameserver","",300,15,null],
[3,16,"systemd-fsck@.service(8)","systemd-fsck@.service, systemd-fsck-root.service, systemd-fsck-usr.service, systemd-fsck â€” File system checker logic","systemd-fsck@.service.html"],
[4,301,"One of \"`auto`\", \"`force`\", \"`skip`\". Controls the mode of operation. The default is \"`auto`\", and ensures that file system checks are done when the file system checker deems them necessary. \"`force`\" unconditionally results in full file system checks. \"`skip`\" skips any file system checks.\n\nAdded in version 186."],
[4,302,"One of \"`preen`\", \"`yes`\", \"`no`\". Controls the mode of operation. The default is \"`preen`\", and will automatically repair problems that can be safely fixed. \"`yes`\" will answer yes to all questions by fsck and \"`no`\" will answer no to all questions.\n\nAdded in version 213."],
[2,"fsck.mode","",301,16,null],
[2,"fsck.repair","",302,16,null],
[3,17,"systemd-fstab-generator(8)","systemd-fstab-generator â€” Unit generator for /etc/fstab","systemd-fstab-generator.html"],
[4,303,"Takes a boolean argument. Defaults to \"`yes`\". If \"`no`\", causes the generator to ignore any mounts or swap devices configured in `/etc/fstab`. `rd.fstab=` is honored only in the initrd, while `fstab=` is honored by both the main system and the initrd.\n\nAdded in version 186."],
[4,304,"Configures the operating system's root filesystem to mount when running in the initrd. This accepts a device node path (usually `/dev/disk/by-uuid/â€¦` or `/dev/disk/by-label/â€¦` or similar), or the special values \"`gpt-auto`\", \"`fstab`\", and \"`tmpfs`\".\n\nUse \"`gpt-auto`\" to explicitly request automatic root file system discovery via [systemd-gpt-auto-generator(8)](systemd-gpt-auto-generator.html).\n\nUse \"`fstab`\" to explicitly request automatic root file system discovery via the initrd `/etc/fstab` rather than via kernel command line.\n\nUse \"`tmpfs`\" in order to mount a [tmpfs(5)](https://man7.org/linux/man-pages/man5/tmpfs.5.html) file system as root file system of the OS. This is useful in combination with `mount.usr=` (see below) in order to combine a volatile root file system with a separate, immutable `/usr/` file system. Also see `systemd.volatile=` below.\n\nAdded in version 217."],
[4,305,"Takes the root filesystem type that will be passed to the mount command. `rootfstype=` is honored by the initrd.\n\nAdded in version 217."],
[4,306,"Takes the root filesystem mount options to use. `rootflags=` is honored by the initrd.\n\nNote that unlike most kernel command line options this setting does not override settings made in configuration files (specifically: the mount option string in `/etc/fstab`). See [systemd-remount-fs.service(8)](systemd-remount-fs.service.html).\n\nAdded in version 217."],
[4,307,"Takes the `/usr/` filesystem to be mounted by the initrd. If `mount.usrfstype=` or `mount.usrflags=` is set, then `mount.usr=` will default to the value set in `root=`.\n\nOtherwise, this parameter defaults to the `/usr/` entry found in `/etc/fstab` on the root filesystem.\n\n`mount.usr=` is honored by the initrd.\n\nAdded in version 217."],
[4,308,"Takes the `/usr/` filesystem type that will be passed to the mount command. If `mount.usr=` or `mount.usrflags=` is set, then `mount.usrfstype=` will default to the value set in `rootfstype=`.\n\nOtherwise, this value will be read from the `/usr/` entry in `/etc/fstab` on the root filesystem.\n\n`mount.usrfstype=` is honored by the initrd.\n\nAdded in version 217."],
[4,309,"Takes the `/usr/` filesystem mount options to use. If `mount.usr=` or `mount.usrfstype=` is set, then `mount.usrflags=` will default to the value set in `rootflags=`.\n\nOtherwise, this value will be read from the `/usr/` entry in `/etc/fstab` on the root filesystem.\n\n`mount.usrflags=` is honored by the initrd.\n\nAdded in version 217."],
[4,310,"These options are primarily read by [systemd-veritysetup-generator(8)](systemd-veritysetup-generator.html). When set this indicates that the root file system (or `/usr/`) shall be mounted from Verity volumes with the specified hashes. If these kernel command line options are set the root (or `/usr/`) file system is thus mounted from a device mapper volume `/dev/mapper/root` (or `/dev/mapper/usr`).\n\nAdded in version 251."],
[4,311,"Controls whether the system shall boot up in volatile mode. Takes a boolean argument or the special value `state`.\n\nIf false (the default), this generator makes no changes to the mount tree and the system is booted up in normal mode.\n\nIf true the generator ensures [systemd-volatile-root.service(8)](systemd-volatile-root.service.html) is run in the initrd. This service changes the mount table before transitioning to the host system, so that a volatile memory file system (\"`tmpfs`\") is used as root directory, with only `/usr/` mounted into it from the configured root file system, in read-only mode. This way the system operates in fully stateless mode, with all configuration and state reset at boot and lost at shutdown, as `/etc/` and `/var/` will be served from the (initially unpopulated) volatile memory file system.\n\nIf set to `state` the generator will leave the root directory mount point unaltered, however will mount a \"`tmpfs`\" file system to `/var/`. In this mode the normal system configuration (i.e. the contents of \"`/etc/`\") is in effect (and may be modified during system runtime), however the system state (i.e. the contents of \"`/var/`\") is reset at boot and lost at shutdown.\n\nIf this setting is set to \"`overlay`\" the root file system is set up as \"`overlayfs`\" mount combining the read-only root directory with a writable \"`tmpfs`\", so that no modifications are made to disk, but the file system may be modified nonetheless with all changes being lost at reboot.\n\nNote that in none of these modes the root directory, `/etc/`, `/var/` or any other resources stored in the root file system are physically removed. It's thus safe to boot a system that is normally operated in non-volatile mode temporarily into volatile mode, without losing data.\n\nNote that with the exception of \"`overlay`\" mode, enabling this setting will only work correctly on operating systems that can boot up with only `/usr/` mounted, and are able to automatically populate `/etc/`, and also `/var/` in case of \"`systemd.volatile=yes`\".\n\nAlso see `root=tmpfs` above, for a method to combine a \"`tmpfs`\" file system with a regular `/usr/` file system (as configured via `mount.usr=`). The main distinction between `systemd.volatile=yes`, and `root=tmpfs` in combination `mount.usr=` is that the former operates on top of a regular root file system and temporarily obstructs the files and directories above its `/usr/` subdirectory, while the latter does not hide any files, but simply mounts a unpopulated tmpfs as root file system and combines it with a user picked `/usr/` file system.\n\nAdded in version 233."],
[4,312,"Takes a boolean argument or enables the option if specified without an argument. If disabled, causes the generator to ignore any swap devices configured in `/etc/fstab`. Defaults to enabled.\n\nAdded in version 246."],
[4,313,"Specifies the mount unit. Takes at least two and at most four fields separated with a colon (\"`:`\"). Each field is handled as the corresponding fstab field. This option can be specified multiple times. `rd.systemd.mount-extra=` is honored only in the initrd, while `systemd.mount-extra=` is honored by both the main system and the initrd. In the initrd, the mount point (and also source path if the mount is bind mount) specified in `systemd.mount-extra=` is prefixed with `/sysroot/`.\n\nExample:\n\nsystemd.mount-extra=/dev/sda1:/mount-point:ext4:rw,noatime\n\nAdded in version 254."],
[4,314,"Specifies the swap unit. Takes the block device to be used as a swap device, and optionally takes mount options followed by a colon (\"`:`\"). This option can be specified multiple times. `rd.systemd.swap-extra=` is honored only in the initrd, while `systemd.swap-extra=` is honored by both the main system and the initrd.\n\nExample:\n\nsystemd.swap-extra=/dev/sda2:x-systemd.makefs\n\nAdded in version 254."],
[2,"fstab","",303,17,null],
[2,"mount.usr","",307,17,null],
[2,"mount.usrflags","",309,17,null],
[2,"mount.usrfstype","",308,17,null],
[2,"rd.fstab","",303,17,null],
[2,"rd.systemd.mount-extra","WHAT:WHERE[:FSTYPE[:OPTIONS]]",313,17,null],
[2,"rd.systemd.swap-extra","WHAT[:OPTIONS]",314,17,null],
[2,"root","",304,17,null],
[2,"rootflags","",306,17,null],
[2,"rootfstype","",305,17,null],
[2,"roothash","",310,17,null],
[2,"systemd.mount-extra","WHAT:WHERE[:FSTYPE[:OPTIONS]]",313,17,null],
[2,"systemd.swap","",312,17,null],
[2,"systemd.swap-extra","WHAT[:OPTIONS]",314,17,null],
[2,"systemd.volatile","",311,17,null],
[2,"usrhash","",310,17,null],
[3,18,"systemd(1)","systemd, init â€” systemd system and service manager","systemd.html"],
[4,315,"Overrides the unit to activate on boot. Defaults to `default.target`. This may be used to temporarily boot into a different boot unit, for example `rescue.target` or `emergency.service`. See [systemd.special(7)](systemd.special.html) for details about these units. The option prefixed with \"`rd.`\" is honored only in the initrd, while the one that is not prefixed only in the main system."],
[4,316,"Takes a boolean argument. If disabled, all service runtime watchdogs (`WatchdogSec=`) and emergency actions (e.g. `OnFailure=` or `StartLimitAction=`) are ignored by the system manager (PID 1); see [systemd.service(5)](systemd.service.html). Defaults to enabled, i.e. watchdogs and failure actions are processed normally. The hardware watchdog is not affected by this option.\n\nAdded in version 237."],
[4,317,"Takes `name`, `description` or `combined` as the value. If `name`, the system manager will use unit names in status messages. If `combined`, the system manager will use unit names and description in status messages. When specified, overrides the system manager configuration file option `StatusUnitFormat=`, see [systemd-system.conf(5)](systemd-system.conf.html).\n\nAdded in version 243."],
[4,318,"Controls log output, with the same effect as the `$SYSTEMD_LOG_COLOR`, `$SYSTEMD_LOG_LEVEL`, `$SYSTEMD_LOG_LOCATION`, `$SYSTEMD_LOG_TARGET`, `$SYSTEMD_LOG_TIME`, `$SYSTEMD_LOG_TID` and `$SYSTEMD_LOG_RATELIMIT_KMSG` environment variables described above. `systemd.log_color`, `systemd.log_location`, `systemd.log_time`, `systemd.log_tid` and `systemd.log_ratelimit_kmsg` can be specified without an argument, with the same effect as a positive boolean."],
[4,319,"Controls default standard output and error output for services and sockets. That is, controls the default for `StandardOutput=` and `StandardError=` (see [systemd.exec(5)](systemd.exec.html) for details). Takes one of `inherit`, `null`, `tty`, `journal`, `journal+console`, `kmsg`, `kmsg+console`. If the argument is omitted `systemd.default-standard-output=` defaults to `journal` and `systemd.default-standard-error=` to `inherit`."],
[4,320,"Takes a string argument in the form VARIABLE=VALUE. May be used to set default environment variables to add to forked child processes. May be used more than once to set multiple variables."],
[4,321,"Takes a 32 character hex value to be used for setting the machine-id. Intended mostly for network booting where the same machine-id is desired for every boot.\n\nAdded in version 229."],
[4,322,"Sets a system credential, which can then be propagated to system services using the `ImportCredential=` or `LoadCredential=` setting, see [systemd.exec(5)](systemd.exec.html) for details. Takes a pair of credential name and value, separated by a colon. The `systemd.set_credential=` parameter expects the credential value in literal text form, the `systemd.set_credential_binary=` parameter takes binary data encoded in Base64. Note that the kernel command line is typically accessible by unprivileged programs in `/proc/cmdline`. Thus, this mechanism is not suitable for transferring sensitive data. Use it only for data that is not sensitive (e.g. public keys/certificates, rather than private keys), or in testing/debugging environments.\n\nFor further information see [System and Service Credentials](https://systemd.io/CREDENTIALS) documentation.\n\nAdded in version 251."],
[4,323,"Takes a boolean argument. If false disables importing credentials from the kernel command line, the DMI/SMBIOS OEM string table, the qemu\\_fw\\_cfg subsystem or the EFI kernel stub.\n\nAdded in version 251."],
[4,324,"Set the system locale to use. This overrides the settings in `/etc/locale.conf`. For more information, see [locale.conf(5)](https://man7.org/linux/man-pages/man5/locale.conf.5.html) and [locale(7)](https://man7.org/linux/man-pages/man7/locale.7.html).\n\nAdded in version 186."],
[2,"locale.LANG","",324,18,null],
[2,"locale.LANGUAGE","",324,18,null],
[2,"locale.LC_ADDRESS","",324,18,null],
[2,"locale.LC_COLLATE","",324,18,null],
[2,"locale.LC_CTYPE","",324,18,null],
[2,"locale.LC_IDENTIFICATION","",324,18,null],
[2,"locale.LC_MEASUREMENT","",324,18,null],
[2,"locale.LC_MESSAGES","",324,18,null],
[2,"locale.LC_MONETARY","",324,18,null],
[2,"locale.LC_NAME","",324,18,null],
[2,"locale.LC_NUMERIC","",324,18,null],
[2,"locale.LC_PAPER","",324,18,null],
[2,"locale.LC_TELEPHONE","",324,18,null],
[2,"locale.LC_TIME","",324,18,null],
[2,"rd.systemd.unit","",315,18,null],
[2,"systemd.default_standard_error","",319,18,null],
[2,"systemd.default_standard_output","",319,18,null],
[2,"systemd.import_credentials","",323,18,null],
[2,"systemd.log_level","",318,18,null],
[2,"systemd.log_target","",318,18,null],
[2,"systemd.machine_id","",321,18,null],
[2,"systemd.service_watchdogs","",316,18,null],
[2,"systemd.set_credential","",322,18,null],
[2,"systemd.set_credential_binary","",322,18,null],
[2,"systemd.setenv","",320,18,null],
[2,"systemd.status_unit_format","",317,18,null],
[2,"systemd.unit","",315,18,null],
[3,19,"systemd-cryptsetup-generator(8)","systemd-cryptsetup-generator â€” Unit generator for /etc/crypttab","systemd-cryptsetup-generator.html"],
[4,325,"Takes a boolean argument. Defaults to \"`yes`\". If \"`no`\", disables the generator entirely. `rd.luks=` is honored only in the initrd while `luks=` is honored by both the main system and in the initrd.\n\nAdded in version 186."],
[4,326,"Takes a boolean argument. Defaults to \"`yes`\". If \"`no`\", causes the generator to ignore any devices configured in `/etc/crypttab` (`luks.uuid=` will still work however). `rd.luks.crypttab=` is honored only in initrd while `luks.crypttab=` is honored by both the main system and in the initrd.\n\nAdded in version 186."],
[4,327,"Takes a LUKS superblock UUID as argument. This will activate the specified device as part of the boot process as if it was listed in `/etc/crypttab`. This option may be specified more than once in order to set up multiple devices. `rd.luks.uuid=` is honored only in the initrd, while `luks.uuid=` is honored by both the main system and in the initrd.\n\nIf `/etc/crypttab` contains entries with the same UUID, then the name, keyfile and options specified there will be used. Otherwise, the device will have the name \"`luks-UUID`\".\n\nIf `/etc/crypttab` exists, only those UUIDs specified on the kernel command line will be activated in the initrd or the real root.\n\nAdded in version 186."],
[4,328,"Takes a LUKS super block UUID followed by an \"`=`\" and a name. This implies `rd.luks.uuid=` or `luks.uuid=` and will additionally make the LUKS device given by the UUID appear under the provided name.\n\nThis parameter is the analogue of the first [crypttab(5)](crypttab.html) field _`volume-name`_.\n\n`rd.luks.name=` is honored only in the initrd, while `luks.name=` is honored by both the main system and in the initrd.\n\nAdded in version 218."],
[4,329,"Takes a LUKS super block UUID followed by a \"`=`\" and a block device specification for device hosting encrypted data.\n\nFor those entries specified with `rd.luks.uuid=` or `luks.uuid=`, the data device will be set to the one specified by `rd.luks.data=` or `luks.data=` of the corresponding UUID.\n\nLUKS data device parameter is useful for specifying encrypted data devices with detached headers specified in `luks.options` entry containing \"`header=`\" argument. For example, `rd.luks.uuid=`b40f1abf-2a53-400a-889a-2eccc27eaa40 `rd.luks.options=`b40f1abf-2a53-400a-889a-2eccc27eaa40=header=/path/to/luks.hdr `rd.luks.data=`b40f1abf-2a53-400a-889a-2eccc27eaa40=/dev/sdx. Hence, in this case, we will attempt to unlock LUKS device assembled from data device \"`/dev/sdx`\" and LUKS header (metadata) put in \"`/path/to/luks.hdr`\" file. This syntax is for now only supported on a per-device basis, i.e. you have to specify LUKS device UUID.\n\nThis parameter is the analogue of the second [crypttab(5)](crypttab.html) field _`encrypted-device`_.\n\n`rd.luks.data=` is honored only in the initrd, while `luks.data=` is honored by both the main system and in the initrd.\n\nAdded in version 247."],
[4,330,"Takes a password file name as argument or a LUKS super block UUID followed by a \"`=`\" and a password file name.\n\nFor those entries specified with `rd.luks.uuid=` or `luks.uuid=`, the password file will be set to the one specified by `rd.luks.key=` or `luks.key=` of the corresponding UUID, or the password file that was specified without a UUID.\n\nIt is also possible to specify an external device which should be mounted before we attempt to unlock the LUKS device. systemd-cryptsetup will use password file stored on that device. Device containing password file is specified by appending colon and a device identifier to the password file path. For example, `rd.luks.uuid=`b40f1abf-2a53-400a-889a-2eccc27eaa40 `rd.luks.key=`b40f1abf-2a53-400a-889a-2eccc27eaa40=/keyfile:LABEL=keydev. Hence, in this case, we will attempt to mount file system residing on the block device with label \"`keydev`\". This syntax is for now only supported on a per-device basis, i.e. you have to specify LUKS device UUID.\n\nThis parameter is the analogue of the third [crypttab(5)](crypttab.html) field _`key-file`_.\n\n`rd.luks.key=` is honored only in the initrd, while `luks.key=` is honored by both the main system and in the initrd.\n\nAdded in version 202."],
[4,331,"Takes a LUKS super block UUID followed by an \"`=`\" and a string of options separated by commas as argument. This will override the options for the given UUID.\n\nIf only a list of options, without a UUID, is specified, they apply to any UUIDs not specified elsewhere, and without an entry in `/etc/crypttab`.\n\nThis parameter is the analogue of the fourth [crypttab(5)](crypttab.html) field _`options`_.\n\nIt is possible to specify an external device which should be mounted before we attempt to unlock the LUKS device. systemd-cryptsetup will assemble LUKS device by combining data device specified in `luks.data` with detached LUKS header found in \"`header=`\" argument. For example, `rd.luks.uuid=`b40f1abf-2a53-400a-889a-2eccc27eaa40 `rd.luks.options=`b40f1abf-2a53-400a-889a-2eccc27eaa40=header=/luks.hdr:LABEL=hdrdev `rd.luks.data=`b40f1abf-2a53-400a-889a-2eccc27eaa40=/dev/sdx. Hence, in this case, we will attempt to mount file system residing on the block device with label \"`hdrdev`\", and look for \"`luks.hdr`\" on that file system. Said header will be used to unlock (decrypt) encrypted data stored on /dev/sdx. This syntax is for now only supported on a per-device basis, i.e. you have to specify LUKS device UUID.\n\n`rd.luks.options=` is honored only by initial RAM disk (initrd) while `luks.options=` is honored by both the main system and in the initrd.\n\nAdded in version 208."],
[2,"luks","",325,19,null],
[2,"luks.crypttab","",326,19,null],
[2,"luks.data","",329,19,null],
[2,"luks.key","",330,19,null],
[2,"luks.name","",328,19,null],
[2,"luks.options","",331,19,null],
[2,"luks.uuid","",327,19,null],
[2,"rd.luks","",325,19,null],
[2,"rd.luks.crypttab","",326,19,null],
[2,"rd.luks.data","",329,19,null],
[2,"rd.luks.key","",330,19,null],
[2,"rd.luks.name","",328,19,null],
[2,"rd.luks.options","",331,19,null],
[2,"rd.luks.uuid","",327,19,null],
[3,20,"systemd-modules-load.service(8)","systemd-modules-load.service, systemd-modules-load â€” Load kernel modules at boot","systemd-modules-load.service.html"],
[4,332,"Takes a comma-separated list of kernel modules to statically load during early boot. The option prefixed with \"`rd.`\" is read in the initrd only.\n\nAdded in version 187."],
[2,"modules_load","",332,20,null],
[2,"rd.modules_load","",332,20,null],
[3,21,"systemd-udevd.service(8)","systemd-udevd.service, systemd-udevd-control.socket, systemd-udevd-kernel.socket, systemd-udevd â€” Device event managing daemon","systemd-udevd.service.html"],
[4,333,"Set the log level.\n\nAdded in version 247."],
[4,334,"Limit the number of events executed in parallel.\n\nAdded in version 186."],
[4,335,"Delay the execution of each ``RUN{_`program`_}`` parameter by the given number of seconds. This option might be useful when debugging system crashes during coldplug caused by loading non-working kernel modules.\n\nAdded in version 186."],
[4,336,"Wait for events to finish up to the given number of seconds. This option might be useful if events are terminated due to kernel drivers taking too long to initialize.\n\nAdded in version 216."],
[4,337,"Specifies a signal that `systemd-udevd` will send to workers on timeout. Note that kernel command line option overrides both the setting in the configuration file and the one on the program command line.\n\nAdded in version 246."],
[4,338,"Network interfaces are renamed to give them predictable names when possible. It is enabled by default; specifying 0 disables it.\n\nAdded in version 199."],
[4,339,"Network interfaces are renamed to give them predictable names when possible (unless `net.ifnames=0` is specified, see above). With this kernel command line option it is possible to pick a specific version of this algorithm and override the default chosen at compilation time. Expects one of the naming scheme identifiers listed in [systemd.net-naming-scheme(7)](systemd.net-naming-scheme.html), or \"`latest`\" to select the latest scheme known (to this particular version of `systemd-udevd.service`).\n\nNote that selecting a specific scheme is not sufficient to fully stabilize interface naming: the naming is generally derived from driver attributes exposed by the kernel. As the kernel is updated, previously missing attributes `systemd-udevd.service` is checking might appear, which affects older name derivation algorithms, too.\n\nAdded in version 240."],
[4,340,"Specifies naming policies applied when renaming network interfaces. Takes a list of policies and an optional MAC address separated with comma. Each policy value must be one of the policies understood by the `NamePolicy=` setting in .link files, e.g. \"`onboard`\" or \"`path`\". See [systemd.link(5)](systemd.link.html) for more details. When the MAC address is specified, the policies are applied to the interface which has the address. When no MAC address is specified, the policies are applied to all interfaces. This kernel command line argument can be specified multiple times.\n\nThis argument is not directly read by **systemd-udevd**, but is instead converted to a .link file by [systemd-network-generator.service(8)](systemd-network-generator.service.html). For this argument to take effect, `systemd-network-generator.service` must be enabled.\n\nExample:\n\nnet.ifname-policy=keep,kernel,path,slot,onboard,01:23:45:67:89:ab\nnet.ifname-policy=keep,kernel,path,slot,onboard,mac\n\nThis is mostly equivalent to creating the following .link files:\n\n\\# 91-name-policy-with-mac.link\n\\[Match\\]\nMACAddress=01:23:45:67:89:ab\n\n\\[Link\\]\nNamePolicy=keep kernel path slot onboard\nAlternativeNamePolicy=path slot onboard\n\nand\n\n\\# 92-name-policy-for-all.link\n\\[Match\\]\nOriginalName=\\*\n\n\\[Link\\]\nNamePolicy=keep kernel path slot onboard mac\nAlternativeNamePolicy=path slot onboard mac\n\nAdded in version 250."],
[2,"net.ifname-policy","policy1[,policy2,â€¦][,MAC]",340,21,null],
[2,"net.ifnames","",338,21,null],
[2,"net.naming-scheme","",339,21,null],
[2,"rd.udev.children_max","",334,21,null],
[2,"rd.udev.event_timeout","",336,21,null],
[2,"rd.udev.exec_delay","",335,21,null],
[2,"rd.udev.log_level","",333,21,null],
[2,"rd.udev.timeout_signal","",337,21,null],
[2,"udev.children_max","",334,21,null],
[2,"udev.event_timeout","",336,21,null],
[2,"udev.exec_delay","",335,21,null],
[2,"udev.log_level","",333,21,null],
[2,"udev.timeout_signal","",337,21,null],
[3,22,"systemd-quotacheck.service(8)","systemd-quotacheck.service, systemd-quotacheck â€” File system quota checker logic","systemd-quotacheck.service.html"],
[4,341,"One of \"`auto`\", \"`force`\", \"`skip`\". Controls the mode of operation. The default is \"`auto`\", and ensures that file system quota checks are done when the file system quota checker deems them necessary. \"`force`\" unconditionally results in full file system quota checks. \"`skip`\" skips any file system quota checks.\n\nAdded in version 186."],
[2,"quotacheck.mode","",341,22,null],
[3,23,"systemd-gpt-auto-generator(8)","systemd-gpt-auto-generator â€” Generator for automatically discovering and mounting root, /home/, /srv/, /var/ and /var/tmp/ partitions, as well as discovering and enabling swap partitions, based on GPT partition type GUIDs","systemd-gpt-auto-generator.html"],
[4,342,"Takes an image dissection policy string as argument (as per [systemd.image-policy(7)](systemd.image-policy.html)), and allows enforcing a policy on dissection and use of the automatically discovered GPT partition table entries.\n\nAdded in version 254."],
[4,343,"When `root=` is used with the special value \"`gpt-auto`\" (or if the parameter is not used at all), automatic discovery of the root partition based on the GPT partition type is enabled. Any other value disables this logic.\n\nThe `rootfstype=` and `rootflags=` are used to select the file system type and options when the root file system is automatically discovered.\n\nAdded in version 242."],
[4,344,"Takes a boolean argument or enables the option if specified without an argument. If disabled, automatic discovery of swap partition(s) based on GPT partition type is disabled. Defaults to enabled.\n\nAdded in version 254."],
[2,"rd.systemd.image_policy","",342,23,null],
[2,"root","",343,23,null],
[2,"rootflags","",343,23,null],
[2,"rootfstype","",343,23,null],
[2,"systemd.image_policy","",342,23,null],
[2,"systemd.swap","",344,23,null],
[3,24,"systemd-veritysetup-generator(8)","systemd-veritysetup-generator â€” Unit generator for verity protected block devices","systemd-veritysetup-generator.html"],
[4,345,"Takes a boolean argument. Defaults to \"`yes`\". If \"`no`\", disables the generator entirely. `rd.systemd.verity=` is honored only by the initrd while `systemd.verity=` is honored by both the host system and the initrd.\n\nAdded in version 233."],
[4,346,"Takes a root hash value for the root file system. Expects a hash value formatted in hexadecimal characters of the appropriate length (i.e. most likely 256 bit/64 characters, or longer). If not specified via `systemd.verity_root_data=` and `systemd.verity_root_hash=`, the hash and data devices to use are automatically derived from the specified hash value. Specifically, the data partition device is looked for under a GPT partition UUID derived from the first 128-bit of the root hash, the hash partition device is looked for under a GPT partition UUID derived from the last 128-bit of the root hash. Hence it is usually sufficient to specify the root hash to boot from a verity protected root file system, as device paths are automatically determined from it â€” as long as the partition table is properly set up.\n\nAdded in version 233."],
[4,347,"These two settings take block device paths as arguments and may be used to explicitly configure the data partition and hash partition to use for setting up the verity protection for the root file system. If not specified, these paths are automatically derived from the `roothash=` argument (see above).\n\nAdded in version 233."],
[4,348,"Takes a comma-separated list of dm-verity options. Expects the following options ``superblock=_`BOOLEAN`_``, ``format=_`NUMBER`_``, ``data-block-size=_`BYTES`_``, ``hash-block-size=_`BYTES`_``, ``data-blocks=_`BLOCKS`_``, ``hash-offset=_`BYTES`_``, ``salt=_`HEX`_``, ``uuid=_`UUID`_``, `ignore-corruption`, `restart-on-corruption`, `ignore-zero-blocks`, `check-at-most-once`, `panic-on-corruption`, ``hash=_`HASH`_``, ``fec-device=_`PATH`_``, ``fec-offset=_`BYTES`_``, ``fec-roots=_`NUM`_`` and ``root-hash-signature=_`PATH`_|base64:_`HEX`_``. See [veritysetup(8)](http://linux.die.net/man/8/veritysetup) for more details.\n\nAdded in version 248."],
[4,349,"Equivalent to their counterparts for the root file system as described above, but apply to the `/usr/` file system instead.\n\nAdded in version 250."],
[2,"rd.systemd.verity","",345,24,null],
[2,"roothash","",346,24,null],
[2,"systemd.verity","",345,24,null],
[2,"systemd.verity_root_data","",347,24,null],
[2,"systemd.verity_root_hash","",347,24,null],
[2,"systemd.verity_root_options","",348,24,null],
[2,"systemd.verity_usr_data","",349,24,null],
[2,"systemd.verity_usr_hash","",349,24,null],
[2,"systemd.verity_usr_options","",349,24,null],
[2,"usrhash","",349,24,null],
[3,25,"systemd-hibernate-resume-generator(8)","systemd-hibernate-resume-generator â€” Unit generator for resume= kernel parameter","systemd-hibernate-resume-generator.html"],
[4,350,"Takes a path to the resume device. Both persistent block device paths like `/dev/disk/by-foo/bar` and [fstab(5)](https://man7.org/linux/man-pages/man5/fstab.5.html)\\-style specifiers like \"`FOO=bar`\" are supported.\n\nAdded in version 217."],
[4,351,"Takes the page offset of the swap space from the resume device. Defaults to \"`0`\".\n\nAdded in version 254."],
[4,352,"Takes the resume device mount options to use. Defaults `rootflags=` if not specified.\n\nAdded in version 243."],
[2,"resume","",350,25,null],
[2,"resume_offset","",351,25,null],
[2,"resumeflags","",352,25,null],
[3,26,"systemd-battery-check.service(8)","systemd-battery-check.service, systemd-battery-check â€” Check battery level whether there's enough charge, and power off if not","systemd-battery-check.service.html"],
[4,353,"Takes a boolean. If specified with false, **systemd-battery-check** command will return immediately with exit status 0 without checking battery capacity and AC power existence, and the service `systemd-battery-check.service` will succeed. This may be useful when the command wrongly detects and reports battery capacity percentage or AC power existence, or when you want to boot the system forcibly.\n\nAdded in version 254."],
[2,"systemd.battery-check","BOOL",353,26,null],
[3,27,"systemd-firstboot(1)","systemd-firstboot, systemd-firstboot.service â€” Initialize basic system settings on or before the first boot-up of a system","systemd-firstboot.html"],
[4,354,"Takes a boolean argument, defaults to on. If off, `systemd-firstboot.service` won't interactively query the user for basic settings at first boot, even if those settings are not initialized yet.\n\nAdded in version 233."],
[2,"systemd.firstboot","",354,27,null],
[3,28,"systemd-getty-generator(8)","systemd-getty-generator â€” Generator for enabling getty instances on the console","systemd-getty-generator.html"],
[4,355,"this options take an optional boolean argument, and default to yes. The generator is enabled by default, and a false value may be used to disable it.\n\nAdded in version 250."],
[2,"systemd.getty_auto","",355,28,null],
[3,29,"systemd-journald.service(8)","systemd-journald.service, systemd-journald.socket, systemd-journald-dev-log.socket, systemd-journald-audit.socket, systemd-journald@.service, systemd-journald@.socket, systemd-journald-varlink@.socket, systemd-journald â€” Journal service","systemd-journald.service.html"],
[4,356,"Enables/disables forwarding of collected log messages to syslog, the kernel log buffer, the system console or wall.\n\nSee [journald.conf(5)](journald.conf.html) for information about these settings.\n\nAdded in version 186."],
[2,"systemd.journald.forward_to_console","",356,29,null],
[2,"systemd.journald.forward_to_kmsg","",356,29,null],
[2,"systemd.journald.forward_to_syslog","",356,29,null],
[2,"systemd.journald.forward_to_wall","",356,29,null],
[3,30,"systemd-backlight@.service(8)","systemd-backlight@.service, systemd-backlight â€” Load and save the display backlight brightness at boot and shutdown","systemd-backlight@.service.html"],
[4,357,"Takes a boolean argument. Defaults to \"`1`\". If \"`0`\", does not restore the backlight settings on boot. However, settings will still be stored on shutdown.\n\nAdded in version 209."],
[2,"systemd.restore_state","",357,30,null],
[3,31,"systemd-rfkill.service(8)","systemd-rfkill.service, systemd-rfkill.socket, systemd-rfkill â€” Load and save the RF kill switch state at boot and change","systemd-rfkill.service.html"],
[4,358,"Takes a boolean argument. Defaults to \"`1`\". If \"`0`\", does not restore the rfkill settings on boot. However, settings will still be stored on shutdown.\n\nAdded in version 227."],
[2,"systemd.restore_state","",358,31,null],
[3,32,"vconsole.conf(5)","vconsole.conf â€” Configuration file for the virtual console","vconsole.conf.html"],
[4,359,"Overrides `KEYMAP=` and `KEYMAP_TOGGLE=`.\n\nAdded in version 232."],
[4,360,"Overrides `FONT=`, `FONT_MAP=`, and `FONT_UNIMAP=`.\n\nAdded in version 232."],
[2,"vconsole.font","",360,32,null],
[2,"vconsole.font_map","",360,32,null],
[2,"vconsole.font_unimap","",360,32,null],
[2,"vconsole.keymap","",359,32,null],
[2,"vconsole.keymap_toggle","",359,32,null],
[3,33,"homed.conf(5)","homed.conf, homed.conf.d â€” Home area/user account manager configuration files","homed.conf.html"],
[6,5,"Home"],
[4,361,"The default storage to use for home areas. Takes one of \"`luks`\", \"`fscrypt`\", \"`directory`\", \"`subvolume`\", \"`cifs`\". For details about these options, see [homectl(1)](homectl.html). If not configured or assigned the empty string, the default storage is automatically determined: if not running in a container environment and `/home/` is not itself encrypted, defaults to \"`luks`\". Otherwise defaults to \"`subvolume`\" if `/home/` is on a btrfs file system, and \"`directory`\" otherwise. Note that the storage selected on the **homectl** command line always takes precedence.\n\nAdded in version 246."],
[4,362,"When using \"`luks`\" as storage (see above), selects the default file system to use inside the user's LUKS volume. Takes one of \"`btrfs`\", \"`ext4`\" or \"`xfs`\". If not specified defaults to \"`btrfs`\". This setting has no effect if a different storage mechanism is used. The file system type selected on the **homectl** command line always takes precedence.\n\nAdded in version 246."],
[2,"DefaultFileSystemType","",362,33,5],
[2,"DefaultStorage","",361,33,5],
[3,34,"systemd.device(5)","systemd.device â€” Device unit configuration","systemd.device.html"],
[4,363,"Adds dependencies of type `Wants=` from the device unit to the specified units. `SYSTEMD_WANTS=` is read by the system service manager, `SYSTEMD_USER_WANTS=` by user service manager instances. These properties may be used to activate arbitrary units when a specific device becomes available.\n\nNote that this and the other udev device properties are not taken into account unless the device is tagged with the \"`systemd`\" tag in the udev database, because otherwise the device is not exposed as a systemd unit (see above).\n\nNote that systemd will only act on `Wants=` dependencies when a device first becomes active. It will not act on them if they are added to devices that are already active. Use `SYSTEMD_READY=` (see below) to configure when a udev device shall be considered active, and thus when to trigger the dependencies.\n\nThe specified property value should be a space-separated list of valid unit names. If a unit template name is specified (that is, a unit name containing an \"`@`\" character indicating a unit name to use for multiple instantiation, but with an empty instance name following the \"`@`\"), it will be automatically instantiated by the device's \"`sysfs`\" path (that is: the path is escaped and inserted as instance name into the template unit name). This is useful in order to instantiate a specific template unit once for each device that appears and matches specific properties."],
[4,364,"Adds an additional alias name to the device unit. This must be an absolute path that is automatically transformed into a unit name. (See above.)"],
[4,365,"If set to 0, systemd will consider this device unplugged even if it shows up in the udev tree. If this property is unset or set to 1, the device will be considered plugged if it is visible in the udev tree.\n\nThis option is useful for devices that initially show up in an uninitialized state in the tree, and for which a \"`changed`\" event is generated the moment they are fully set up. Note that `SYSTEMD_WANTS=` (see above) is not acted on as long as `SYSTEMD_READY=0` is set for a device."],
[4,366,"If set, this property is used as description string for the device unit."],
[2,"ID_MODEL","",366,34,null],
[2,"ID_MODEL_FROM_DATABASE","",366,34,null],
[2,"SYSTEMD_ALIAS","",364,34,null],
[2,"SYSTEMD_READY","",365,34,null],
[2,"SYSTEMD_USER_WANTS","",363,34,null],
[2,"SYSTEMD_WANTS","",363,34,null],
[3,35,"systemd-mount(1)","systemd-mount, systemd-umount â€” Establish and destroy transient mount or auto-mount points","systemd-mount.html"],
[4,367,"The mount options to use, if `--options=` is not used.\n\nAdded in version 232."],
[4,368,"The file system path to place the mount point at, instead of the automatically generated one.\n\nAdded in version 232."],
[2,"SYSTEMD_MOUNT_OPTIONS","",367,35,null],
[2,"SYSTEMD_MOUNT_WHERE","",368,35,null],
[3,40,"resolved.conf(5)","resolved.conf, resolved.conf.d â€” Network Name Resolution configuration files","resolved.conf.html"],
[6,6,"Resolve"],
[4,369,"A space-separated list of IPv4 and IPv6 addresses to use as system DNS servers. Each address can optionally take a port number separated with \"`:`\", a network interface name or index separated with \"`%`\", and a Server Name Indication (SNI) separated with \"`#`\". When IPv6 address is specified with a port number, then the address must be in the square brackets. That is, the acceptable full formats are \"`111.222.333.444:9953%ifname#example.com`\" for IPv4 and \"`[1111:2222::3333]:9953%ifname#example.com`\" for IPv6. DNS requests are sent to one of the listed DNS servers in parallel to suitable per-link DNS servers acquired from [systemd-networkd.service(8)](systemd-networkd.service.html) or set at runtime by external applications. For compatibility reasons, if this setting is not specified, the DNS servers listed in `/etc/resolv.conf` are used instead, if that file exists and any servers are configured in it. This setting defaults to the empty list.\n\nAdded in version 213."],
[4,370,"A space-separated list of IPv4 and IPv6 addresses to use as the fallback DNS servers. Please see `DNS=` for acceptable format of addresses. Any per-link DNS servers obtained from [systemd-networkd.service(8)](systemd-networkd.service.html) take precedence over this setting, as do any servers set via `DNS=` above or `/etc/resolv.conf`. This setting is hence only used if no other DNS server information is known. If this option is not given, a compiled-in list of DNS servers is used instead.\n\nAdded in version 216."],
[4,371,"A space-separated list of domains, optionally prefixed with \"`~`\", used for two distinct purposes described below. Defaults to the empty list.\n\nAny domains _not_ prefixed with \"`~`\" are used as search suffixes when resolving single-label hostnames (domain names which contain no dot), in order to qualify them into fully-qualified domain names (FQDNs). These \"search domains\" are strictly processed in the order they are specified in, until the name with the suffix appended is found. For compatibility reasons, if this setting is not specified, the search domains listed in `/etc/resolv.conf` with the `search` keyword are used instead, if that file exists and any domains are configured in it.\n\nThe domains prefixed with \"`~`\" are called \"route-only domains\". All domains listed here (_both search domains and route-only domains_ after removing the \"`~`\" prefix) define a search path that preferably directs DNS queries to this interface. This search path has an effect only when suitable per-link DNS servers are known. Such servers may be defined through the `DNS=` setting (see above) and dynamically at run time, for example from DHCP leases. If no per-link DNS servers are known, route-only domains have no effect.\n\nUse the construct \"`~.`\" (which is composed from \"`~`\" to indicate a route-only domain and \"`.`\" to indicate the DNS root domain that is the implied suffix of all DNS domains) to use the DNS servers defined for this link preferably for all domains.\n\nSee \"Protocols and Routing\" in [systemd-resolved.service(8)](systemd-resolved.service.html) for details of how search and route-only domains are used.\n\nNote that configuring the MulticastDNS domain \"`local`\" as search or routing domain has the effect of routing lookups for this domain to classic unicast DNS. This may be used to provide compatibility with legacy installations that use this domain in a unicast DNS context, against the IANA assignment of this domain to pure MulticastDNS purposes. Search and routing domains are a unicast DNS concept, they _cannot_ be used to resolve single-label lookups via MulticastDNS.\n\nAdded in version 229."],
[4,372,"Takes a boolean argument or \"`resolve`\". Controls Link-Local Multicast Name Resolution support ([RFC 4795](https://tools.ietf.org/html/rfc4795)) on the local host. If true, enables full LLMNR responder and resolver support. If false, disables both. If set to \"`resolve`\", only resolution support is enabled, but responding is disabled. Note that [systemd-networkd.service(8)](systemd-networkd.service.html) also maintains per-link LLMNR settings. LLMNR will be enabled on a link only if the per-link and the global setting is on.\n\nAdded in version 216."],
[4,373,"Takes a boolean argument or \"`resolve`\". Controls Multicast DNS support ([RFC 6762](https://tools.ietf.org/html/rfc6762)) on the local host. If true, enables full Multicast DNS responder and resolver support. If false, disables both. If set to \"`resolve`\", only resolution support is enabled, but responding is disabled. Note that [systemd-networkd.service(8)](systemd-networkd.service.html) also maintains per-link Multicast DNS settings. Multicast DNS will be enabled on a link only if the per-link and the global setting is on.\n\nAdded in version 234."],
[4,374,"Takes a boolean argument or \"`allow-downgrade`\".\n\nIf set to true, all DNS lookups are DNSSEC-validated locally (excluding LLMNR and Multicast DNS). If the response to a lookup request is detected to be invalid a lookup failure is returned to applications. Note that this mode requires a DNS server that supports DNSSEC. If the DNS server does not properly support DNSSEC all validations will fail.\n\nIf set to \"`allow-downgrade`\", DNSSEC validation is attempted, but if the server does not support DNSSEC properly, DNSSEC mode is automatically disabled. Note that this mode makes DNSSEC validation vulnerable to \"downgrade\" attacks, where an attacker might be able to trigger a downgrade to non-DNSSEC mode by synthesizing a DNS response that suggests DNSSEC was not supported.\n\nIf set to false, DNS lookups are not DNSSEC validated. In this mode, or when set to \"`allow-downgrade`\" and the downgrade has happened, the resolver becomes security-unaware and all forwarded queries have DNSSEC OK (DO) bit unset.\n\nNote that DNSSEC validation requires retrieval of additional DNS data, and thus results in a small DNS lookup time penalty.\n\nDNSSEC requires knowledge of \"trust anchors\" to prove data integrity. The trust anchor for the Internet root domain is built into the resolver, additional trust anchors may be defined with [dnssec-trust-anchors.d(5)](dnssec-trust-anchors.d.html). Trust anchors may change at regular intervals, and old trust anchors may be revoked. In such a case DNSSEC validation is not possible until new trust anchors are configured locally or the resolver software package is updated with the new root trust anchor. In effect, when the built-in trust anchor is revoked and `DNSSEC=` is true, all further lookups will fail, as it cannot be proved anymore whether lookups are correctly signed, or validly unsigned. If `DNSSEC=` is set to \"`allow-downgrade`\" the resolver will automatically turn off DNSSEC validation in such a case.\n\nClient programs looking up DNS data will be informed whether lookups could be verified using DNSSEC, or whether the returned data could not be verified (either because the data was found unsigned in the DNS, or the DNS server did not support DNSSEC or no appropriate trust anchors were known). In the latter case it is assumed that client programs employ a secondary scheme to validate the returned DNS data, should this be required.\n\nIt is recommended to set `DNSSEC=` to true on systems where it is known that the DNS server supports DNSSEC correctly, and where software or trust anchor updates happen regularly. On other systems it is recommended to set `DNSSEC=` to \"`allow-downgrade`\".\n\nIn addition to this global DNSSEC setting [systemd-networkd.service(8)](systemd-networkd.service.html) also maintains per-link DNSSEC settings. For system DNS servers (see above), only the global DNSSEC setting is in effect. For per-link DNS servers the per-link setting is in effect, unless it is unset in which case the global setting is used instead.\n\nSite-private DNS zones generally conflict with DNSSEC operation, unless a negative (if the private zone is not signed) or positive (if the private zone is signed) trust anchor is configured for them. If \"`allow-downgrade`\" mode is selected, it is attempted to detect site-private DNS zones using top-level domains (TLDs) that are not known by the DNS root server. This logic does not work in all private zone setups.\n\nDefaults to \"`allow-downgrade`\".\n\nAdded in version 229."],
[4,375,"Takes a boolean argument or \"`opportunistic`\". If true all connections to the server will be encrypted. Note that this mode requires a DNS server that supports DNS-over-TLS and has a valid certificate. If the hostname was specified in `DNS=` by using the format \"`address#server_name`\" it is used to validate its certificate and also to enable Server Name Indication (SNI) when opening a TLS connection. Otherwise the certificate is checked against the server's IP. If the DNS server does not support DNS-over-TLS all DNS requests will fail.\n\nWhen set to \"`opportunistic`\" DNS request are attempted to send encrypted with DNS-over-TLS. If the DNS server does not support TLS, DNS-over-TLS is disabled. Note that this mode makes DNS-over-TLS vulnerable to \"downgrade\" attacks, where an attacker might be able to trigger a downgrade to non-encrypted mode by synthesizing a response that suggests DNS-over-TLS was not supported. If set to false, DNS lookups are send over UDP.\n\nNote that DNS-over-TLS requires additional data to be send for setting up an encrypted connection, and thus results in a small DNS look-up time penalty.\n\nNote that in \"`opportunistic`\" mode the resolver is not capable of authenticating the server, so it is vulnerable to \"man-in-the-middle\" attacks.\n\nIn addition to this global `DNSOverTLS=` setting [systemd-networkd.service(8)](systemd-networkd.service.html) also maintains per-link `DNSOverTLS=` settings. For system DNS servers (see above), only the global `DNSOverTLS=` setting is in effect. For per-link DNS servers the per-link setting is in effect, unless it is unset in which case the global setting is used instead.\n\nDefaults to \"`no`\".\n\nAdded in version 239."],
[4,376,"Takes a boolean or \"`no-negative`\" as argument. If \"`yes`\" (the default), resolving a domain name which already got queried earlier will return the previous result as long as it is still valid, and thus does not result in a new network request. Be aware that turning off caching comes at a performance penalty, which is particularly high when DNSSEC is used. If \"`no-negative`\", only positive answers are cached.\n\nNote that caching is turned off by default for host-local DNS servers. See `CacheFromLocalhost=` for details.\n\nAdded in version 231."],
[4,377,"Takes a boolean as argument. If \"`no`\" (the default), and response cames from host-local IP address (such as 127.0.0.1 or ::1), the result wouldn't be cached in order to avoid potential duplicate local caching.\n\nAdded in version 248."],
[4,378,"Takes a boolean argument or one of \"`udp`\" and \"`tcp`\". If \"`udp`\", a DNS stub resolver will listen for UDP requests on addresses 127.0.0.53 and 127.0.0.54, port 53. If \"`tcp`\", the stub will listen for TCP requests on the same addresses and port. If \"`yes`\" (the default), the stub listens for both UDP and TCP requests. If \"`no`\", the stub listener is disabled.\n\nThe DNS stub resolver on 127.0.0.53 provides the full feature set of the local resolver, which includes offering LLMNR/MulticastDNS resolution. The DNS stub resolver on 127.0.0.54 provides a more limited resolver, that operates in \"proxy\" mode only, i.e. it will pass most DNS messages relatively unmodified to the current upstream DNS servers and back, but not try to process the messages locally, and hence does not validate DNSSEC, or offer up LLMNR/MulticastDNS. (It will translate to DNS-over-TLS communication if needed however.)\n\nNote that the DNS stub listener is turned off implicitly when its listening address and port are already in use.\n\nAdded in version 232."],
[4,379,"Takes an IPv4 or IPv6 address to listen on. The address may be optionally prefixed with a protocol name (\"`udp`\" or \"`tcp`\") separated with \"`:`\". If the protocol is not specified, the service will listen on both UDP and TCP. It may be also optionally suffixed by a numeric port number with separator \"`:`\". When an IPv6 address is specified with a port number, then the address must be in the square brackets. If the port is not specified, then the service uses port 53. Note that this is independent of the primary DNS stub configured with `DNSStubListener=`, and only configures _additional_ sockets to listen on. This option can be specified multiple times. If an empty string is assigned, then the all previous assignments are cleared. Defaults to unset.\n\nExamples:\n\nDNSStubListenerExtra=192.168.10.10\nDNSStubListenerExtra=2001:db8:0:f102::10\nDNSStubListenerExtra=192.168.10.11:9953\nDNSStubListenerExtra=\\[2001:db8:0:f102::11\\]:9953\nDNSStubListenerExtra=tcp:192.168.10.12\nDNSStubListenerExtra=udp:2001:db8:0:f102::12\nDNSStubListenerExtra=tcp:192.168.10.13:9953\nDNSStubListenerExtra=udp:\\[2001:db8:0:f102::13\\]:9953\n\nAdded in version 247."],
[4,380,"Takes a boolean argument. If \"`yes`\" (the default), **systemd-resolved** will read `/etc/hosts`, and try to resolve hosts or address by using the entries in the file before sending query to DNS servers.\n\nAdded in version 240."],
[4,381,"Takes a boolean argument. When false (the default), **systemd-resolved** will not resolve A and AAAA queries for single-label names over classic DNS. Note that such names may still be resolved if search domains are specified (see `Domains=` above), or using other mechanisms, in particular via LLMNR or from `/etc/hosts`. When true, queries for single-label names will be forwarded to global DNS servers even if no search domains are defined.\n\nThis option is provided for compatibility with configurations where _public DNS servers are not used_. Forwarding single-label names to servers not under your control is not standard-conformant, see [IAB Statement](https://www.iab.org/documents/correspondence-reports-documents/2013-2/iab-statement-dotless-domains-considered-harmful/), and may create a privacy and security risk.\n\nAdded in version 246."],
[2,"Cache","",376,40,6],
[2,"CacheFromLocalhost","",377,40,6],
[2,"DNS","",369,40,6],
[2,"DNSOverTLS","",375,40,6],
[2,"DNSSEC","",374,40,6],
[2,"DNSStubListener","",378,40,6],
[2,"DNSStubListenerExtra","",379,40,6],
[2,"Domains","",371,40,6],
[2,"FallbackDNS","",370,40,6],
[2,"LLMNR","",372,40,6],
[2,"MulticastDNS","",373,40,6],
[2,"ReadEtcHosts","",380,40,6],
[2,"ResolveUnicastSingleLabel","",381,40,6],
[3,41,"timesyncd.conf(5)","timesyncd.conf, timesyncd.conf.d â€” Network Time Synchronization configuration files","timesyncd.conf.html"],
[4,382,"A space-separated list of NTP server host names or IP addresses. During runtime this list is combined with any per-interface NTP servers acquired from [systemd-networkd.service(8)](systemd-networkd.service.html). **systemd-timesyncd** will contact all configured system or per-interface servers in turn, until one responds. When the empty string is assigned, the list of NTP servers is reset, and all prior assignments will have no effect. This setting defaults to an empty list.\n\nAdded in version 216."],
[4,383,"A space-separated list of NTP server host names or IP addresses to be used as the fallback NTP servers. Any per-interface NTP servers obtained from [systemd-networkd.service(8)](systemd-networkd.service.html) take precedence over this setting, as do any servers set via `NTP=` above. This setting is hence only relevant if no other NTP server information is known. When the empty string is assigned, the list of NTP servers is reset, and all prior assignments will have no effect. If this option is not given, a compiled-in list of NTP servers is used.\n\nAdded in version 216."],
[4,384,"Maximum acceptable root distance, i.e. the maximum estimated time required for a packet to travel to the server we are connected to from the server with the reference clock. If the current server does not satisfy this limit, **systemd-timesyncd** will switch to a different server.\n\nTakes a time span value. The default unit is seconds, but other units may be specified, see [systemd.time(5)](systemd.time.html). Defaults to 5 seconds.\n\nAdded in version 236."],
[4,385,"The minimum and maximum poll intervals for NTP messages. Polling starts at the minimum poll interval, and is adjusted within the specified limits in response to received packets.\n\nEach setting takes a time span value. The default unit is seconds, but other units may be specified, see [systemd.time(5)](systemd.time.html). `PollIntervalMinSec=` defaults to 32 seconds and must not be smaller than 16Â seconds. `PollIntervalMaxSec=` defaults to 34Â minÂ 8Â s (2048Â seconds) and must be larger than `PollIntervalMinSec=`.\n\nAdded in version 236."],
[4,386,"Specifies the minimum delay before subsequent attempts to contact a new NTP server are made.\n\nTakes a time span value. The default unit is seconds, but other units may be specified, see [systemd.time(5)](systemd.time.html). Defaults to 30 seconds and must not be smaller than 1 second.\n\nAdded in version 248."],
[4,387,"The interval at which the current time is periodically saved to disk, in the absence of any recent synchronisation from an NTP server. This is especially useful for offline systems with no local RTC, as it will guarantee that the system clock remains roughly monotonic across reboots.\n\nTakes a time interval value. The default unit is seconds, but other units may be specified, see [systemd.time(5)](systemd.time.html). Defaults to 60 seconds.\n\nAdded in version 250."],
[2,"ConnectionRetrySec","",386,41,null],
[2,"FallbackNTP","",383,41,null],
[2,"NTP","",382,41,null],
[2,"PollIntervalMaxSec","",385,41,null],
[2,"PollIntervalMinSec","",385,41,null],
[2,"RootDistanceMaxSec","",384,41,null],
[2,"SaveIntervalSec","",387,41,null],
[3,42,"networkd.conf(5)","networkd.conf, networkd.conf.d â€” Global Network configuration files","networkd.conf.html"],
[6,7,"Network"],
[6,8,"DHCPv4"],
[6,9,"DHCPv6"],
[4,388,"Takes a boolean. If set to yes, then **systemd-networkd** measures the traffic of each interface, and **networkctl status _`INTERFACE`_** shows the measured speed. Defaults to no.\n\nAdded in version 244."],
[4,389,"Specifies the time interval to calculate the traffic speed of each interface. If `SpeedMeter=no`, the value is ignored. Defaults to 10sec.\n\nAdded in version 244."],
[4,390,"A boolean. When true, **systemd-networkd** will remove rules that are not configured in .network files (except for rules with protocol \"`kernel`\"). When false, it will not remove any foreign rules, keeping them even if they are not configured in a .network file. Defaults to yes.\n\nAdded in version 249."],
[4,391,"A boolean. When true, **systemd-networkd** will remove routes that are not configured in .network files (except for routes with protocol \"`kernel`\", \"`dhcp`\" when `KeepConfiguration=` is true or \"`dhcp`\", and \"`static`\" when `KeepConfiguration=` is true or \"`static`\"). When false, it will not remove any foreign routes, keeping them even if they are not configured in a .network file. Defaults to yes.\n\nAdded in version 246."],
[4,392,"Defines the route table name. Takes a whitespace-separated list of the pairs of route table name and number. The route table name and number in each pair are separated with a colon, i.e., \"``_`name`_:_`number`_``\". The route table name must not be \"`default`\", \"`main`\", or \"`local`\", as these route table names are predefined with route table number 253, 254, and 255, respectively. The route table number must be an integer in the range 1â€¦4294967295, except for predefined numbers 253, 254, and 255. This setting can be specified multiple times. If an empty string is specified, then the list specified earlier are cleared. Defaults to unset.\n\nAdded in version 248."],
[4,393,"Specifies the default value for per-network `IPv6PrivacyExtensions=`. Takes a boolean or the special values \"`prefer-public`\" and \"`kernel`\". See for details in [systemd.network(5)](systemd.network.html). Defaults to \"`no`\".\n\nAdded in version 254."],
[4,394,"Specifies how the DUID should be generated. See [RFC 3315](https://tools.ietf.org/html/rfc3315#section-9) for a description of all the options.\n\nThis takes an integer in the range 0â€¦65535, or one of the following string values:\n\n`vendor`[Â¶](#vendor \"Permalink to this term\")\n\nIf \"`DUIDType=vendor`\", then the DUID value will be generated using \"`43793`\" as the vendor identifier (systemd) and hashed contents of [machine-id(5)](machine-id.html). This is the default if `DUIDType=` is not specified.\n\nAdded in version 230.\n\n`uuid`[Â¶](#uuid \"Permalink to this term\")\n\nIf \"`DUIDType=uuid`\", and `DUIDRawData=` is not set, then the product UUID is used as a DUID value. If a system does not have valid product UUID, then an application-specific [machine-id(5)](machine-id.html) is used as a DUID value. About the application-specific machine ID, see [sd\\_id128\\_get\\_machine\\_app\\_specific(3)](sd_id128_get_machine_app_specific.html).\n\nAdded in version 230.\n\n``link-layer-time[:_`TIME`_]``, `link-layer`[Â¶](#link-layer-time%5B:TIME%5D \"Permalink to this term\")\n\nIf \"`link-layer-time`\" or \"`link-layer`\" is specified, then the MAC address of the interface is used as a DUID value. The value \"`link-layer-time`\" can take additional time value after a colon, e.g. \"`link-layer-time:2018-01-23 12:34:56 UTC`\". The default time value is \"`2000-01-01 00:00:00 UTC`\".\n\nAdded in version 240.\n\nIn all cases, `DUIDRawData=` can be used to override the actual DUID value that is used.\n\nAdded in version 230."],
[4,395,"Specifies the DHCP DUID value as a single newline-terminated, hexadecimal string, with each byte separated by \"`:`\". The DUID that is sent is composed of the DUID type specified by `DUIDType=` and the value configured here.\n\nThe DUID value specified here overrides the DUID that [systemd-networkd.service(8)](systemd-networkd.service.html) generates from the machine ID. To configure DUID per-network, see [systemd.network(5)](systemd.network.html). The configured DHCP DUID should conform to the specification in [RFC 3315](http://tools.ietf.org/html/rfc3315#section-9), [RFC 6355](http://tools.ietf.org/html/rfc6355). To configure IAID, see [systemd.network(5)](systemd.network.html).\n\n**ExampleÂ 1.Â A `DUIDType=vendor` with a custom value**\n\nDUIDType=vendor\nDUIDRawData=00:00:ab:11:f9:2a:c2:77:29:f9:5c:00\n\nThis specifies a 14 byte DUID, with the type DUID-EN (\"`00:02`\"), enterprise number 43793 (\"`00:00:ab:11`\"), and identifier value \"`f9:2a:c2:77:29:f9:5c:00`\".\n\n  \n\nAdded in version 230."],
[4,396,"As in the \\[DHCPv4\\] section.\n\nAdded in version 249."],
[2,"DUIDRawData","",396,42,9],
[2,"DUIDRawData","",395,42,8],
[2,"DUIDType","",396,42,9],
[2,"DUIDType","",394,42,8],
[2,"IPv6PrivacyExtensions","",393,42,7],
[2,"ManageForeignRoutes","",391,42,7],
[2,"ManageForeignRoutingPolicyRules","",390,42,7],
[2,"RouteTable","",392,42,7],
[2,"SpeedMeter","",388,42,7],
[2,"SpeedMeterIntervalSec","",389,42,7],
[3,44,"systemd.journal-fields(7)","systemd.journal-fields â€” Special journal fields","systemd.journal-fields.html"],
[4,397,"The human-readable message string for this entry. This is supposed to be the primary text shown to the user. It is usually not translated (but might be in some cases), and is not supposed to be parsed for metadata. In order to encode multiple lines in a single log entry, separate them by newline characters (ASCII code 10), but encode them as a single `MESSAGE=` field. Do not add multiple values of this field type to the same entry (also see above), as consuming applications generally do not expect this and are unlikely to show all values in that case."],
[4,398,"A 128-bit message identifier ID for recognizing certain message types, if this is desirable. This should contain a 128-bit ID formatted as a lower-case hexadecimal string, without any separating dashes or suchlike. This is recommended to be a UUID-compatible ID, but this is not enforced, and formatted differently. Developers can generate a new ID for this purpose with **systemd-id128 new**."],
[4,399,"A priority value between 0 (\"`emerg`\") and 7 (\"`debug`\") formatted as a decimal string. This field is compatible with syslog's priority concept."],
[4,400,"The code location generating this message, if known. Contains the source filename, the line number and the function name."],
[4,401,"The low-level Unix error number causing this entry, if any. Contains the numeric value of [errno(3)](https://man7.org/linux/man-pages/man3/errno.3.html) formatted as a decimal string.\n\nAdded in version 188."],
[4,402,"A randomized, unique 128-bit ID identifying each runtime cycle of the unit. This is different from `_SYSTEMD_INVOCATION_ID` in that it is only used for messages coming from systemd code (e.g. logs from the system/user manager or from forked processes performing systemd-related setup).\n\nAdded in version 245."],
[4,403,"Syslog compatibility fields containing the facility (formatted as decimal string), the identifier string (i.e. \"tag\"), the client PID, and the timestamp as specified in the original datagram. (Note that the tag is usually derived from glibc's `program_invocation_short_name` variable, see [program\\_invocation\\_short\\_name(3)](http://linux.die.net/man/3/program_invocation_short_name).)\n\nNote that the journal service does not validate the values of any structured journal fields whose name is not prefixed with an underscore, and this includes any syslog related fields such as these. Hence, applications that supply a facility, PID, or log level are expected to do so properly formatted, i.e. as numeric integers formatted as decimal strings."],
[4,404,"The original contents of the syslog line as received in the syslog datagram. This field is only included if the `MESSAGE=` field was modified compared to the original payload or the timestamp could not be located properly and is not included in `SYSLOG_TIMESTAMP=`. Message truncation occurs when the message contains leading or trailing whitespace (trailing and leading whitespace is stripped), or it contains an embedded `NUL` byte (the `NUL` byte and anything after it is not included). Thus, the original syslog line is either stored as `SYSLOG_RAW=` or it can be recreated based on the stored priority and facility, timestamp, identifier, and the message payload in `MESSAGE=`.\n\nAdded in version 240."],
[4,405,"A documentation URL with further information about the topic of the log message. Tools such as **journalctl** will include a hyperlink to a URL specified this way in their output. Should be an \"`http://`\", \"`https://`\", \"`file:/`\", \"`man:`\" or \"`info:`\" URL.\n\nAdded in version 246."],
[4,406,"The numeric thread ID (TID) the log message originates from.\n\nAdded in version 247."],
[4,407,"The name of a unit. Used by the system and user managers when logging about specific units.\n\nWhen ``--unit=_`name`_`` or ``--user-unit=_`name`_`` are used with [journalctl(1)](journalctl.html), a match pattern that includes \"``UNIT=_`name`_.service``\" or \"``USER_UNIT=_`name`_.service``\" will be generated.\n\nAdded in version 251."],
[4,408,"The process, user, and group ID of the process the journal entry originates from formatted as a decimal string. Note that entries obtained via \"`stdout`\" or \"`stderr`\" of forked processes will contain credentials valid for a parent process (that initiated the connection to **systemd-journald**)."],
[4,409,"The name, the executable path, and the command line of the process the journal entry originates from."],
[4,410,"The effective [capabilities(7)](https://man7.org/linux/man-pages/man7/capabilities.7.html) of the process the journal entry originates from.\n\nAdded in version 206."],
[4,411,"The session and login UID of the process the journal entry originates from, as maintained by the kernel audit subsystem."],
[4,412,"The control group path in the systemd hierarchy, the systemd slice unit name, the systemd unit name, the unit name in the systemd user manager (if any), the systemd session ID (if any), and the owner UID of the systemd user unit or systemd session (if any) of the process the journal entry originates from."],
[4,413,"The SELinux security context (label) of the process the journal entry originates from."],
[4,414,"The earliest trusted timestamp of the message, if any is known that is different from the reception time of the journal. This is the time in microseconds since the epoch UTC, formatted as a decimal string."],
[4,415,"The kernel boot ID for the boot the message was generated in, formatted as a 128-bit hexadecimal string."],
[4,416,"The machine ID of the originating host, as available in [machine-id(5)](machine-id.html)."],
[4,417,"The invocation ID for the runtime cycle of the unit the message was generated in, as available to processes of the unit in `$INVOCATION_ID` (see [systemd.exec(5)](systemd.exec.html)).\n\nAdded in version 233."],
[4,418,"The name of the originating host."],
[4,419,"How the entry was received by the journal service. Valid transports are:\n\n`audit` [Â¶](#%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20audit%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20 \"Permalink to this term\")\n\nfor those read from the kernel audit subsystem\n\nAdded in version 227.\n\n`driver` [Â¶](#%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20driver%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20 \"Permalink to this term\")\n\nfor internally generated messages\n\nAdded in version 205.\n\n`syslog` [Â¶](#%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20syslog%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20 \"Permalink to this term\")\n\nfor those received via the local syslog socket with the syslog protocol\n\nAdded in version 205.\n\n`journal` [Â¶](#%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20journal%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20 \"Permalink to this term\")\n\nfor those received via the native journal protocol\n\nAdded in version 205.\n\n`stdout` [Â¶](#%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20stdout%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20 \"Permalink to this term\")\n\nfor those read from a service's standard output or error output\n\nAdded in version 205.\n\n`kernel` [Â¶](#%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20kernel%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20 \"Permalink to this term\")\n\nfor those read from the kernel\n\nAdded in version 205."],
[4,420,"Only applies to \"`_TRANSPORT=stdout`\" records: specifies a randomized 128-bit ID assigned to the stream connection when it was first created. This ID is useful to reconstruct individual log streams from the log records: all log records carrying the same stream ID originate from the same stream.\n\nAdded in version 235."],
[4,421,"Only applies to \"`_TRANSPORT=stdout`\" records: indicates that the log message in the standard output/error stream was not terminated with a normal newline character (\"`\\n`\", i.e. ASCII 10). Specifically, when set this field is one of `nul` (in case the line was terminated by a `NUL` byte), `line-max` (in case the maximum log line length was reached, as configured with `LineMax=` in [journald.conf(5)](journald.conf.html)), `eof` (if this was the last log record of a stream and the stream ended without a final newline character), or `pid-change` (if the process which generated the log output changed in the middle of a line). Note that this record is not generated when a normal newline character was used for marking the log line end.\n\nAdded in version 235."],
[4,422,"If this file was written by a **systemd-journald** instance managing a journal namespace that is not the default, this field contains the namespace identifier. See [systemd-journald.service(8)](systemd-journald.service.html) for details about journal namespaces.\n\nAdded in version 245."],
[4,423,"A string field that specifies the runtime scope in which the message was logged. If \"`initrd`\", the log message was processed while the system was running inside the initrd. If \"`system`\", the log message was generated after the system switched execution to the host root filesystem.\n\nAdded in version 252."],
[4,424,"The kernel device name. If the entry is associated to a block device, contains the major and minor numbers of the device node, separated by \"`:`\" and prefixed by \"`b`\". Similarly for character devices, but prefixed by \"`c`\". For network devices, this is the interface index prefixed by \"`n`\". For all other devices, this is the subsystem name prefixed by \"`+`\", followed by \"`:`\", followed by the kernel device name.\n\nAdded in version 189."],
[4,425,"The kernel subsystem name.\n\nAdded in version 189."],
[4,426,"The kernel device name as it shows up in the device tree below `/sys/`.\n\nAdded in version 189."],
[4,427,"The device node path of this device in `/dev/`.\n\nAdded in version 189."],
[4,428,"Additional symlink names pointing to the device node in `/dev/`. This field is frequently set more than once per entry.\n\nAdded in version 189."],
[4,429,"Used to annotate messages containing coredumps from system and session units. See [coredumpctl(1)](coredumpctl.html).\n\nAdded in version 198."],
[4,430,"PID of the program that this message pertains to.\n\nAdded in version 205."],
[4,431,"These are additional fields added automatically by **systemd-journald**. Their meaning is the same as `_UID=`, `_GID=`, `_COMM=`, `_EXE=`, `_CMDLINE=`, `_AUDIT_SESSION=`, `_AUDIT_LOGINUID=`, `_SYSTEMD_CGROUP=`, `_SYSTEMD_SESSION=`, `_SYSTEMD_UNIT=`, `_SYSTEMD_USER_UNIT=`, and `_SYSTEMD_OWNER_UID=` as described above, except that the process identified by _`PID`_ is described, instead of the process which logged the message.\n\nAdded in version 205."],
[4,432,"The cursor for the entry. A cursor is an opaque text string that uniquely describes the position of an entry in the journal and is portable across machines, platforms and journal files."],
[4,433,"The wallclock time (`CLOCK_REALTIME`) at the point in time the entry was received by the journal, in microseconds since the epoch UTC, formatted as a decimal string. This has different properties from \"`_SOURCE_REALTIME_TIMESTAMP=`\", as it is usually a bit later but more likely to be monotonic."],
[4,434,"The monotonic time (`CLOCK_MONOTONIC`) at the point in time the entry was received by the journal in microseconds, formatted as a decimal string. To be useful as an address for the entry, this should be combined with the boot ID in \"`_BOOT_ID=`\"."],
[4,435,"The sequence number (and associated sequence number ID) of this journal entry in the journal file it originates from. See [sd\\_journal\\_get\\_seqnum(3)](sd_journal_get_seqnum.html) for details.\n\nAdded in version 254."],
[2,"CODE_FILE","",400,44,null],
[2,"CODE_FUNC","",400,44,null],
[2,"CODE_LINE","",400,44,null],
[2,"COREDUMP_UNIT","",429,44,null],
[2,"COREDUMP_USER_UNIT","",429,44,null],
[2,"DOCUMENTATION","",405,44,null],
[2,"ERRNO","",401,44,null],
[2,"INVOCATION_ID","",402,44,null],
[2,"MESSAGE","",397,44,null],
[2,"MESSAGE_ID","",398,44,null],
[2,"OBJECT_AUDIT_LOGINUID","",431,44,null],
[2,"OBJECT_AUDIT_SESSION","",431,44,null],
[2,"OBJECT_CMDLINE","",431,44,null],
[2,"OBJECT_COMM","",431,44,null],
[2,"OBJECT_EXE","",431,44,null],
[2,"OBJECT_GID","",431,44,null],
[2,"OBJECT_PID","PID",430,44,null],
[2,"OBJECT_SYSTEMD_CGROUP","",431,44,null],
[2,"OBJECT_SYSTEMD_OWNER_UID","",431,44,null],
[2,"OBJECT_SYSTEMD_SESSION","",431,44,null],
[2,"OBJECT_SYSTEMD_UNIT","",431,44,null],
[2,"OBJECT_SYSTEMD_USER_UNIT","",431,44,null],
[2,"OBJECT_UID","",431,44,null],
[2,"PRIORITY","",399,44,null],
[2,"SYSLOG_FACILITY","",403,44,null],
[2,"SYSLOG_IDENTIFIER","",403,44,null],
[2,"SYSLOG_PID","",403,44,null],
[2,"SYSLOG_RAW","",404,44,null],
[2,"SYSLOG_TIMESTAMP","",403,44,null],
[2,"TID","",406,44,null],
[2,"UNIT","",407,44,null],
[2,"USER_INVOCATION_ID","",402,44,null],
[2,"USER_UNIT","",407,44,null],
[2,"_AUDIT_LOGINUID","",411,44,null],
[2,"_AUDIT_SESSION","",411,44,null],
[2,"_BOOT_ID","",415,44,null],
[2,"_CAP_EFFECTIVE","",410,44,null],
[2,"_CMDLINE","",409,44,null],
[2,"_COMM","",409,44,null],
[2,"_EXE","",409,44,null],
[2,"_GID","",408,44,null],
[2,"_HOSTNAME","",418,44,null],
[2,"_KERNEL_DEVICE","",424,44,null],
[2,"_KERNEL_SUBSYSTEM","",425,44,null],
[2,"_LINE_BREAK","",421,44,null],
[2,"_MACHINE_ID","",416,44,null],
[2,"_NAMESPACE","",422,44,null],
[2,"_PID","",408,44,null],
[2,"_RUNTIME_SCOPE","",423,44,null],
[2,"_SELINUX_CONTEXT","",413,44,null],
[2,"_SOURCE_REALTIME_TIMESTAMP","",414,44,null],
[2,"_STREAM_ID","",420,44,null],
[2,"_SYSTEMD_CGROUP","",412,44,null],
[2,"_SYSTEMD_INVOCATION_ID","",417,44,null],
[2,"_SYSTEMD_OWNER_UID","",412,44,null],
[2,"_SYSTEMD_SESSION","",412,44,null],
[2,"_SYSTEMD_SLICE","",412,44,null],
[2,"_SYSTEMD_UNIT","",412,44,null],
[2,"_SYSTEMD_USER_SLICE","",412,44,null],
[2,"_SYSTEMD_USER_UNIT","",412,44,null],
[2,"_TRANSPORT","",419,44,null],
[2,"_UDEV_DEVLINK","",428,44,null],
[2,"_UDEV_DEVNODE","",427,44,null],
[2,"_UDEV_SYSNAME","",426,44,null],
[2,"_UID","",408,44,null],
[2,"__CURSOR","",432,44,null],
[2,"__MONOTONIC_TIMESTAMP","",434,44,null],
[2,"__REALTIME_TIMESTAMP","",433,44,null],
[2,"__SEQNUM","",435,44,null],
[2,"__SEQNUM_ID","",435,44,null],
[3,45,"systemd-coredump(8)","systemd-coredump, systemd-coredump.socket, systemd-coredump@.service â€” Acquire, save and process core dumps","systemd-coredump.html"],
[4,436,"The process number (PID), owner user number (UID), and group number (GID) of the crashed process.\n\nWhen the crashed process was part of a container (or in a process or user namespace in general), those are the values as seen _outside_, in the namespace where `systemd-coredump` is running.\n\nAdded in version 248."],
[4,437,"The time of the crash as reported by the kernel (in Î¼s since the epoch).\n\nAdded in version 248."],
[4,438,"The core file size soft resource limit, see [getrlimit(2)](https://man7.org/linux/man-pages/man2/getrlimit.2.html).\n\nAdded in version 248."],
[4,439,"The system unit and slice names.\n\nWhen the crashed process was in container, those are the units names _outside_, in the main system manager.\n\nAdded in version 248."],
[4,440,"The primary cgroup of the unit of the crashed process.\n\nWhen the crashed process was in a container, this is the full path, as seen outside of the container.\n\nAdded in version 248."],
[4,441,"Control group information in the format used in `/proc/self/cgroup`. On systems with the unified cgroup hierarchy, this is a single path prefixed with \"`0::`\", and multiple paths prefixed with controller numbers on legacy systems.\n\nWhen the crashed process was in a container, this is the full path, as seen outside of the container.\n\nAdded in version 248."],
[4,442,"The numerical UID of the user owning the login session or systemd user unit of the crashed process, the user manager unit, and the session identifier. All three fields are only present for user processes.\n\nWhen the crashed process was in container, those are the values _outside_, in the main system.\n\nAdded in version 248."],
[4,443,"The terminating signal name (with the \"`SIG`\" prefix [\\[1\\]](#ftn.id-1.7.6.8.3.1.2)) and numerical value. (Both are included because signal numbers vary by architecture.)\n\nAdded in version 248."],
[4,444,"The current working directory and root directory of the crashed process.\n\nWhen the crashed process is in a container, those paths are relative to the root of the container's mount namespace.\n\nAdded in version 248."],
[4,445,"Information about open file descriptors, in the following format:\n\n_`fd`_:_`/path/to/file`_\npos:     ...\nflags:   ...\n...\n\n_`fd`_:_`/path/to/file`_\npos:     ...\nflags:   ...\n...\n        \n\nThe first line contains the file descriptor number _`fd`_ and the path, while subsequent lines show the contents of ``/proc/_`pid`_/fdinfo/_`fd`_``.\n\nAdded in version 248."],
[4,446,"The destination of the ``/proc/_`pid`_/exe`` symlink.\n\nWhen the crashed process is in a container, that path is relative to the root of the container's mount namespace.\n\nAdded in version 248."],
[4,447,"Fields that map the per-process entries in the `/proc/` filesystem: ``/proc/_`pid`_/cmdline`` (the command line of the crashed process), ``/proc/_`pid`_/comm`` (the command name associated with the process), ``/proc/_`pid`_/environ`` (the environment block of the crashed process), ``/proc/_`pid`_/auxv`` (the auxiliary vector of the crashed process, see [getauxval(3)](https://man7.org/linux/man-pages/man3/getauxval.3.html)), ``/proc/_`pid`_/limits`` (the soft and hard resource limits), ``/proc/_`pid`_/maps`` (memory regions visible to the process and their access permissions), ``/proc/_`pid`_/mountinfo`` (mount points in the process's mount namespace), ``/proc/_`pid`_/status`` (various metadata about the process).\n\nSee [proc(5)](https://man7.org/linux/man-pages/man5/proc.5.html) for more information.\n\nAdded in version 248."],
[4,448,"The system hostname.\n\nWhen the crashed process was in container, this is the container hostname.\n\nAdded in version 248."],
[4,449,"For processes running in a container, the command line of the process spawning the container (the first parent process with a different mount namespace).\n\nAdded in version 248."],
[4,450,"When the core is stored in the journal, the core image itself.\n\nAdded in version 248."],
[4,451,"When the core is stored externally, the path to the core file.\n\nAdded in version 248."],
[4,452,"Set to \"`1`\" when the saved coredump was truncated. (A partial core image may still be processed by some tools, though obviously not all information is available.)\n\nAdded in version 248."],
[4,453,"If the executable contained .package metadata ELF notes, they will be parsed and attached. The `package` and `packageVersion` of the 'main' ELF module (ie: the executable) will be appended individually. The JSON-formatted content of all modules will be appended as a single JSON object, each with the module name as the key. For more information about this metadata format and content, see [the coredump metadata spec](https://systemd.io/COREDUMP_PACKAGE_METADATA/).\n\nAdded in version 249."],
[4,454,"The message generated by **systemd-coredump** that includes the backtrace if it was successfully generated. When **systemd-coredump** is invoked with `--backtrace`, this field is provided by the caller.\n\nAdded in version 248."],
[2,"COREDUMP","",450,45,null],
[2,"COREDUMP_CGROUP","",440,45,null],
[2,"COREDUMP_CMDLINE","",447,45,null],
[2,"COREDUMP_COMM","",447,45,null],
[2,"COREDUMP_CONTAINER_CMDLINE","",449,45,null],
[2,"COREDUMP_CWD","",444,45,null],
[2,"COREDUMP_ENVIRON","",447,45,null],
[2,"COREDUMP_EXE","",446,45,null],
[2,"COREDUMP_FILENAME","",451,45,null],
[2,"COREDUMP_GID","",436,45,null],
[2,"COREDUMP_HOSTNAME","",448,45,null],
[2,"COREDUMP_OPEN_FDS","",445,45,null],
[2,"COREDUMP_OWNER_UID","",442,45,null],
[2,"COREDUMP_PACKAGE_JSON","",453,45,null],
[2,"COREDUMP_PACKAGE_NAME","",453,45,null],
[2,"COREDUMP_PACKAGE_VERSION","",453,45,null],
[2,"COREDUMP_PID","",436,45,null],
[2,"COREDUMP_PROC_AUXV","",447,45,null],
[2,"COREDUMP_PROC_CGROUP","",441,45,null],
[2,"COREDUMP_PROC_LIMITS","",447,45,null],
[2,"COREDUMP_PROC_MAPS","",447,45,null],
[2,"COREDUMP_PROC_MOUNTINFO","",447,45,null],
[2,"COREDUMP_PROC_STATUS","",447,45,null],
[2,"COREDUMP_RLIMIT","",438,45,null],
[2,"COREDUMP_ROOT","",444,45,null],
[2,"COREDUMP_SESSION","",442,45,null],
[2,"COREDUMP_SIGNAL","",443,45,null],
[2,"COREDUMP_SIGNAL_NAME","",443,45,null],
[2,"COREDUMP_SLICE","",439,45,null],
[2,"COREDUMP_TIMESTAMP","",437,45,null],
[2,"COREDUMP_TRUNCATED","",452,45,null],
[2,"COREDUMP_UID","",436,45,null],
[2,"COREDUMP_UNIT","",439,45,null],
[2,"COREDUMP_USER_UNIT","",442,45,null],
[2,"MESSAGE","",454,45,null],
[3,46,"pam_systemd(8)","pam\\_systemd â€” Register user sessions in the systemd login manager","pam_systemd.html"],
[4,455,"Takes a string argument which sets the session class. The `XDG_SESSION_CLASS` environment variable (see below) takes precedence. One of \"`user`\", \"`greeter`\", \"`lock-screen`\" or \"`background`\". See [sd\\_session\\_get\\_class(3)](sd_session_get_class.html) for details about the session class.\n\nAdded in version 197."],
[4,456,"Takes a string argument which sets the session type. The `XDG_SESSION_TYPE` environment variable (see below) takes precedence. One of \"`unspecified`\", \"`tty`\", \"`x11`\", \"`wayland`\" or \"`mir`\". See [sd\\_session\\_get\\_type(3)](sd_session_get_type.html) for details about the session type.\n\nAdded in version 209."],
[4,457,"Takes a single, short identifier string for the desktop environment. The `XDG_SESSION_DESKTOP` environment variable (see below) takes precedence. This may be used to indicate the session desktop used, where this applies and if this information is available. For example: \"`GNOME`\", or \"`KDE`\". It is recommended to use the same identifiers and capitalization as for `$XDG_CURRENT_DESKTOP`, as defined by the [Desktop Entry Specification](https://standards.freedesktop.org/desktop-entry-spec/latest/). (However, note that the option only takes a single item, and not a colon-separated list like `$XDG_CURRENT_DESKTOP`.) See [sd\\_session\\_get\\_desktop(3)](sd_session_get_desktop.html) for further details.\n\nAdded in version 240."],
[4,458,"Takes a comma-separated list of process capabilities (e.g. `CAP_WAKE_ALARM`, `CAP_BLOCK_SUSPEND`, â€¦) to set for the invoked session's processes, if the user record does not encode appropriate sets of capabilities directly. See [capabilities(7)](https://man7.org/linux/man-pages/man7/capabilities.7.html) for details on the capabilities concept. If not specified, the default bounding set is left as is (i.e. usually contains the full set of capabilities). The default ambient set is set to `CAP_WAKE_ALARM` for regular users if the PAM session is associated with a local seat or if it is invoked for the \"`systemd-user`\" service. Otherwise defaults to the empty set.\n\nAdded in version 254."],
[4,459,"Sets unit `MemoryMax=`.\n\nAdded in version 239."],
[4,460,"Sets unit `TasksMax=`.\n\nAdded in version 239."],
[4,461,"Sets unit `CPUWeight=`.\n\nAdded in version 239."],
[4,462,"Sets unit `IOWeight=`.\n\nAdded in version 239."],
[4,463,"Sets unit `RuntimeMaxSec=`.\n\nAdded in version 244."],
[2,"class","",455,46,null],
[2,"default-capability-ambient-set","",458,46,null],
[2,"default-capability-bounding-set","",458,46,null],
[2,"desktop","",457,46,null],
[2,"systemd.cpu_weight","",461,46,null],
[2,"systemd.io_weight","",462,46,null],
[2,"systemd.memory_max","",459,46,null],
[2,"systemd.runtime_max_sec","",463,46,null],
[2,"systemd.tasks_max","",460,46,null],
[2,"type","",456,46,null],
[3,47,"pam_systemd_loadkey(8)","pam\\_systemd\\_loadkey â€” Read password from kernel keyring and set it as PAM authtok","pam_systemd_loadkey.html"],
[4,464,"Takes a string argument which sets the keyname to read. The default is \"`cryptsetup`\", which is used by [systemd-cryptsetup@.service(8)](systemd-cryptsetup@.service.html) to store LUKS passphrase during boot.\n\nAdded in version 255."],
[2,"keyname","",464,47,null],
[3,48,"pam_systemd_home(8)","pam\\_systemd\\_home â€” Authenticate users and mount home directories via systemd-homed.service","pam_systemd_home.html"],
[4,465,"Takes a boolean argument. If true, the home directory of the user will be suspended automatically during system suspend; if false it will remain active. Automatic suspending of the home directory improves security substantially as secret key material is automatically removed from memory before the system is put to sleep and must be re-acquired (through user re-authentication) when coming back from suspend. It is recommended to set this parameter for all PAM applications that have support for automatically re-authenticating via PAM on system resume. If multiple sessions of the same user are open in parallel the user's home directory will be left unsuspended on system suspend as long as at least one of the sessions does not set this parameter to on. Defaults to off.\n\nNote that TTY logins generally do not support re-authentication on system resume. Re-authentication on system resume is primarily a concept implementable in graphical environments, in the form of lock screens brought up automatically when the system goes to sleep. This means that if a user concurrently uses graphical login sessions that implement the required re-authentication mechanism and console logins that do not, the home directory is not locked during suspend, due to the logic explained above. That said, it is possible to set this field for TTY logins too, ignoring the fact that TTY logins actually don't support the re-authentication mechanism. In that case the TTY sessions will appear hung until the user logs in on another virtual terminal (regardless if via another TTY session or graphically) which will resume the home directory and unblock the original TTY session. (Do note that lack of screen locking on TTY sessions means even though the TTY session appears hung, keypresses can still be queued into it, and the existing screen contents be read without re-authentication; this limitation is unrelated to the home directory management **pam\\_systemd\\_home** and `systemd-homed.service` implement.)\n\nTurning this option on by default is highly recommended for all sessions, but only if the service managing these sessions correctly implements the aforementioned re-authentication. Note that the re-authentication must take place from a component running outside of the user's context, so that it does not require access to the user's home directory for operation. Traditionally, most desktop environments do not implement screen locking this way, and need to be updated accordingly.\n\nThis setting may also be controlled via the `$SYSTEMD_HOME_SUSPEND` environment variable (see below), which **pam\\_systemd\\_home** reads during initialization and sets for sessions. If both the environment variable is set and the module parameter specified the latter takes precedence.\n\nAdded in version 245."],
[2,"suspend","",465,48,null],
[3,49,"crypttab(5)","crypttab â€” Configuration for encrypted block devices","crypttab.html"],
[4,466,"Specifies the cipher to use. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values and the default value of this option. A cipher with unpredictable IV values, such as \"`aes-cbc-essiv:sha256`\", is recommended. Embedded commas in the cipher specification need to be escaped by preceding them with a backslash, see example below.\n\nAdded in version 186."],
[4,467,"Specifies the hash to use for password hashing. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values and the default value of this option.\n\nAdded in version 186."],
[4,468,"Use a detached (separated) metadata device or file where the header containing the master key(s) is stored. This option is only relevant for LUKS and TrueCrypt/VeraCrypt devices. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values and the default value of this option.\n\nOptionally, the path may be followed by \"`:`\" and an `/etc/fstab` device specification (e.g. starting with \"`UUID=`\" or similar); in which case, the path is relative to the device file system root. The device gets mounted automatically for LUKS device activation duration only.\n\nAdded in version 219."],
[4,469,"Specifies the number of bytes to skip at the start of the key file. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values and the default value of this option.\n\nAdded in version 187."],
[4,470,"Specifies the maximum number of bytes to read from the key file. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values and the default value of this option. This option is ignored in plain encryption mode, as the key file size is then given by the key size.\n\nAdded in version 188."],
[4,471,"Specifies the key slot to compare the passphrase or key against. If the key slot does not match the given passphrase or key, but another would, the setup of the device will fail regardless. This option implies `luks`. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values. The default is to try all key slots in sequential order.\n\nAdded in version 209."],
[4,472,"Specifies the timeout for the device on which the key file resides or the device used as the key file, and falls back to a password if it could not be accessed. See [systemd-cryptsetup-generator(8)](systemd-cryptsetup-generator.html) for key files on external devices.\n\nAdded in version 243."],
[4,473,"Start offset in the backend device, in 512-byte sectors. This option is only relevant for plain devices.\n\nAdded in version 220."],
[4,474,"How many 512-byte sectors of the encrypted data to skip at the beginning. This is different from the `offset=` option with respect to the sector numbers used in initialization vector (IV) calculation. Using `offset=` will shift the IV calculation by the same negative amount. Hence, if ``offset=_`n`_`` is given, sector _`n`_ will get a sector number of 0 for the IV calculation. Using `skip=` causes sector _`n`_ to also be the first sector of the mapped device, but with its number for IV generation being _`n`_.\n\nThis option is only relevant for plain devices.\n\nAdded in version 220."],
[4,475,"Specifies the key size in bits. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values and the default value of this option.\n\nAdded in version 186."],
[4,476,"Specifies the sector size in bytes. See [cryptsetup(8)](http://linux.die.net/man/8/cryptsetup) for possible values and the default value of this option.\n\nAdded in version 240."],
[4,477,"Specifies the absolute path to a key file to use for a TrueCrypt volume. This implies `tcrypt` and can be used more than once to provide several key files.\n\nSee the entry for `tcrypt` on the behavior of the passphrase and key files when using TrueCrypt encryption mode.\n\nAdded in version 206."],
[4,478,"Specifies a custom Personal Iteration Multiplier (PIM) value, which can range from 0..2147468 for standard veracrypt volumes and 0..65535 for veracrypt system volumes. A value of 0 will imply the VeraCrypt default. This option is only effective when `tcrypt-veracrypt` is set.\n\nNote that VeraCrypt enforces a minimal allowed PIM value depending on the password strength and the hash algorithm used for key derivation, however `veracrypt-pim=` is not checked against these bounds. See [Veracrypt Personal Iterations Multiplier](https://www.veracrypt.fr/en/Personal%20Iterations%20Multiplier%20%28PIM%29.html) documentation for more information.\n\nAdded in version 254."],
[4,479,"Specifies the timeout for querying for a password. If no unit is specified, seconds is used. Supported units are s, ms, us, min, h, d. A timeout of 0 waits indefinitely (which is the default).\n\nAdded in version 186."],
[4,480,"The encrypted block device will be prepared for using it as `/tmp/`; it will be formatted using [mkfs(8)](https://man7.org/linux/man-pages/man8/mkfs.8.html). Takes a file system type as argument, such as \"`ext4`\", \"`xfs`\" or \"`btrfs`\". If no argument is specified defaults to \"`ext4`\". This option implies `plain`.\n\nWARNING: Using the `tmp` option will destroy the contents of the named partition during every boot, so make sure the underlying block device is specified correctly.\n\nAdded in version 186."],
[4,481,"Specifies the maximum number of times the user is queried for a password. The default is 3. If set to 0, the user is queried for a password indefinitely.\n\nAdded in version 186."],
[4,482,"Takes a boolean argument, defaults to false. If true, never query interactively for the password/PIN. Useful for headless systems.\n\nAdded in version 249."],
[4,483,"Controls whether to echo passwords or security token PINs that are read from console. Takes a boolean or the special string \"`masked`\". The default is `password-echo=masked`.\n\nIf enabled, the typed characters are echoed literally. If disabled, the typed characters are not echoed in any form, the user will not get feedback on their input. If set to \"`masked`\", an asterisk (\"`*`\") is echoed for each character typed. Regardless of which mode is chosen, if the user hits the tabulator key (\"`â†¹`\") at any time, or the backspace key (\"`âŒ«`\") before any other data has been entered, then echo is turned off.\n\nAdded in version 249."],
[4,484,"Takes either the special value \"`auto`\" or an [RFC7512 PKCS#11 URI](https://tools.ietf.org/html/rfc7512) pointing to a private RSA key which is used to decrypt the encrypted key specified in the third column of the line. This is useful for unlocking encrypted volumes through PKCS#11 compatible security tokens or smartcards. See below for an example how to set up this mechanism for unlocking a LUKS2 volume with a YubiKey security token.\n\nIf specified as \"`auto`\" the volume must be of type LUKS2 and must carry PKCS#11 security token metadata in its LUKS2 JSON token section. In this mode the URI and the encrypted key are automatically read from the LUKS2 JSON token header. Use [systemd-cryptenroll(1)](systemd-cryptenroll.html) as simple tool for enrolling PKCS#11 security tokens or smartcards in a way compatible with \"`auto`\". In this mode the third column of the line should remain empty (that is, specified as \"`-`\").\n\nThe specified URI can refer directly to a private RSA key stored on a token or alternatively just to a slot or token, in which case a search for a suitable private RSA key will be performed. In this case if multiple suitable objects are found the token is refused. The encrypted key configured in the third column of the line is passed as is (i.e. in binary form, unprocessed) to RSA decryption. The resulting decrypted key is then Base64 encoded before it is used to unlock the LUKS volume.\n\nUse **systemd-cryptenroll --pkcs11-token-uri=list** to list all suitable PKCS#11 security tokens currently plugged in, along with their URIs.\n\nNote that many newer security tokens that may be used as PKCS#11 security token typically also implement the newer and simpler FIDO2 standard. Consider using `fido2-device=` (described below) to enroll it via FIDO2 instead. Note that a security token enrolled via PKCS#11 cannot be used to unlock the volume via FIDO2, unless also enrolled via FIDO2, and vice versa.\n\nAdded in version 245."],
[4,485,"Takes either the special value \"`auto`\" or the path to a \"`hidraw`\" device node (e.g. `/dev/hidraw1`) referring to a FIDO2 security token that implements the \"`hmac-secret`\" extension (most current hardware security tokens do). See below for an example how to set up this mechanism for unlocking an encrypted volume with a FIDO2 security token.\n\nIf specified as \"`auto`\" the FIDO2 token device is automatically discovered, as it is plugged in.\n\nFIDO2 volume unlocking requires a client ID hash (CID) to be configured via `fido2-cid=` (see below) and a key to pass to the security token's HMAC functionality (configured in the line's third column) to operate. If not configured and the volume is of type LUKS2, the CID and the key are read from LUKS2 JSON token metadata instead. Use [systemd-cryptenroll(1)](systemd-cryptenroll.html) as simple tool for enrolling FIDO2 security tokens, compatible with this automatic mode, which is only available for LUKS2 volumes.\n\nUse **systemd-cryptenroll --fido2-device=list** to list all suitable FIDO2 security tokens currently plugged in, along with their device nodes.\n\nThis option implements the following mechanism: the configured key is hashed via they HMAC keyed hash function the FIDO2 device implements, keyed by a secret key embedded on the device. The resulting hash value is Base64 encoded and used to unlock the LUKS2 volume. As it should not be possible to extract the secret from the hardware token, it should not be possible to retrieve the hashed key given the configured key â€” without possessing the hardware token.\n\nNote that many security tokens that implement FIDO2 also implement PKCS#11, suitable for unlocking volumes via the `pkcs11-uri=` option described above. Typically the newer, simpler FIDO2 standard is preferable.\n\nAdded in version 248."],
[4,486,"Takes a Base64 encoded FIDO2 client ID to use for the FIDO2 unlock operation. If specified, but `fido2-device=` is not, `fido2-device=auto` is implied. If `fido2-device=` is used but `fido2-cid=` is not, the volume must be of LUKS2 type, and the CID is read from the LUKS2 JSON token header. Use [systemd-cryptenroll(1)](systemd-cryptenroll.html) for enrolling a FIDO2 token in the LUKS2 header compatible with this automatic mode.\n\nAdded in version 248."],
[4,487,"Takes a string, configuring the FIDO2 Relying Party (rp) for the FIDO2 unlock operation. If not specified \"`io.systemd.cryptsetup`\" is used, except if the LUKS2 JSON token header contains a different value. It should normally not be necessary to override this.\n\nAdded in version 248."],
[4,488,"Takes either the special value \"`auto`\" or the path to a device node (e.g. `/dev/tpmrm0`) referring to a TPM2 security chip. See below for an example how to set up this mechanism for unlocking an encrypted volume with a TPM2 chip.\n\nUse `tpm2-pcrs=` (see below) to configure the set of TPM2 PCRs to bind the volume unlocking to. Use [systemd-cryptenroll(1)](systemd-cryptenroll.html) as simple tool for enrolling TPM2 security chips in LUKS2 volumes.\n\nIf specified as \"`auto`\" the TPM2 device is automatically discovered. Use **systemd-cryptenroll --tpm2-device=list** to list all suitable TPM2 devices currently available, along with their device nodes.\n\nThis option implements the following mechanism: when enrolling a TPM2 device via **systemd-cryptenroll** on a LUKS2 volume, a randomized key unlocking the volume is generated on the host and loaded into the TPM2 chip where it is encrypted with an asymmetric \"primary\" key pair derived from the TPM2's internal \"seed\" key. Neither the seed key nor the primary key are permitted to ever leave the TPM2 chip â€” however, the now encrypted randomized key may. It is saved in the LUKS2 volume JSON token header. When unlocking the encrypted volume, the primary key pair is generated on the TPM2 chip again (which works as long as the chip's seed key is correctly maintained by the TPM2 chip), which is then used to decrypt (on the TPM2 chip) the encrypted key from the LUKS2 volume JSON token header saved there during enrollment. The resulting decrypted key is then used to unlock the volume. When the randomized key is encrypted the current values of the selected PCRs (see below) are included in the operation, so that different PCR state results in different encrypted keys and the decrypted key can only be recovered if the same PCR state is reproduced.\n\nAdded in version 248."],
[4,489,"Takes a \"`+`\" separated list of numeric TPM2 PCR (i.e. \"Platform Configuration Register\") indexes to bind the TPM2 volume unlocking to. This option is only useful when TPM2 enrollment metadata is not available in the LUKS2 JSON token header already, the way **systemd-cryptenroll** writes it there. If not used (and no metadata in the LUKS2 JSON token header defines it), defaults to a list of a single entry: PCR 7. Assign an empty string to encode a policy that binds the key to no PCRs, making the key accessible to local programs regardless of the current PCR state.\n\nAdded in version 248."],
[4,490,"Takes a boolean argument, defaults to \"`false`\". Controls whether TPM2 volume unlocking is bound to a PIN in addition to PCRs. Similarly, this option is only useful when TPM2 enrollment metadata is not available.\n\nAdded in version 251."],
[4,491,"Takes an absolute path to a TPM2 PCR JSON signature file, as produced by the [systemd-measure(1)](systemd-measure.html) tool. This permits locking LUKS2 volumes to any PCR values for which a valid signature matching a public key specified at key enrollment time can be provided. See [systemd-cryptenroll(1)](systemd-cryptenroll.html) for details on enrolling TPM2 PCR public keys. If this option is not specified but it is attempted to unlock a LUKS2 volume with a signed TPM2 PCR enrollment a suitable signature file `tpm2-pcr-signature.json` is searched for in `/etc/systemd/`, `/run/systemd/`, `/usr/lib/systemd/` (in this order).\n\nAdded in version 252."],
[4,492,"Takes an absolute path to a TPM2 pcrlock policy file, as produced by the [systemd-pcrlock(1)](systemd-pcrlock.html) tool. This permits locking LUKS2 volumes to a local policy of allowed PCR values with variants. See [systemd-cryptenroll(1)](systemd-cryptenroll.html) for details on enrolling TPM2 pcrlock policies. If this option is not specified but it is attempted to unlock a LUKS2 volume with a TPM2 pcrlock enrollment a suitable signature file `pcrlock.json` is searched for in `/run/systemd/` and `/var/lib/systemd/` (in this order).\n\nAdded in version 255."],
[4,493,"Controls whether to measure the volume key of the encrypted volume to a TPM2 PCR. If set to \"no\" (which is the default) no PCR extension is done. If set to \"yes\" the volume key is measured into PCR 15. If set to a decimal integer in the range 0â€¦23 the volume key is measured into the specified PCR. The volume key is measured along with the activated volume name and its UUID. This functionality is particularly useful for the encrypted volume backing the root file system, as it then allows later TPM objects to be securely bound to the root file system and hence the specific installation.\n\nAdded in version 253."],
[4,494,"Selects one or more TPM2 PCR banks to measure the volume key into, as configured with `tpm2-measure-pcr=` above. Multiple banks may be specified, separated by a colon character. If not specified automatically determines available and used banks. Expects a message digest name (e.g. \"`sha1`\", \"`sha256`\", â€¦) as argument, to identify the bank.\n\nAdded in version 253."],
[4,495,"Specifies how long to wait at most for configured security devices (i.e. FIDO2, PKCS#11, TPM2) to show up. Takes a time value in seconds (but other time units may be specified too, see [systemd.time(7)](systemd.time.html) for supported formats). Defaults to 30s. Once the specified timeout elapsed authentication via password is attempted. Note that this timeout applies to waiting for the security device to show up â€” it does not apply to the PIN prompt for the device (should one be needed) or similar. Pass 0 to turn off the time-out and wait forever.\n\nAdded in version 250."],
[4,496,"Takes a boolean argument. If enabled, right before asking the user for a password it is first attempted to unlock the volume with an empty password. This is useful for systems that are initialized with an encrypted volume with only an empty password set, which shall be replaced with a suitable password during first boot, but after activation.\n\nAdded in version 246."],
[4,497,"Specifies how long systemd should wait for a block device to show up before giving up on the entry. The argument is a time in seconds or explicitly specified units of \"`s`\", \"`min`\", \"`h`\", \"`ms`\".\n\nAdded in version 216."],
[2,"cipher","",466,49,null],
[2,"fido2-cid","",486,49,null],
[2,"fido2-device","",485,49,null],
[2,"fido2-rp","",487,49,null],
[2,"hash","",467,49,null],
[2,"header","",468,49,null],
[2,"headless","",482,49,null],
[2,"key-slot","",471,49,null],
[2,"keyfile-offset","",469,49,null],
[2,"keyfile-size","",470,49,null],
[2,"keyfile-timeout","",472,49,null],
[2,"offset","",473,49,null],
[2,"password-echo","yes|no|masked",483,49,null],
[2,"pkcs11-uri","",484,49,null],
[2,"sector-size","",476,49,null],
[2,"size","",475,49,null],
[2,"skip","",474,49,null],
[2,"tcrypt-keyfile","",477,49,null],
[2,"timeout","",479,49,null],
[2,"tmp","",480,49,null],
[2,"token-timeout","",495,49,null],
[2,"tpm2-device","",488,49,null],
[2,"tpm2-measure-bank","",494,49,null],
[2,"tpm2-measure-pcr","",493,49,null],
[2,"tpm2-pcrlock","",492,49,null],
[2,"tpm2-pcrs","",489,49,null],
[2,"tpm2-pin","",490,49,null],
[2,"tpm2-signature","",491,49,null],
[2,"tries","",481,49,null],
[2,"try-empty-password","",496,49,null],
[2,"veracrypt-pim","",478,49,null],
[2,"x-systemd.device-timeout","",497,49,null],
[3,51,"systemd.nspawn(5)","systemd.nspawn â€” Container settings","systemd.nspawn.html"],
[6,10,"Exec"],
[6,11,"Files"],
[6,12,"Network"],
[4,498,"Takes a boolean argument, which defaults to off. If enabled, **systemd-nspawn** will automatically search for an `init` executable and invoke it. In this case, the specified parameters using `Parameters=` are passed as additional arguments to the `init` process. This setting corresponds to the `--boot` switch on the **systemd-nspawn** command line. This option may not be combined with `ProcessTwo=yes`. This option is specified by default in the `systemd-nspawn@.service` template unit.\n\nAdded in version 226."],
[4,499,"Takes a boolean argument, which defaults to off, If enabled, the container is run with a temporary snapshot of its file system that is removed immediately when the container terminates. This is equivalent to the `--ephemeral` command line switch. See [systemd-nspawn(1)](systemd-nspawn.html) for details about the specific options supported.\n\nAdded in version 240."],
[4,500,"Takes a boolean argument, which defaults to off. If enabled, the specified program is run as PID 2. A stub init process is run as PID 1. This setting corresponds to the `--as-pid2` switch on the **systemd-nspawn** command line. This option may not be combined with `Boot=yes`.\n\nAdded in version 229."],
[4,501,"Takes a whitespace-separated list of arguments. Single (\"`'`\") and double (\"`\"`\") quotes may be used around arguments with whitespace. This is either a command line, beginning with the binary name to execute, or â€“ if `Boot=` is enabled â€“ the list of arguments to pass to the init process. This setting corresponds to the command line parameters passed on the **systemd-nspawn** command line.\n\nNote: `Boot=no`, `Parameters=a b \"c c\"` is the same as **systemd-nspawn a b \"c c\"**, and `Boot=yes`, `Parameters=b 'c c'` is the same as **systemd-nspawn --boot b 'c c'**.\n\nAdded in version 226."],
[4,502,"Takes an environment variable assignment consisting of key and value, separated by \"`=`\". Sets an environment variable for the main process invoked in the container. This setting may be used multiple times to set multiple environment variables. It corresponds to the `--setenv=` command line switch.\n\nAdded in version 226."],
[4,503,"Takes a UNIX user name. Specifies the user name to invoke the main process of the container as. This user must be known in the container's user database. This corresponds to the `--user=` command line switch.\n\nAdded in version 226."],
[4,504,"Selects the working directory for the process invoked in the container. Expects an absolute path in the container's file system namespace. This corresponds to the `--chdir=` command line switch.\n\nAdded in version 229."],
[4,505,"Selects a directory to pivot to `/` inside the container when starting up. Takes a single path, or a pair of two paths separated by a colon. Both paths must be absolute, and are resolved in the container's file system namespace. This corresponds to the `--pivot-root=` command line switch.\n\nAdded in version 233."],
[4,506,"Takes a space-separated list of Linux process capabilities (see [capabilities(7)](https://man7.org/linux/man-pages/man7/capabilities.7.html) for details). The `Capability=` setting specifies additional capabilities to pass on top of the default set of capabilities. The `DropCapability=` setting specifies capabilities to drop from the default set. These settings correspond to the `--capability=` and `--drop-capability=` command line switches. Note that `Capability=` is a privileged setting, and only takes effect in `.nspawn` files in `/etc/systemd/nspawn/` and `/run/system/nspawn/` (see above). On the other hand, `DropCapability=` takes effect in all cases. If the special value \"`all`\" is passed, all capabilities are retained (or dropped).\n\nThese settings change the bounding set of capabilities which also limits the ambient capabilities as given with the `AmbientCapability=`.\n\nAdded in version 226."],
[4,507,"Takes a space-separated list of Linux process capabilities (see [capabilities(7)](https://man7.org/linux/man-pages/man7/capabilities.7.html) for details). The `AmbientCapability=` setting specifies capabilities which will be passed to the started program in the inheritable and ambient capability sets. This will grant these capabilities to this process. This setting correspond to the `--ambient-capability=` command line switch.\n\nThe value \"`all`\" is not supported for this setting.\n\nThe setting of `AmbientCapability=` must be covered by the bounding set settings which were established by `Capability=` and `DropCapability=`.\n\nNote that `AmbientCapability=` is a privileged setting (see above).\n\nAdded in version 248."],
[4,508,"Takes a boolean argument that controls the `PR_SET_NO_NEW_PRIVS` flag for the container payload. This is equivalent to the `--no-new-privileges=` command line switch. See [systemd-nspawn(1)](systemd-nspawn.html) for details.\n\nAdded in version 239."],
[4,509,"Specify the process signal to send to the container's PID 1 when nspawn itself receives SIGTERM, in order to trigger an orderly shutdown of the container. Defaults to SIGRTMIN+3 if `Boot=` is used (on systemd-compatible init systems SIGRTMIN+3 triggers an orderly shutdown). For a list of valid signals, see [signal(7)](https://man7.org/linux/man-pages/man7/signal.7.html).\n\nAdded in version 230."],
[4,510,"Configures the kernel personality for the container. This is equivalent to the `--personality=` switch.\n\nAdded in version 226."],
[4,511,"Configures the 128-bit machine ID (UUID) to pass to the container. This is equivalent to the `--uuid=` command line switch. This option is privileged (see above).\n\nAdded in version 226."],
[4,512,"Configures support for usernamespacing. This is equivalent to the `--private-users=` command line switch, and takes the same options. This option is privileged (see above). This option is the default if the `systemd-nspawn@.service` template unit file is used.\n\nAdded in version 230."],
[4,513,"Configures support for notifications from the container's init process. This is equivalent to the `--notify-ready=` command line switch, and takes the same parameters. See [systemd-nspawn(1)](systemd-nspawn.html) for details about the specific options supported.\n\nAdded in version 231."],
[4,514,"Configures the system call filter applied to containers. This is equivalent to the `--system-call-filter=` command line switch, and takes the same list parameter. See [systemd-nspawn(1)](systemd-nspawn.html) for details.\n\nAdded in version 235."],
[4,515,"Configures various types of resource limits applied to containers. This is equivalent to the `--rlimit=` command line switch, and takes the same arguments. See [systemd-nspawn(1)](systemd-nspawn.html) for details.\n\nAdded in version 239."],
[4,516,"Configures the OOM score adjustment value. This is equivalent to the `--oom-score-adjust=` command line switch, and takes the same argument. See [systemd-nspawn(1)](systemd-nspawn.html) for details.\n\nAdded in version 239."],
[4,517,"Configures the CPU affinity. This is equivalent to the `--cpu-affinity=` command line switch, and takes the same argument. See [systemd-nspawn(1)](systemd-nspawn.html) for details.\n\nAdded in version 239."],
[4,518,"Configures the kernel hostname set for the container. This is equivalent to the `--hostname=` command line switch, and takes the same argument. See [systemd-nspawn(1)](systemd-nspawn.html) for details.\n\nAdded in version 239."],
[4,519,"Configures how `/etc/resolv.conf` in the container shall be handled. This is equivalent to the `--resolv-conf=` command line switch, and takes the same argument. See [systemd-nspawn(1)](systemd-nspawn.html) for details.\n\nAdded in version 239."],
[4,520,"Configures how `/etc/localtime` in the container shall be handled. This is equivalent to the `--timezone=` command line switch, and takes the same argument. See [systemd-nspawn(1)](systemd-nspawn.html) for details.\n\nAdded in version 239."],
[4,521,"Configures how to link host and container journal setups. This is equivalent to the `--link-journal=` command line switch, and takes the same parameter. See [systemd-nspawn(1)](systemd-nspawn.html) for details.\n\nAdded in version 239."],
[4,522,"Configures whether to suppress disk synchronization for the container payload. This is equivalent to the `--suppress-sync=` command line switch, and takes the same parameter. See [systemd-nspawn(1)](systemd-nspawn.html) for details.\n\nAdded in version 250."],
[4,523,"Takes a boolean argument, which defaults to off. If specified, the container will be run with a read-only file system. This setting corresponds to the `--read-only` command line switch.\n\nAdded in version 226."],
[4,524,"Takes a boolean argument, or the special value \"`state`\". This configures whether to run the container with volatile state and/or configuration. This option is equivalent to `--volatile=`, see [systemd-nspawn(1)](systemd-nspawn.html) for details about the specific options supported.\n\nAdded in version 226."],
[4,525,"Adds a bind mount from the host into the container. Takes a single path, a pair of two paths separated by a colon, or a triplet of two paths plus an option string separated by colons. This option may be used multiple times to configure multiple bind mounts. This option is equivalent to the command line switches `--bind=` and `--bind-ro=`, see [systemd-nspawn(1)](systemd-nspawn.html) for details about the specific options supported. This setting is privileged (see above).\n\nAdded in version 226."],
[4,526,"Binds a user from the host into the container. This option is equivalent to the command line switch `--bind-user=`, see [systemd-nspawn(1)](systemd-nspawn.html) for details about the specific options supported. This setting is privileged (see above).\n\nAdded in version 249."],
[4,527,"Adds a \"`tmpfs`\" mount to the container. Takes a path or a pair of path and option string, separated by a colon. This option may be used multiple times to configure multiple \"`tmpfs`\" mounts. This option is equivalent to the command line switch `--tmpfs=`, see [systemd-nspawn(1)](systemd-nspawn.html) for details about the specific options supported. This setting is privileged (see above).\n\nAdded in version 226."],
[4,528,"Masks the specified file or directory in the container, by over-mounting it with an empty file node of the same type with the most restrictive access mode. Takes a file system path as argument. This option may be used multiple times to mask multiple files or directories. This option is equivalent to the command line switch `--inaccessible=`, see [systemd-nspawn(1)](systemd-nspawn.html) for details about the specific options supported. This setting is privileged (see above).\n\nAdded in version 242."],
[4,529,"Adds an overlay mount point. Takes a colon-separated list of paths. This option may be used multiple times to configure multiple overlay mounts. This option is equivalent to the command line switches `--overlay=` and `--overlay-ro=`, see [systemd-nspawn(1)](systemd-nspawn.html) for details about the specific options supported. This setting is privileged (see above).\n\nAdded in version 233."],
[4,530,"Configures whether the ownership of the files and directories in the container tree shall be adjusted to the UID/GID range used, if necessary and user namespacing is enabled. This is equivalent to the `--private-users-ownership=` command line switch. This option is privileged (see above).\n\nAdded in version 249."],
[4,531,"Takes a boolean argument, which defaults to off. If enabled, the container will run in its own network namespace and not share network interfaces and configuration with the host. This setting corresponds to the `--private-network` command line switch.\n\nAdded in version 226."],
[4,532,"Takes a boolean argument. Configures whether to create a virtual Ethernet connection (\"`veth`\") between host and the container. This setting implies `Private=yes`. This setting corresponds to the `--network-veth` command line switch. This option is privileged (see above). This option is the default if the `systemd-nspawn@.service` template unit file is used.\n\nAdded in version 226."],
[4,533,"Takes a colon-separated pair of interface names. Configures an additional virtual Ethernet connection (\"`veth`\") between host and the container. The first specified name is the interface name on the host, the second the interface name in the container. The latter may be omitted in which case it is set to the same name as the host side interface. This setting implies `Private=yes`. This setting corresponds to the `--network-veth-extra=` command line switch, and may be used multiple times. It is independent of `VirtualEthernet=`. Note that this option is unrelated to the `Bridge=` setting below, and thus any connections created this way are not automatically added to any bridge device on the host side. This option is privileged (see above).\n\nAdded in version 228."],
[4,534,"Takes a space-separated list of interfaces to add to the container. The interface object is defined either by a single interface name, referencing the name on the host, or a colon-separated pair of interfaces, in which case the first one references the name on the host, and the second one the name in the container. This option corresponds to the `--network-interface=` command line switch and implies `Private=yes`. This option is privileged (see above).\n\nAdded in version 226."],
[4,535,"Takes a space-separated list of interfaces to add MACLVAN or IPVLAN interfaces to, which are then added to the container. The interface object is defined either by a single interface name, referencing the name on the host, or a colon-separated pair of interfaces, in which case the first one references the name on the host, and the second one the name in the container. These options correspond to the `--network-macvlan=` and `--network-ipvlan=` command line switches and imply `Private=yes`. These options are privileged (see above).\n\nAdded in version 226."],
[4,536,"Takes an interface name. This setting implies `VirtualEthernet=yes` and `Private=yes` and has the effect that the host side of the created virtual Ethernet link is connected to the specified bridge interface. This option corresponds to the `--network-bridge=` command line switch. This option is privileged (see above).\n\nAdded in version 226."],
[4,537,"Takes a network zone name. This setting implies `VirtualEthernet=yes` and `Private=yes` and has the effect that the host side of the created virtual Ethernet link is connected to an automatically managed bridge interface named after the passed argument, prefixed with \"`vz-`\". This option corresponds to the `--network-zone=` command line switch. This option is privileged (see above).\n\nAdded in version 230."],
[4,538,"Exposes a TCP or UDP port of the container on the host. This option corresponds to the `--port=` command line switch, see [systemd-nspawn(1)](systemd-nspawn.html) for the precise syntax of the argument this option takes. This option is privileged (see above).\n\nAdded in version 226."],
[2,"AmbientCapability","",507,51,10],
[2,"Bind","",525,51,11],
[2,"BindReadOnly","",525,51,11],
[2,"BindUser","",526,51,11],
[2,"Boot","",498,51,10],
[2,"Bridge","",536,51,12],
[2,"CPUAffinity","",517,51,10],
[2,"Capability","",506,51,10],
[2,"DropCapability","",506,51,10],
[2,"Environment","",502,51,10],
[2,"Ephemeral","",499,51,10],
[2,"Hostname","",518,51,10],
[2,"IPVLAN","",535,51,12],
[2,"Inaccessible","",528,51,11],
[2,"Interface","",534,51,12],
[2,"KillSignal","",509,51,10],
[2,"LimitAS","",515,51,10],
[2,"LimitCORE","",515,51,10],
[2,"LimitCPU","",515,51,10],
[2,"LimitDATA","",515,51,10],
[2,"LimitFSIZE","",515,51,10],
[2,"LimitLOCKS","",515,51,10],
[2,"LimitMEMLOCK","",515,51,10],
[2,"LimitMSGQUEUE","",515,51,10],
[2,"LimitNICE","",515,51,10],
[2,"LimitNOFILE","",515,51,10],
[2,"LimitNPROC","",515,51,10],
[2,"LimitRSS","",515,51,10],
[2,"LimitRTPRIO","",515,51,10],
[2,"LimitRTTIME","",515,51,10],
[2,"LimitSIGPENDING","",515,51,10],
[2,"LimitSTACK","",515,51,10],
[2,"LinkJournal","",521,51,10],
[2,"MACVLAN","",535,51,12],
[2,"MachineID","",511,51,10],
[2,"NoNewPrivileges","",508,51,10],
[2,"NotifyReady","",513,51,10],
[2,"OOMScoreAdjust","",516,51,10],
[2,"Overlay","",529,51,11],
[2,"OverlayReadOnly","",529,51,11],
[2,"Parameters","",501,51,10],
[2,"Personality","",510,51,10],
[2,"PivotRoot","",505,51,10],
[2,"Port","",538,51,12],
[2,"Private","",531,51,12],
[2,"PrivateUsers","",512,51,10],
[2,"PrivateUsersOwnership","",530,51,11],
[2,"ProcessTwo","",500,51,10],
[2,"ReadOnly","",523,51,11],
[2,"ResolvConf","",519,51,10],
[2,"SuppressSync","",522,51,10],
[2,"SystemCallFilter","",514,51,10],
[2,"TemporaryFileSystem","",527,51,11],
[2,"Timezone","",520,51,10],
[2,"User","",503,51,10],
[2,"VirtualEthernet","",532,51,12],
[2,"VirtualEthernetExtra","",533,51,12],
[2,"Volatile","",524,51,11],
[2,"WorkingDirectory","",504,51,10],
[2,"Zone","",537,51,12],
[3,52,"systemd-sleep.conf(5)","systemd-sleep.conf, sleep.conf.d â€” Suspend and hibernation configuration file","systemd-sleep.conf.html"],
[4,539,"By default any power-saving mode is advertised if possible (i.e. the kernel supports that mode, the necessary resources are available). Those switches can be used to disable specific modes.\n\nIf `AllowHibernation=no` or `AllowSuspend=no` is used, this implies `AllowSuspendThenHibernate=no` and `AllowHybridSleep=no`, since those methods use both suspend and hibernation internally. `AllowSuspendThenHibernate=yes` and `AllowHybridSleep=yes` can be used to override and enable those specific modes.\n\nAdded in version 240."],
[4,540,"The string to be written to `/sys/power/disk` by [systemd-hibernate.service(8)](systemd-hibernate.service.html). More than one value can be specified by separating multiple values with whitespace. They will be tried in turn, until one is written without error. If none of the writes succeed, the operation will be aborted.\n\nThe allowed set of values is determined by the kernel and is shown in the file itself (use **cat /sys/power/disk** to display). See the kernel documentation page [Basic sysfs Interfaces for System Suspend and Hibernation](https://www.kernel.org/doc/html/latest/admin-guide/pm/sleep-states.html#basic-sysfs-interfaces-for-system-suspend-and-hibernation) for more details.\n\n[systemd-suspend-then-hibernate.service(8)](systemd-suspend-then-hibernate.service.html) uses the value of `HibernateMode=` when hibernating.\n\nAdded in version 203."],
[4,541,"The string to be written to `/sys/power/state` by [systemd-suspend.service(8)](systemd-suspend.service.html). More than one value can be specified by separating multiple values with whitespace. They will be tried in turn, until one is written without error. If none of the writes succeed, the operation will be aborted.\n\nThe allowed set of values is determined by the kernel and is shown in the file itself (use **cat /sys/power/state** to display). See [Basic sysfs Interfaces for System Suspend and Hibernation](https://www.kernel.org/doc/html/latest/admin-guide/pm/sleep-states.html#basic-sysfs-interfaces-for-system-suspend-and-hibernation) for more details.\n\n[systemd-suspend-then-hibernate.service(8)](systemd-suspend-then-hibernate.service.html) uses this value when suspending.\n\nAdded in version 203."],
[4,542,"The amount of time the system spends in suspend mode before the system is automatically put into hibernate mode. Only used by [systemd-suspend-then-hibernate.service(8)](systemd-suspend-then-hibernate.service.html). If the system has a battery, then defaults to the estimated timespan until the system battery charge level goes down to 5%. If the system has no battery, then defaults to 2h.\n\nAdded in version 239."],
[4,543,"The RTC alarm will wake the system after the specified timespan to measure the system battery capacity level and estimate battery discharging rate, which is used for estimating timespan until the system battery charge level goes down to 5%. Only used by [systemd-suspend-then-hibernate.service(8)](systemd-suspend-then-hibernate.service.html). Defaults to 1h.\n\nAdded in version 253."],
[2,"AllowHibernation","",539,52,null],
[2,"AllowHybridSleep","",539,52,null],
[2,"AllowSuspend","",539,52,null],
[2,"AllowSuspendThenHibernate","",539,52,null],
[2,"HibernateDelaySec","",542,52,null],
[2,"HibernateMode","",540,52,null],
[2,"SuspendEstimationSec","",543,52,null],
[2,"SuspendState","",541,52,null],
[3,53,"journald.conf(5)","journald.conf, journald.conf.d, journald@.conf â€” Journal service configuration files","journald.conf.html"],
[6,13,"Journal"],
[4,544,"Controls where to store journal data. One of \"`volatile`\", \"`persistent`\", \"`auto`\" and \"`none`\". If \"`volatile`\", journal log data will be stored only in memory, i.e. below the `/run/log/journal` hierarchy (which is created if needed). If \"`persistent`\", data will be stored preferably on disk, i.e. below the `/var/log/journal` hierarchy (which is created if needed), with a fallback to `/run/log/journal` (which is created if needed), during early boot and if the disk is not writable. \"`auto`\" behaves like \"`persistent`\" if the `/var/log/journal` directory exists, and \"`volatile`\" otherwise (the existence of the directory controls the storage mode). \"`none`\" turns off all storage, all log data received will be dropped (but forwarding to other targets, such as the console, the kernel log buffer, or a syslog socket will still work). Defaults to \"`auto`\" in the default journal namespace, and \"`persistent`\" in all others.\n\nNote that journald will initially use volatile storage, until a call to **journalctl --flush** (or sending `SIGUSR1` to journald) will cause it to switch to persistent logging (under the conditions mentioned above). This is done automatically on boot via \"`systemd-journal-flush.service`\".\n\nNote that when this option is changed to \"`volatile`\", existing persistent data is not removed. In the other direction, [journalctl(1)](journalctl.html) with the `--flush` option may be used to move volatile data to persistent storage.\n\nWhen journal namespacing (see `LogNamespace=` in [systemd.exec(5)](systemd.exec.html)) is used, setting `Storage=` to \"`volatile`\" or \"`auto`\" will not have an effect on the creation of the per-namespace logs directory in `/var/log/journal/`, as the `systemd-journald@.service` service file by default carries `LogsDirectory=`. To turn that off, add a unit file drop-in file that sets `LogsDirectory=` to an empty string.\n\nNote that per-user journal files are not supported unless persistent storage is enabled, thus making **journalctl --user** unavailable.\n\nAdded in version 186."],
[4,545,"Can take a boolean value. If enabled (the default), data objects that shall be stored in the journal and are larger than the default threshold of 512 bytes are compressed before they are written to the file system. It can also be set to a number of bytes to specify the compression threshold directly. Suffixes like K, M, and G can be used to specify larger units."],
[4,546,"Takes a boolean value. If enabled (the default), and a sealing key is available (as created by [journalctl(1)](journalctl.html)'s `--setup-keys` command), Forward Secure Sealing (FSS) for all persistent journal files is enabled. FSS is based on [Seekable Sequential Key Generators](https://eprint.iacr.org/2013/397) by G. A. Marson and B. Poettering (doi:10.1007/978-3-642-40203-6\\_7) and may be used to protect journal files from unnoticed alteration.\n\nAdded in version 189."],
[4,547,"Controls whether to split up journal files per user, either \"`uid`\" or \"`none`\". Split journal files are primarily useful for access control: on UNIX/Linux access control is managed per file, and the journal daemon will assign users read access to their journal files. If \"`uid`\", all regular users (with UID outside the range of system users, dynamic service users, and the nobody user) will each get their own journal files, and system users will log to the system journal. See [Users, Groups, UIDs and GIDs on systemd systems](https://systemd.io/UIDS-GIDS) for more details about UID ranges. If \"`none`\", journal files are not split up by user and all messages are instead stored in the single system journal. In this mode unprivileged users generally do not have access to their own log data. Note that splitting up journal files by user is only available for journals stored persistently. If journals are stored on volatile storage (see `Storage=` above), only a single journal file is used. Defaults to \"`uid`\".\n\nAdded in version 190."],
[4,548,"Configures the rate limiting that is applied to all messages generated on the system. If, in the time interval defined by `RateLimitIntervalSec=`, more messages than specified in `RateLimitBurst=` are logged by a service, all further messages within the interval are dropped until the interval is over. A message about the number of dropped messages is generated. This rate limiting is applied per-service, so that two services which log do not interfere with each other's limits. Defaults to 10000 messages in 30s. The time specification for `RateLimitIntervalSec=` may be specified in the following units: \"`s`\", \"`min`\", \"`h`\", \"`ms`\", \"`us`\". To turn off any kind of rate limiting, set either value to 0.\n\nNote that the effective rate limit is multiplied by a factor derived from the available free disk space for the journal. Currently, this factor is calculated using the base 2 logarithm.\n\n**TableÂ 1.Â Example `RateLimitBurst=` rate modifications by the available disk space**\n\nAvailable Disk Space\n\nBurst Multiplier\n\n<= 1MB\n\n1\n\n<= 16MB\n\n2\n\n<= 256MB\n\n3\n\n<= 4GB\n\n4\n\n<= 64GB\n\n5\n\n<= 1TB\n\n6\n\n  \n\nIf a service provides rate limits for itself through `LogRateLimitIntervalSec=` and/or `LogRateLimitBurst=` in [systemd.exec(5)](systemd.exec.html), those values will override the settings specified here."],
[4,549,"Enforce size limits on the journal files stored. The options prefixed with \"`System`\" apply to the journal files when stored on a persistent file system, more specifically `/var/log/journal`. The options prefixed with \"`Runtime`\" apply to the journal files when stored on a volatile in-memory file system, more specifically `/run/log/journal`. The former is used only when `/var/` is mounted, writable, and the directory `/var/log/journal` exists. Otherwise, only the latter applies. Note that this means that during early boot and if the administrator disabled persistent logging, only the latter options apply, while the former apply if persistent logging is enabled and the system is fully booted up. **journalctl** and **systemd-journald** ignore all files with names not ending with \"`.journal`\" or \"`.journal~`\", so only such files, located in the appropriate directories, are taken into account when calculating current disk usage.\n\n`SystemMaxUse=` and `RuntimeMaxUse=` control how much disk space the journal may use up at most. `SystemKeepFree=` and `RuntimeKeepFree=` control how much disk space systemd-journald shall leave free for other uses. **systemd-journald** will respect both limits and use the smaller of the two values.\n\nThe first pair defaults to 10% and the second to 15% of the size of the respective file system, but each value is capped to 4G. If the file system is nearly full and either `SystemKeepFree=` or `RuntimeKeepFree=` are violated when systemd-journald is started, the limit will be raised to the percentage that is actually free. This means that if there was enough free space before and journal files were created, and subsequently something else causes the file system to fill up, journald will stop using more space, but it will not be removing existing files to reduce the footprint again, either. Also note that only archived files are deleted to reduce the space occupied by journal files. This means that, in effect, there might still be more space used than `SystemMaxUse=` or `RuntimeMaxUse=` limit after a vacuuming operation is complete.\n\n`SystemMaxFileSize=` and `RuntimeMaxFileSize=` control how large individual journal files may grow at most. This influences the granularity in which disk space is made available through rotation, i.e. deletion of historic data. Defaults to one eighth of the values configured with `SystemMaxUse=` and `RuntimeMaxUse=` capped to 128M, so that usually seven rotated journal files are kept as history. If the journal compact mode is enabled (enabled by default), the maximum file size is capped to 4G.\n\nSpecify values in bytes or use K, M, G, T, P, E as units for the specified sizes (equal to 1024, 1024Â², â€¦ bytes). Note that size limits are enforced synchronously when journal files are extended, and no explicit rotation step triggered by time is needed.\n\n`SystemMaxFiles=` and `RuntimeMaxFiles=` control how many individual journal files to keep at most. Note that only archived files are deleted to reduce the number of files until this limit is reached; active files will stay around. This means that, in effect, there might still be more journal files around in total than this limit after a vacuuming operation is complete. This setting defaults to 100."],
[4,550,"The maximum time to store entries in a single journal file before rotating to the next one. Normally, time-based rotation should not be required as size-based rotation with options such as `SystemMaxFileSize=` should be sufficient to ensure that journal files do not grow without bounds. However, to ensure that not too much data is lost at once when old journal files are deleted, it might make sense to change this value from the default of one month. Set to 0 to turn off this feature. This setting takes time values which may be suffixed with the units \"`year`\", \"`month`\", \"`week`\", \"`day`\", \"`h`\" or \"`m`\" to override the default time unit of seconds.\n\nAdded in version 195."],
[4,551,"The maximum time to store journal entries. This controls whether journal files containing entries older than the specified time span are deleted. Normally, time-based deletion of old journal files should not be required as size-based deletion with options such as `SystemMaxUse=` should be sufficient to ensure that journal files do not grow without bounds. However, to enforce data retention policies, it might make sense to change this value from the default of 0 (which turns off this feature). This setting also takes time values which may be suffixed with the units \"`year`\", \"`month`\", \"`week`\", \"`day`\", \"`h`\" or \" `m`\" to override the default time unit of seconds.\n\nAdded in version 195."],
[4,552,"The timeout before synchronizing journal files to disk. After syncing, journal files are placed in the OFFLINE state. Note that syncing is unconditionally done immediately after a log message of priority CRIT, ALERT or EMERG has been logged. This setting hence applies only to messages of the levels ERR, WARNING, NOTICE, INFO, DEBUG. The default timeout is 5 minutes.\n\nAdded in version 199."],
[4,553,"Control whether log messages received by the journal daemon shall be forwarded to a traditional syslog daemon, to the kernel log buffer (kmsg), to the system console, or sent as wall messages to all logged-in users. These options take boolean arguments. If forwarding to syslog is enabled but nothing reads messages from the socket, forwarding to syslog has no effect. By default, only forwarding to wall is enabled. These settings may be overridden at boot time with the kernel command line options \"`systemd.journald.forward_to_syslog`\", \"`systemd.journald.forward_to_kmsg`\", \"`systemd.journald.forward_to_console`\", and \"`systemd.journald.forward_to_wall`\". If the option name is specified without \"`=`\" and the following argument, true is assumed. Otherwise, the argument is parsed as a boolean.\n\nWhen forwarding to the console, the TTY to log to can be changed with `TTYPath=`, described below.\n\nWhen forwarding to the kernel log buffer (kmsg), make sure to select a suitably large size for the log buffer, for example by adding \"`log_buf_len=8M`\" to the kernel command line. **systemd** will automatically disable kernel's rate-limiting applied to userspace processes (equivalent to setting \"`printk.devkmsg=on`\")."],
[4,554,"Controls the maximum log level of messages that are stored in the journal, forwarded to syslog, kmsg, the console or wall (if that is enabled, see above). As argument, takes one of \"`emerg`\", \"`alert`\", \"`crit`\", \"`err`\", \"`warning`\", \"`notice`\", \"`info`\", \"`debug`\", or integer values in the range of 0â€“7 (corresponding to the same levels). Messages equal or below the log level specified are stored/forwarded, messages above are dropped. Defaults to \"`debug`\" for `MaxLevelStore=` and `MaxLevelSyslog=`, to ensure that the all messages are stored in the journal and forwarded to syslog. Defaults to \"`notice`\" for `MaxLevelKMsg=`, \"`info`\" for `MaxLevelConsole=`, and \"`emerg`\" for `MaxLevelWall=`. These settings may be overridden at boot time with the kernel command line options \"`systemd.journald.max_level_store=`\", \"`systemd.journald.max_level_syslog=`\", \"`systemd.journald.max_level_kmsg=`\", \"`systemd.journald.max_level_console=`\", \"`systemd.journald.max_level_wall=`\".\n\nAdded in version 185."],
[4,555,"Takes a boolean value. If enabled **systemd-journal** processes `/dev/kmsg` messages generated by the kernel. In the default journal namespace this option is enabled by default, it is disabled in all others.\n\nAdded in version 235."],
[4,556,"Takes a boolean value. If enabled **systemd-journald** will turn on kernel auditing on start-up. If disabled it will turn it off. If unset it will neither enable nor disable it, leaving the previous state unchanged. This means if another tool turns on auditing even if **systemd-journald** left it off, it will still collect the generated messages. Defaults to on.\n\nNote that this option does not control whether **systemd-journald** collects generated audit records, it just controls whether it tells the kernel to generate them. If you need to prevent **systemd-journald** from collecting the generated messages, the socket unit \"`systemd-journald-audit.socket`\" can be disabled and in this case this setting is without effect.\n\nAdded in version 246."],
[4,557,"Change the console TTY to use if `ForwardToConsole=yes` is used. Defaults to `/dev/console`.\n\nAdded in version 185."],
[4,558,"The maximum line length to permit when converting stream logs into record logs. When a systemd unit's standard output/error are connected to the journal via a stream socket, the data read is split into individual log records at newline (\"`\\n`\", ASCII 10) and `NUL` characters. If no such delimiter is read for the specified number of bytes a hard log record boundary is artificially inserted, breaking up overly long lines into multiple log records. Selecting overly large values increases the possible memory usage of the Journal daemon for each stream client, as in the worst case the journal daemon needs to buffer the specified number of bytes in memory before it can flush a new log record to disk. Also note that permitting overly large line maximum line lengths affects compatibility with traditional log protocols as log records might not fit anymore into a single `AF_UNIX` or `AF_INET` datagram. Takes a size in bytes. If the value is suffixed with K, M, G or T, the specified size is parsed as Kilobytes, Megabytes, Gigabytes, or Terabytes (with the base 1024), respectively. Defaults to 48K, which is relatively large but still small enough so that log records likely fit into network datagrams along with extra room for metadata. Note that values below 79 are not accepted and will be bumped to 79.\n\nAdded in version 235."],
[2,"Audit","",556,53,13],
[2,"Compress","",545,53,13],
[2,"ForwardToConsole","",553,53,13],
[2,"ForwardToKMsg","",553,53,13],
[2,"ForwardToSyslog","",553,53,13],
[2,"ForwardToWall","",553,53,13],
[2,"LineMax","",558,53,13],
[2,"MaxFileSec","",550,53,13],
[2,"MaxLevelConsole","",554,53,13],
[2,"MaxLevelKMsg","",554,53,13],
[2,"MaxLevelStore","",554,53,13],
[2,"MaxLevelSyslog","",554,53,13],
[2,"MaxLevelWall","",554,53,13],
[2,"MaxRetentionSec","",551,53,13],
[2,"RateLimitBurst","",548,53,13],
[2,"RateLimitIntervalSec","",548,53,13],
[2,"ReadKMsg","",555,53,13],
[2,"RuntimeKeepFree","",549,53,13],
[2,"RuntimeMaxFileSize","",549,53,13],
[2,"RuntimeMaxFiles","",549,53,13],
[2,"RuntimeMaxUse","",549,53,13],
[2,"Seal","",546,53,13],
[2,"SplitMode","",547,53,13],
[2,"Storage","",544,53,13],
[2,"SyncIntervalSec","",552,53,13],
[2,"SystemKeepFree","",549,53,13],
[2,"SystemMaxFileSize","",549,53,13],
[2,"SystemMaxFiles","",549,53,13],
[2,"SystemMaxUse","",549,53,13],
[2,"TTYPath","",557,53,13],
[3,54,"systemd-system.conf(5)","systemd-system.conf, system.conf.d, systemd-user.conf, user.conf.d â€” System and session service manager configuration files","systemd-system.conf.html"],
[4,559,"Configures various parameters of basic manager operation. These options may be overridden by the respective process and kernel command line arguments. See [systemd(1)](systemd.html) for details.\n\nAdded in version 198."],
[4,560,"Defines what action will be performed if user presses Ctrl-Alt-Delete more than 7 times in 2s. Can be set to \"`reboot-force`\", \"`poweroff-force`\", \"`reboot-immediate`\", \"`poweroff-immediate`\" or disabled with \"`none`\". Defaults to \"`reboot-force`\".\n\nAdded in version 232."],
[4,561,"Configures the CPU affinity for the service manager as well as the default CPU affinity for all forked off processes. Takes a list of CPU indices or ranges separated by either whitespace or commas. CPU ranges are specified by the lower and upper CPU indices separated by a dash. This option may be specified more than once, in which case the specified CPU affinity masks are merged. If the empty string is assigned, the mask is reset, all assignments prior to this will have no effect. Individual services may override the CPU affinity for their processes with the `CPUAffinity=` setting in unit files, see [systemd.exec(5)](systemd.exec.html).\n\nAdded in version 198."],
[4,562,"Configures the NUMA memory policy for the service manager and the default NUMA memory policy for all forked off processes. Individual services may override the default policy with the `NUMAPolicy=` setting in unit files, see [systemd.exec(5)](systemd.exec.html).\n\nAdded in version 243."],
[4,563,"Configures the NUMA node mask that will be associated with the selected NUMA policy. Note that `default` and `local` NUMA policies don't require explicit NUMA node mask and value of the option can be empty. Similarly to `NUMAPolicy=`, value can be overridden by individual services in unit files, see [systemd.exec(5)](systemd.exec.html).\n\nAdded in version 243."],
[4,564,"Configure the hardware watchdog at runtime and at reboot. Takes a timeout value in seconds (or in other time units if suffixed with \"`ms`\", \"`min`\", \"`h`\", \"`d`\", \"`w`\"), or the special strings \"`off`\" or \"`default`\". If set to \"`off`\" (alternatively: \"`0`\") the watchdog logic is disabled: no watchdog device is opened, configured, or pinged. If set to the special string \"`default`\" the watchdog is opened and pinged in regular intervals, but the timeout is not changed from the default. If set to any other time value the watchdog timeout is configured to the specified value (or a value close to it, depending on hardware capabilities).\n\nIf `RuntimeWatchdogSec=` is set to a non-zero value, the watchdog hardware (`/dev/watchdog0` or the path specified with `WatchdogDevice=` or the kernel option `systemd.watchdog-device=`) will be programmed to automatically reboot the system if it is not contacted within the specified timeout interval. The system manager will ensure to contact it at least once in half the specified timeout interval. This feature requires a hardware watchdog device to be present, as it is commonly the case in embedded and server systems. Not all hardware watchdogs allow configuration of all possible reboot timeout values, in which case the closest available timeout is picked.\n\n`RebootWatchdogSec=` may be used to configure the hardware watchdog when the system is asked to reboot. It works as a safety net to ensure that the reboot takes place even if a clean reboot attempt times out. Note that the `RebootWatchdogSec=` timeout applies only to the second phase of the reboot, i.e. after all regular services are already terminated, and after the system and service manager process (PID 1) got replaced by the `systemd-shutdown` binary, see system [bootup(7)](bootup.html) for details. During the first phase of the shutdown operation the system and service manager remains running and hence `RuntimeWatchdogSec=` is still honoured. In order to define a timeout on this first phase of system shutdown, configure `JobTimeoutSec=` and `JobTimeoutAction=` in the \\[Unit\\] section of the `shutdown.target` unit. By default `RuntimeWatchdogSec=` defaults to 0 (off), and `RebootWatchdogSec=` to 10min.\n\n`KExecWatchdogSec=` may be used to additionally enable the watchdog when kexec is being executed rather than when rebooting. Note that if the kernel does not reset the watchdog on kexec (depending on the specific hardware and/or driver), in this case the watchdog might not get disabled after kexec succeeds and thus the system might get rebooted, unless `RuntimeWatchdogSec=` is also enabled at the same time. For this reason it is recommended to enable `KExecWatchdogSec=` only if `RuntimeWatchdogSec=` is also enabled.\n\nThese settings have no effect if a hardware watchdog is not available.\n\nAdded in version 198."],
[4,565,"Configure the hardware watchdog device pre-timeout value. Takes a timeout value in seconds (or in other time units similar to `RuntimeWatchdogSec=`). A watchdog pre-timeout is a notification generated by the watchdog before the watchdog reset might occur in the event the watchdog has not been serviced. This notification is handled by the kernel and can be configured to take an action (i.e. generate a kernel panic) using `RuntimeWatchdogPreGovernor=`. Not all watchdog hardware or drivers support generating a pre-timeout and depending on the state of the system, the kernel may be unable to take the configured action before the watchdog reboot. The watchdog will be configured to generate the pre-timeout event at the amount of time specified by `RuntimeWatchdogPreSec=` before the runtime watchdog timeout (set by `RuntimeWatchdogSec=`). For example, if the we have `RuntimeWatchdogSec=30` and `RuntimeWatchdogPreSec=10`, then the pre-timeout event will occur if the watchdog has not pinged for 20s (10s before the watchdog would fire). By default, `RuntimeWatchdogPreSec=` defaults to 0 (off). The value set for `RuntimeWatchdogPreSec=` must be smaller than the timeout value for `RuntimeWatchdogSec=`. This setting has no effect if a hardware watchdog is not available or the hardware watchdog does not support a pre-timeout and will be ignored by the kernel if the setting is greater than the actual watchdog timeout.\n\nAdded in version 251."],
[4,566,"Configure the action taken by the hardware watchdog device when the pre-timeout expires. The default action for the pre-timeout event depends on the kernel configuration, but it is usually to log a kernel message. For a list of valid actions available for a given watchdog device, check the content of the ``/sys/class/watchdog/watchdog_`X`_/pretimeout_available_governors`` file. Typically, available governor types are `noop` and `panic`. Availability, names and functionality might vary depending on the specific device driver in use. If the `pretimeout_available_governors` sysfs file is empty, the governor might be built as a kernel module and might need to be manually loaded (e.g. `pretimeout_noop.ko`), or the watchdog device might not support pre-timeouts.\n\nAdded in version 251."],
[4,567,"Configure the hardware watchdog device that the runtime and shutdown watchdog timers will open and use. Defaults to `/dev/watchdog0`. This setting has no effect if a hardware watchdog is not available.\n\nAdded in version 236."],
[4,568,"Controls which capabilities to include in the capability bounding set for PID 1 and its children. See [capabilities(7)](https://man7.org/linux/man-pages/man7/capabilities.7.html) for details. Takes a whitespace-separated list of capability names as read by [cap\\_from\\_name(3)](https://www.mankier.com/3/cap_from_name). Capabilities listed will be included in the bounding set, all others are removed. If the list of capabilities is prefixed with ~, all but the listed capabilities will be included, the effect of the assignment inverted. Note that this option also affects the respective capabilities in the effective, permitted and inheritable capability sets. The capability bounding set may also be individually configured for units using the `CapabilityBoundingSet=` directive for units, but note that capabilities dropped for PID 1 cannot be regained in individual units, they are lost for good.\n\nAdded in version 198."],
[4,569,"Takes a boolean argument. If true, ensures that PID 1 and all its children can never gain new privileges through [execve(2)](https://man7.org/linux/man-pages/man2/execve.2.html) (e.g. via setuid or setgid bits, or filesystem capabilities). Defaults to false. General purpose distributions commonly rely on executables with setuid or setgid bits and will thus not function properly with this option enabled. Individual units cannot disable this option. Also see [No New Privileges Flag](https://docs.kernel.org/userspace-api/no_new_privs.html).\n\nAdded in version 239."],
[4,570,"Takes a space-separated list of architecture identifiers. Selects from which architectures system calls may be invoked on this system. This may be used as an effective way to disable invocation of non-native binaries system-wide, for example to prohibit execution of 32-bit x86 binaries on 64-bit x86-64 systems. This option operates system-wide, and acts similar to the `SystemCallArchitectures=` setting of unit files, see [systemd.exec(5)](systemd.exec.html) for details. This setting defaults to the empty list, in which case no filtering of system calls based on architecture is applied. Known architecture identifiers are \"`x86`\", \"`x86-64`\", \"`x32`\", \"`arm`\" and the special identifier \"`native`\". The latter implicitly maps to the native architecture of the system (or more specifically, the architecture the system manager was compiled for). Set this setting to \"`native`\" to prohibit execution of any non-native binaries. When a binary executes a system call of an architecture that is not listed in this setting, it will be immediately terminated with the SIGSYS signal.\n\nAdded in version 209."],
[4,571,"Sets the timer slack in nanoseconds for PID 1, which is inherited by all executed processes, unless overridden individually, for example with the `TimerSlackNSec=` setting in service units (for details see [systemd.exec(5)](systemd.exec.html)). The timer slack controls the accuracy of wake-ups triggered by system timers. See [prctl(2)](https://man7.org/linux/man-pages/man2/prctl.2.html) for more information. Note that in contrast to most other time span definitions this parameter takes an integer value in nano-seconds if no unit is specified. The usual time units are understood too.\n\nAdded in version 198."],
[4,572,"Takes `name`, `description` or `combined` as the value. If `name`, the system manager will use unit names in status messages (e.g. \"`systemd-journald.service`\"), instead of the longer and more informative descriptions set with `Description=` (e.g. \"`Journal Logging Service`\"). If `combined`, the system manager will use both unit names and descriptions in status messages (e.g. \"`systemd-journald.service - Journal Logging Service`\").\n\nSee [systemd.unit(5)](systemd.unit.html) for details about unit names and `Description=`.\n\nAdded in version 243."],
[4,573,"Sets the default accuracy of timer units. This controls the global default for the `AccuracySec=` setting of timer units, see [systemd.timer(5)](systemd.timer.html) for details. `AccuracySec=` set in individual units override the global default for the specific unit. Defaults to 1min. Note that the accuracy of timer units is also affected by the configured timer slack for PID 1, see `TimerSlackNSec=` above.\n\nAdded in version 212."],
[4,574,"Configures the default timeouts for starting, stopping and aborting of units, as well as the default time to sleep between automatic restarts of units, as configured per-unit in `TimeoutStartSec=`, `TimeoutStopSec=`, `TimeoutAbortSec=` and `RestartSec=` (for services, see [systemd.service(5)](systemd.service.html) for details on the per-unit settings). For non-service units, `DefaultTimeoutStartSec=` sets the default `TimeoutSec=` value.\n\n`DefaultTimeoutStartSec=` and `DefaultTimeoutStopSec=` default to 90 s in the system manager and 90 s in the user manager. `DefaultTimeoutAbortSec=` is not set by default so that all units fall back to `TimeoutStopSec=`. `DefaultRestartSec=` defaults to 100 ms.\n\nAdded in version 209."],
[4,575,"Configures the default timeout for waiting for devices. It can be changed per device via the `x-systemd.device-timeout=` option in `/etc/fstab` and `/etc/crypttab` (see [systemd.mount(5)](systemd.mount.html), [crypttab(5)](crypttab.html)). Defaults to 90 s in the system manager and 90 s in the user manager.\n\nAdded in version 252."],
[4,576,"Configure the default unit start rate limiting, as configured per-service by `StartLimitIntervalSec=` and `StartLimitBurst=`. See [systemd.service(5)](systemd.service.html) for details on the per-service settings. `DefaultStartLimitIntervalSec=` defaults to 10s. `DefaultStartLimitBurst=` defaults to 5.\n\nAdded in version 209."],
[4,577,"Configures environment variables passed to all executed processes. Takes a space-separated list of variable assignments. See [environ(7)](https://man7.org/linux/man-pages/man7/environ.7.html) for details about environment variables.\n\nSimple \"`%`\"-specifier expansion is supported, see below for a list of supported specifiers.\n\nExample:\n\nDefaultEnvironment=\"VAR1=word1 word2\" VAR2=word3 \"VAR3=word 5 6\"\n\nSets three variables \"`VAR1`\", \"`VAR2`\", \"`VAR3`\".\n\nAdded in version 205."],
[4,578,"Takes the same arguments as `DefaultEnvironment=`, see above. Sets environment variables just for the manager process itself. In contrast to user managers, these variables are not inherited by processes spawned by the system manager, use `DefaultEnvironment=` for that. Note that these variables are merged into the existing environment block. In particular, in case of the system manager, this includes variables set by the kernel based on the kernel command line.\n\nSetting environment variables for the manager process may be useful to modify its behaviour. See [Known Environment Variables](https://systemd.io/ENVIRONMENT) for a descriptions of some variables understood by **systemd**.\n\nSimple \"`%`\"-specifier expansion is supported, see below for a list of supported specifiers.\n\nAdded in version 248."],
[4,579,"Configure the default resource accounting settings, as configured per-unit by `CPUAccounting=`, `MemoryAccounting=`, `TasksAccounting=`, `IOAccounting=` and `IPAccounting=`. See [systemd.resource-control(5)](systemd.resource-control.html) for details on the per-unit settings.\n\n`DefaultCPUAccounting=` defaults to yes when running on kernel â‰¥4.15, and no on older versions. `DefaultMemoryAccounting=` defaults to yes. `DefaultTasksAccounting=` defaults to yes. The other settings default to no.\n\nAdded in version 211."],
[4,580,"Configure the default value for the per-unit `TasksMax=` setting. See [systemd.resource-control(5)](systemd.resource-control.html) for details. This setting applies to all unit types that support resource control settings, with the exception of slice units. Defaults to 15% of the minimum of `kernel.pid_max=`, `kernel.threads-max=` and root cgroup `pids.max`. Kernel has a default value for `kernel.pid_max=` and an algorithm of counting in case of more than 32 cores. For example, with the default `kernel.pid_max=`, `DefaultTasksMax=` defaults to 4915, but might be greater in other systems or smaller in OS containers.\n\nAdded in version 228."],
[4,581,"These settings control various default resource limits for processes executed by units. See [setrlimit(2)](https://man7.org/linux/man-pages/man2/setrlimit.2.html) for details. These settings may be overridden in individual units using the corresponding `LimitXXX=` directives and they accept the same parameter syntax, see [systemd.exec(5)](systemd.exec.html) for details. Note that these resource limits are only defaults for units, they are not applied to the service manager process (i.e. PID 1) itself.\n\nMost of these settings are unset, which means the resource limits are inherited from the kernel or, if invoked in a container, from the container manager. However, the following have defaults:\n\n*   `DefaultLimitNOFILE=` defaults to 1024:524288.\n    \n*   `DefaultLimitMEMLOCK=` defaults to 8M.\n    \n*   `DefaultLimitCORE=` does not have a default but it is worth mentioning that `RLIMIT_CORE` is set to \"`infinity`\" by PID 1 which is inherited by its children.\n    \n\nNote that the service manager internally in PID 1 bumps `RLIMIT_NOFILE` and `RLIMIT_MEMLOCK` to higher values, however the limit is reverted to the mentioned defaults for all child processes forked off.\n\nAdded in version 198."],
[4,582,"Configure the default policy for reacting to processes being killed by the Linux Out-Of-Memory (OOM) killer or **systemd-oomd**. This may be used to pick a global default for the per-unit `OOMPolicy=` setting. See [systemd.service(5)](systemd.service.html) for details. Note that this default is not used for services that have `Delegate=` turned on.\n\nAdded in version 243."],
[4,583,"Configures the default OOM score adjustments of processes run by the service manager. This defaults to unset (meaning the forked off processes inherit the service manager's OOM score adjustment value), except if the service manager is run for an unprivileged user, in which case this defaults to the service manager's OOM adjustment value plus 100 (this makes service processes slightly more likely to be killed under memory pressure than the manager itself). This may be used to pick a global default for the per-unit `OOMScoreAdjust=` setting. See [systemd.exec(5)](systemd.exec.html) for details. Note that this setting has no effect on the OOM score adjustment value of the service manager process itself, it retains the original value set during its invocation.\n\nAdded in version 250."],
[4,584,"Takes a `SMACK64` security label as the argument. The process executed by a unit will be started under this label if `SmackProcessLabel=` is not set in the unit. See [systemd.exec(5)](systemd.exec.html) for the details.\n\nIf the value is \"`/`\", only labels specified with `SmackProcessLabel=` are assigned and the compile-time default is ignored.\n\nAdded in version 252."],
[4,585,"Rate limiting for daemon-reload requests. Default to unset, and any number of daemon-reload operations can be requested at any time. `ReloadLimitIntervalSec=` takes a value in seconds to configure the rate limit window, and `ReloadLimitBurst=` takes a positive integer to configure the maximum allowed number of reloads within the configured time window.\n\nAdded in version 253."],
[4,586,"Configures the default settings for the per-unit `MemoryPressureWatch=` and `MemoryPressureThresholdSec=` settings. See [systemd.resource-control(5)](systemd.resource-control.html) for details. Defaults to \"`auto`\" and \"`200ms`\", respectively. This also sets the memory pressure monitoring threshold for the service manager itself.\n\nAdded in version 254."],
[2,"CPUAffinity","",561,54,null],
[2,"CapabilityBoundingSet","",568,54,null],
[2,"CrashChangeVT","no",559,54,null],
[2,"CrashReboot","no",559,54,null],
[2,"CrashShell","no",559,54,null],
[2,"CtrlAltDelBurstAction","",560,54,null],
[2,"DefaultCPUAccounting","",579,54,null],
[2,"DefaultDeviceTimeoutSec","",575,54,null],
[2,"DefaultEnvironment","",577,54,null],
[2,"DefaultIOAccounting","",579,54,null],
[2,"DefaultIPAccounting","",579,54,null],
[2,"DefaultLimitAS","",581,54,null],
[2,"DefaultLimitCORE","",581,54,null],
[2,"DefaultLimitCPU","",581,54,null],
[2,"DefaultLimitDATA","",581,54,null],
[2,"DefaultLimitFSIZE","",581,54,null],
[2,"DefaultLimitLOCKS","",581,54,null],
[2,"DefaultLimitMEMLOCK","",581,54,null],
[2,"DefaultLimitMSGQUEUE","",581,54,null],
[2,"DefaultLimitNICE","",581,54,null],
[2,"DefaultLimitNOFILE","",581,54,null],
[2,"DefaultLimitNPROC","",581,54,null],
[2,"DefaultLimitRSS","",581,54,null],
[2,"DefaultLimitRTPRIO","",581,54,null],
[2,"DefaultLimitRTTIME","",581,54,null],
[2,"DefaultLimitSIGPENDING","",581,54,null],
[2,"DefaultLimitSTACK","",581,54,null],
[2,"DefaultMemoryAccounting","",579,54,null],
[2,"DefaultMemoryPressureThresholdSec","",586,54,null],
[2,"DefaultMemoryPressureWatch","",586,54,null],
[2,"DefaultOOMPolicy","",582,54,null],
[2,"DefaultOOMScoreAdjust","",583,54,null],
[2,"DefaultRestartSec","",574,54,null],
[2,"DefaultSmackProcessLabel","",584,54,null],
[2,"DefaultStandardError","inherit",559,54,null],
[2,"DefaultStandardOutput","journal",559,54,null],
[2,"DefaultStartLimitBurst","",576,54,null],
[2,"DefaultStartLimitIntervalSec","",576,54,null],
[2,"DefaultTasksAccounting","",579,54,null],
[2,"DefaultTasksMax","",580,54,null],
[2,"DefaultTimeoutAbortSec","",574,54,null],
[2,"DefaultTimeoutStartSec","",574,54,null],
[2,"DefaultTimeoutStopSec","",574,54,null],
[2,"DefaultTimerAccuracySec","",573,54,null],
[2,"DumpCore","yes",559,54,null],
[2,"KExecWatchdogSec","",564,54,null],
[2,"LogColor","",559,54,null],
[2,"LogLevel","",559,54,null],
[2,"LogLocation","",559,54,null],
[2,"LogTarget","",559,54,null],
[2,"LogTime","",559,54,null],
[2,"ManagerEnvironment","",578,54,null],
[2,"NUMAMask","",563,54,null],
[2,"NUMAPolicy","",562,54,null],
[2,"NoNewPrivileges","",569,54,null],
[2,"RebootWatchdogSec","",564,54,null],
[2,"ReloadLimitBurst","",585,54,null],
[2,"ReloadLimitIntervalSec","",585,54,null],
[2,"RuntimeWatchdogPreGovernor","",566,54,null],
[2,"RuntimeWatchdogPreSec","",565,54,null],
[2,"RuntimeWatchdogSec","",564,54,null],
[2,"ShowStatus","yes",559,54,null],
[2,"StatusUnitFormat","",572,54,null],
[2,"SystemCallArchitectures","",570,54,null],
[2,"TimerSlackNSec","",571,54,null],
[2,"WatchdogDevice","",567,54,null],
[3,55,"coredump.conf(5)","coredump.conf, coredump.conf.d â€” Core dump storage configuration files","coredump.conf.html"],
[6,14,"Coredump"],
[4,587,"Controls where to store cores. One of \"`none`\", \"`external`\", and \"`journal`\". When \"`none`\", the core dumps may be logged (including the backtrace if possible), but not stored permanently. When \"`external`\" (the default), cores will be stored in `/var/lib/systemd/coredump/`. When \"`journal`\", cores will be stored in the journal and rotated following normal journal rotation patterns.\n\nWhen cores are stored in the journal, they might be compressed following journal compression settings, see [journald.conf(5)](journald.conf.html). When cores are stored externally, they will be compressed by default, see below.\n\nNote that in order to process a coredump (i.e. extract a stack trace) the core must be written to disk first. Thus, unless `ProcessSizeMax=` is set to 0 (see below), the core will be written to `/var/lib/systemd/coredump/` either way (under a temporary filename, or even in an unlinked file), `Storage=` thus only controls whether to leave it there even after it was processed.\n\nAdded in version 215."],
[4,588,"Controls compression for external storage. Takes a boolean argument, which defaults to \"`yes`\".\n\nAdded in version 215."],
[4,589,"The maximum size in bytes of a core which will be processed. Core dumps exceeding this size may be stored, but the stack trace will not be generated. Like other sizes in this same config file, the usual suffixes to the base of 1024 are allowed (B, K, M, G, T, P, and E). Defaults to 1G on 32-bit systems, 32G on 64-bit systems.\n\nSetting `Storage=none` and `ProcessSizeMax=0` disables all coredump handling except for a log entry.\n\nAdded in version 215."],
[4,590,"The maximum (compressed or uncompressed) size in bytes of a coredump to be saved in separate files on disk (default: 1G on 32-bit systems, 32G on 64-bit systems) or in the journal (default: 767M). Note that the journal service enforces a hard limit on journal log records of 767M, and will ignore larger submitted log records. Hence, `JournalSizeMax=` may be lowered relative to the default, but not increased. Unit suffixes are allowed just as in `ProcessSizeMax=`.\n\n`ExternalSizeMax=infinity` sets the core size to unlimited.\n\nAdded in version 215."],
[4,591,"Enforce limits on the disk space, specified in bytes, taken up by externally stored core dumps. Unit suffixes are allowed just as in `ProcessSizeMax=`. `MaxUse=` makes sure that old core dumps are removed as soon as the total disk space taken up by core dumps grows beyond this limit (defaults to 10% of the total disk size). `KeepFree=` controls how much disk space to keep free at least (defaults to 15% of the total disk size). Note that the disk space used by core dumps might temporarily exceed these limits while core dumps are processed. Note that old core dumps are also removed based on time via [systemd-tmpfiles(8)](systemd-tmpfiles.html). Set either value to 0 to turn off size-based cleanup.\n\nAdded in version 215."],
[2,"Compress","",588,55,14],
[2,"ExternalSizeMax","",590,55,14],
[2,"JournalSizeMax","",590,55,14],
[2,"KeepFree","",591,55,14],
[2,"MaxUse","",591,55,14],
[2,"ProcessSizeMax","",589,55,14],
[2,"Storage","",587,55,14],
[3,56,"oomd.conf(5)","oomd.conf, oomd.conf.d â€” Global systemd-oomd configuration files","oomd.conf.html"],
[6,15,"OOM"],
[4,592,"Sets the limit for memory and swap usage on the system before **systemd-oomd** will take action. If the fraction of memory used and the fraction of swap used on the system are both more than what is defined here, **systemd-oomd** will act on eligible descendant control groups with swap usage greater than 5% of total swap, starting from the ones with the highest swap usage. Which control groups are monitored and what action gets taken depends on what the unit has configured for `ManagedOOMSwap=`. Takes a value specified in percent (when suffixed with \"%\"), permille (\"â€°\") or permyriad (\"â€±\"), between 0% and 100%, inclusive. Defaults to 90%.\n\nAdded in version 247."],
[4,593,"Sets the limit for memory pressure on the unit's control group before **systemd-oomd** will take action. A unit can override this value with `ManagedOOMMemoryPressureLimit=`. The memory pressure for this property represents the fraction of time in a 10 second window in which all tasks in the control group were delayed. For each monitored control group, if the memory pressure on that control group exceeds the limit set for longer than the duration set by `DefaultMemoryPressureDurationSec=`, **systemd-oomd** will act on eligible descendant control groups, starting from the ones with the most reclaim activity to the least reclaim activity. Which control groups are monitored and what action gets taken depends on what the unit has configured for `ManagedOOMMemoryPressure=`. Takes a fraction specified in the same way as `SwapUsedLimit=` above. Defaults to 60%.\n\nAdded in version 247."],
[4,594,"Sets the amount of time a unit's control group needs to have exceeded memory pressure limits before **systemd-oomd** will take action. Memory pressure limits are defined by `DefaultMemoryPressureLimit=` and `ManagedOOMMemoryPressureLimit=`. Must be set to 0, or at least 1 second. Defaults to 30 seconds when unset or 0.\n\nAdded in version 248."],
[2,"DefaultMemoryPressureDurationSec","",594,56,15],
[2,"DefaultMemoryPressureLimit","",593,56,15],
[2,"SwapUsedLimit","",592,56,15],
[3,57,"logind.conf(5)","logind.conf, logind.conf.d â€” Login manager configuration files","logind.conf.html"],
[6,16,"Login"],
[4,595,"Takes a positive integer. Configures how many virtual terminals (VTs) to allocate by default that, when switched to and are previously unused, \"`autovt`\" services are automatically spawned on. These services are instantiated from the template unit `autovt@.service` for the respective VT TTY name, for example, `autovt@tty4.service`. By default, `autovt@.service` is linked to `getty@.service`. In other words, login prompts are started dynamically as the user switches to unused virtual terminals. Hence, this parameter controls how many login \"`gettys`\" are available on the VTs. If a VT is already used by some other subsystem (for example, a graphical login), this kind of activation will not be attempted. Note that the VT configured in `ReserveVT=` is always subject to this kind of activation, even if it is not one of the VTs configured with the `NAutoVTs=` directive. Defaults to 6. When set to 0, automatic spawning of \"`autovt`\" services is disabled."],
[4,596,"Takes a positive integer. Identifies one virtual terminal that shall unconditionally be reserved for `autovt@.service` activation (see above). The VT selected with this option will be marked busy unconditionally, so that no other subsystem will allocate it. This functionality is useful to ensure that, regardless of how many VTs are allocated by other subsystems, one login \"`getty`\" is always available. Defaults to 6 (in other words, there will always be a \"`getty`\" available on Alt-F6.). When set to 0, VT reservation is disabled.\n\nAdded in version 190."],
[4,597,"Takes a boolean argument. Configures whether the processes of a user should be killed when the user logs out. If true, the scope unit corresponding to the session and all processes inside that scope will be terminated. If false, the scope is \"abandoned\", see [systemd.scope(5)](systemd.scope.html), and processes are not killed. Defaults to \"`yes`\", but see the options `KillOnlyUsers=` and `KillExcludeUsers=` below.\n\nIn addition to session processes, user process may run under the user manager unit `user@.service`. Depending on the linger settings, this may allow users to run processes independent of their login sessions. See the description of **enable-linger** in [loginctl(1)](loginctl.html).\n\nNote that setting `KillUserProcesses=yes` will break tools like [screen(1)](http://linux.die.net/man/1/screen) and [tmux(1)](http://linux.die.net/man/1/tmux), unless they are moved out of the session scope. See example in [systemd-run(1)](systemd-run.html)."],
[4,598,"These settings take space-separated lists of usernames that override the `KillUserProcesses=` setting. A user name may be added to `KillExcludeUsers=` to exclude the processes in the session scopes of that user from being killed even if `KillUserProcesses=yes` is set. If `KillExcludeUsers=` is not set, the \"`root`\" user is excluded by default. `KillExcludeUsers=` may be set to an empty value to override this default. If a user is not excluded, `KillOnlyUsers=` is checked next. If this setting is specified, only the processes in the session scopes of those users will be killed. Otherwise, users are subject to the `KillUserProcesses=yes` setting."],
[4,599,"Configures the action to take when the system is idle. Takes one of \"`ignore`\", \"`poweroff`\", \"`reboot`\", \"`halt`\", \"`kexec`\", \"`suspend`\", \"`hibernate`\", \"`hybrid-sleep`\", \"`suspend-then-hibernate`\", and \"`lock`\". Defaults to \"`ignore`\".\n\nNote that this requires that user sessions correctly report the idle status to the system. The system will execute the action after all sessions report that they are idle, no idle inhibitor lock is active, and subsequently, the time configured with `IdleActionSec=` (see below) has expired.\n\nAdded in version 198."],
[4,600,"Configures the delay after which the action configured in `IdleAction=` (see above) is taken after the system is idle.\n\nAdded in version 198."],
[4,601,"Specifies the maximum time a system shutdown or sleep request is delayed due to an inhibitor lock of type \"`delay`\" being active before the inhibitor is ignored and the operation executes anyway. Defaults to 5."],
[4,602,"Specifies how long to keep the user record and per-user service `user@.service` around for a user after they logged out fully. If set to zero, the per-user service is terminated immediately when the last session of the user has ended. If this option is configured to non-zero rapid logout/login cycles are sped up, as the user's service manager is not constantly restarted. If set to \"`infinity`\" the per-user service for a user is never terminated again after first login, and continues to run until system shutdown. Defaults to 10s.\n\nAdded in version 240."],
[4,603,"Controls how logind shall handle the system power, reboot and sleep keys and the lid switch to trigger actions such as system power-off, reboot or suspend. Can be one of \"`ignore`\", \"`poweroff`\", \"`reboot`\", \"`halt`\", \"`kexec`\", \"`suspend`\", \"`hibernate`\", \"`hybrid-sleep`\", \"`suspend-then-hibernate`\", \"`lock`\", and \"`factory-reset`\". If \"`ignore`\", **systemd-logind** will never handle these keys. If \"`lock`\", all running sessions will be screen-locked; otherwise, the specified action will be taken in the respective event. Only input devices with the \"`power-switch`\" udev tag will be watched for key/lid switch events.\n\n`HandlePowerKey=` defaults to \"`poweroff`\", `HandleRebootKey=` defaults to \"`reboot`\", `HandleSuspendKey=` defaults to \"`suspend`\", `HandleHibernateKey=` defaults to \"`hibernate`\", `HandlePowerKeyLongPress=` defaults to \"`ignore`\", `HandleRebootKeyLongPress=` defaults to \"`poweroff`\", `HandleSuspendKeyLongPress=` defaults to \"`hibernate`\", `HandleHibernateKeyLongPress=` defaults to \"`ignore`\". `HandleLidSwitch=` defaults to \"`suspend`\". `HandleLidSwitchExternalPower=` is completely ignored by default (for backwards compatibility) â€” an explicit value must be set before it will be used to determine behaviour. `HandleLidSwitchDocked=` defaults to \"`ignore`\". If the system is inserted in a docking station, or if more than one display is connected, the action specified by `HandleLidSwitchDocked=` occurs; if the system is on external power the action (if any) specified by `HandleLidSwitchExternalPower=` occurs; otherwise the `HandleLidSwitch=` action occurs.\n\nA different application may disable logind's handling of system power and sleep keys and the lid switch by taking a low-level inhibitor lock (\"`handle-power-key`\", \"`handle-suspend-key`\", \"`handle-hibernate-key`\", \"`handle-lid-switch`\", \"`handle-reboot-key`\"). This is most commonly used by graphical desktop environments to take over suspend and hibernation handling, and to use their own configuration mechanisms. If a low-level inhibitor lock is taken, logind will not take any action when that key or switch is triggered and the `Handle*=` settings are irrelevant.\n\nAdded in version 184."],
[4,604,"Controls whether actions that **systemd-logind** takes when the power, reboot and sleep keys and the lid switch are triggered are subject to high-level inhibitor locks (\"shutdown\", \"reboot\", \"sleep\", \"idle\"). Low level inhibitor locks (\"`handle-power-key`\", \"`handle-suspend-key`\", \"`handle-hibernate-key`\", \"`handle-lid-switch`\", \"`handle-reboot-key`\"), are always honored, irrespective of this setting.\n\nThese settings take boolean arguments. If \"`no`\", the inhibitor locks taken by applications are respected. If \"`yes`\", \"shutdown\", \"reboot\" \"sleep\", and \"idle\" inhibitor locks are ignored. `PowerKeyIgnoreInhibited=`, `SuspendKeyIgnoreInhibited=`, `HibernateKeyIgnoreInhibited=` and `RebootKeyIgnoreInhibited=` default to \"`no`\". `LidSwitchIgnoreInhibited=` defaults to \"`yes`\". This means that when **systemd-logind** is handling events by itself (no low level inhibitor locks are taken by another application), the lid switch does not respect suspend blockers by default, but the power and sleep keys do.\n\nAdded in version 190."],
[4,605,"Specifies a period of time after system startup or system resume in which systemd will hold off on reacting to lid events. This is required for the system to properly detect any hotplugged devices so systemd can ignore lid events if external monitors, or docks, are connected. If set to 0, systemd will always react immediately, possibly before the kernel fully probed all hotplugged devices. This is safe, as long as you do not care for systemd to account for devices that have been plugged or unplugged while the system was off. Defaults to 30s.\n\nAdded in version 220."],
[4,606,"Sets the size limit on the `$XDG_RUNTIME_DIR` runtime directory for each user who logs in. Takes a size in bytes, optionally suffixed with the usual K, G, M, and T suffixes, to the base 1024 (IEC). Alternatively, a numerical percentage suffixed by \"`%`\" may be specified, which sets the size limit relative to the amount of physical RAM. Defaults to 10%. Note that this size is a safety limit only. As each runtime directory is a tmpfs file system, it will only consume as much memory as is needed.\n\nAdded in version 211."],
[4,607,"Sets the limit on number of inodes for the `$XDG_RUNTIME_DIR` runtime directory for each user who logs in. Takes a number, optionally suffixed with the usual K, G, M, and T suffixes, to the base 1024 (IEC). Defaults to `RuntimeDirectorySize=` divided by 4096. Note that this size is a safety limit only. As each runtime directory is a tmpfs file system, it will only consume as much memory as is needed.\n\nAdded in version 246."],
[4,608,"Controls the maximum number of concurrent inhibitors to permit. Defaults to 8192 (8K).\n\nAdded in version 230."],
[4,609,"Controls the maximum number of concurrent user sessions to manage. Defaults to 8192 (8K). Depending on how the `pam_systemd.so` module is included in the PAM stack configuration, further login sessions will either be refused, or permitted but not tracked by `systemd-logind`.\n\nAdded in version 230."],
[4,610,"Controls whether System V and POSIX IPC objects belonging to the user shall be removed when the user fully logs out. Takes a boolean argument. If enabled, the user may not consume IPC resources after the last of the user's sessions terminated. This covers System V semaphores, shared memory and message queues, as well as POSIX shared memory and message queues. Note that IPC objects of the root user and other system users are excluded from the effect of this setting. Defaults to \"`yes`\".\n\nAdded in version 212."],
[4,611,"Specifies a timeout in seconds, or a time span value after which `systemd-logind` checks the idle state of all sessions. Every session that is idle for longer then the timeout will be stopped. Defaults to \"`infinity`\" (`systemd-logind` is not checking the idle state of sessions). For details about the syntax of time spans, see [systemd.time(7)](systemd.time.html).\n\nAdded in version 252."],
[2,"HandleHibernateKey","",603,57,16],
[2,"HandleHibernateKeyLongPress","",603,57,16],
[2,"HandleLidSwitch","",603,57,16],
[2,"HandleLidSwitchDocked","",603,57,16],
[2,"HandleLidSwitchExternalPower","",603,57,16],
[2,"HandlePowerKey","",603,57,16],
[2,"HandlePowerKeyLongPress","",603,57,16],
[2,"HandleRebootKey","",603,57,16],
[2,"HandleRebootKeyLongPress","",603,57,16],
[2,"HandleSuspendKey","",603,57,16],
[2,"HandleSuspendKeyLongPress","",603,57,16],
[2,"HibernateKeyIgnoreInhibited","",604,57,16],
[2,"HoldoffTimeoutSec","",605,57,16],
[2,"IdleAction","",599,57,16],
[2,"IdleActionSec","",600,57,16],
[2,"InhibitDelayMaxSec","",601,57,16],
[2,"InhibitorsMax","",608,57,16],
[2,"KillExcludeUsers","",598,57,16],
[2,"KillOnlyUsers","",598,57,16],
[2,"KillUserProcesses","",597,57,16],
[2,"LidSwitchIgnoreInhibited","",604,57,16],
[2,"NAutoVTs","",595,57,16],
[2,"PowerKeyIgnoreInhibited","",604,57,16],
[2,"RebootKeyIgnoreInhibited","",604,57,16],
[2,"RemoveIPC","",610,57,16],
[2,"ReserveVT","",596,57,16],
[2,"RuntimeDirectoryInodesMax","",607,57,16],
[2,"RuntimeDirectorySize","",606,57,16],
[2,"SessionsMax","",609,57,16],
[2,"StopIdleSessionSec","",611,57,16],
[2,"SuspendKeyIgnoreInhibited","",604,57,16],
[2,"UserStopDelaySec","",602,57,16],
[3,58,"journal-remote.conf(5)","journal-remote.conf, journal-remote.conf.d â€” Configuration files for the service accepting remote journal uploads","journal-remote.conf.html"],
[6,17,"Remote"],
[4,612,"Periodically sign the data in the journal using Forward Secure Sealing.\n\nAdded in version 229."],
[4,613,"One of \"`host`\" or \"`none`\".\n\nAdded in version 220."],
[4,614,"SSL key in PEM format.\n\nAdded in version 220."],
[4,615,"SSL certificate in PEM format.\n\nAdded in version 220."],
[4,616,"SSL CA certificate.\n\nAdded in version 220."],
[4,617,"These are analogous to `SystemMaxUse=`, `SystemKeepFree=`, `SystemMaxFileSize=` and `SystemMaxFiles=` in [journald.conf(5)](journald.conf.html).\n\n`MaxUse=` controls how much disk space the **systemd-journal-remote** may use up at most. `KeepFree=` controls how much disk space **systemd-journal-remote** shall leave free for other uses. **systemd-journal-remote** will respect both limits and use the smaller of the two values.\n\n`MaxFiles=` controls how many individual journal files to keep at most. Note that only archived files are deleted to reduce the number of files until this limit is reached; active files will stay around. This means that, in effect, there might still be more journal files around in total than this limit after a vacuuming operation is complete.\n\nAdded in version 253."],
[2,"KeepFree","",617,58,17],
[2,"MaxFileSize","",617,58,17],
[2,"MaxFiles","",617,58,17],
[2,"MaxUse","",617,58,17],
[2,"Seal","",612,58,17],
[2,"ServerCertificateFile","",615,58,17],
[2,"ServerKeyFile","",614,58,17],
[2,"SplitMode","",613,58,17],
[2,"TrustedCertificateFile","",616,58,17],
[3,59,"journal-upload.conf(5)","journal-upload.conf, journal-upload.conf.d â€” Configuration files for the journal upload service","journal-upload.conf.html"],
[4,618,"The URL to upload the journal entries to. See the description of `--url=` option in [systemd-journal-upload(8)](systemd-journal-upload.html) for the description of possible values. There is no default value, so either this option or the command-line option must be always present to make an upload.\n\nAdded in version 232."],
[4,619,"SSL key in PEM format.\n\nAdded in version 232."],
[4,620,"SSL CA certificate in PEM format.\n\nAdded in version 232."],
[4,621,"SSL CA certificate.\n\nAdded in version 232."],
[4,622,"When network connectivity to the server is lost, this option configures the time to wait for the connectivity to get restored. If the server is not reachable over the network for the configured time, **systemd-journal-upload** exits. Takes a value in seconds (or in other time units if suffixed with \"ms\", \"min\", \"h\", etc). For details, see [systemd.time(5)](systemd.time.html).\n\nAdded in version 249."],
[2,"NetworkTimeoutSec","",622,59,null],
[2,"ServerCertificateFile","",620,59,null],
[2,"ServerKeyFile","",619,59,null],
[2,"TrustedCertificateFile","",621,59,null],
[2,"URL","",618,59,null],
[3,60,"pstore.conf(5)","pstore.conf, pstore.conf.d â€” PStore configuration file","pstore.conf.html"],
[6,18,"PStore"],
[4,623,"Controls where to archive (i.e. copy) files from the pstore filesystem. One of \"`none`\", \"`external`\", and \"`journal`\". When \"`none`\", the tool exits without processing files in the pstore filesystem. When \"`external`\" (the default), files are archived into `/var/lib/systemd/pstore/`, and logged into the journal. When \"`journal`\", pstore file contents are logged only in the journal.\n\nAdded in version 243."],
[4,624,"Controls whether or not files are removed from pstore after processing. Takes a boolean value. When true, a pstore file is removed from the pstore once it has been archived (either to disk or into the journal). When false, processing of pstore files occurs normally, but the files remain in the pstore. The default is true in order to maintain the pstore in a nearly empty state, so that the pstore has storage available for the next kernel error event.\n\nAdded in version 243."],
[2,"Storage","",623,60,18],
[2,"Unlink","",624,60,18],
[3,61,"iocost.conf(5)","iocost.conf â€” Configuration files for the iocost solution manager","iocost.conf.html"],
[4,625,"Chooses which I/O cost solution (identified by named string) should be used for the devices in this system. The known solutions can be queried from the udev metadata attached to the devices. If a device does not have the specified solution, the first one listed in `IOCOST_SOLUTIONS` is used instead.\n\nE.g. \"`TargetSolution=isolated-bandwidth`\".\n\nAdded in version 254."],
[2,"TargetSolution","",625,61,null],
[3,63,"ukify(1)","ukify â€” Combine components into a signed Unified Kernel Image for UEFI systems","ukify.html"],
[4,626,"A path to the kernel binary.\n\nAdded in version 254."],
[4,627,"Zero or more initrd paths. In the configuration file, items are separated by whitespace. The initrds are combined in the order of specification, with the initrds specified in the config file first.\n\nAdded in version 254."],
[4,628,"The kernel command line (the \"`.cmdline`\" section). The argument may be a literal string, or \"`@`\" followed by a path name. If not specified, no command line will be embedded.\n\nAdded in version 253."],
[4,629,"The os-release description (the \"`.osrel`\" section). The argument may be a literal string, or \"`@`\" followed by a path name. If not specified, the [os-release(5)](os-release.html) file will be picked up from the host system.\n\nAdded in version 253."],
[4,630,"The devicetree description (the \"`.dtb`\" section). The argument is a path to a compiled binary DeviceTree file. If not specified, the section will not be present.\n\nAdded in version 253."],
[4,631,"A picture to display during boot (the \"`.splash`\" section). The argument is a path to a BMP file. If not specified, the section will not be present.\n\nAdded in version 253."],
[4,632,"A path to a public key to embed in the \"`.pcrpkey`\" section. If not specified, and there's exactly one `PCRPublicKey=`/`--pcr-public-key=` argument, that key will be used. Otherwise, the section will not be present.\n\nAdded in version 253."],
[4,633,"Specify the kernel version (as in **uname -r**, the \"`.uname`\" section). If not specified, an attempt will be made to extract the version string from the kernel image. It is recommended to pass this explicitly if known, because the extraction is based on heuristics and not very reliable. If not specified and extraction fails, the section will not be present.\n\nAdded in version 253."],
[4,634,"A comma or space-separated list of PCR banks to sign a policy for. If not present, all known banks will be used (\"`sha1`\", \"`sha256`\", \"`sha384`\", \"`sha512`\"), which will fail if not supported by the system.\n\nAdded in version 253."],
[4,635,"Whether to use \"`sbsign`\" or \"`pesign`\". Depending on this choice, different parameters are required in order to sign an image. Defaults to \"`sbsign`\".\n\nAdded in version 254."],
[4,636,"A path to a private key to use for signing of the resulting binary. If the `SigningEngine=`/`--signing-engine=` option is used, this may also be an engine-specific designation. This option is required by `SecureBootSigningTool=sbsign`/`--signtool=sbsign`.\n\nAdded in version 253."],
[4,637,"A path to a certificate to use for signing of the resulting binary. If the `SigningEngine=`/`--signing-engine=` option is used, this may also be an engine-specific designation. This option is required by `SecureBootSigningTool=sbsign`/`--signtool=sbsign`.\n\nAdded in version 253."],
[4,638,"A path to a nss certificate database directory to use for signing of the resulting binary. Takes effect when `SecureBootSigningTool=pesign`/`--signtool=pesign` is used. Defaults to `/etc/pki/pesign`.\n\nAdded in version 254."],
[4,639,"The name of the nss certificate database entry to use for signing of the resulting binary. This option is required by `SecureBootSigningTool=pesign`/`--signtool=pesign`.\n\nAdded in version 254."],
[4,640,"Period of validity (in days) for a certificate created by **genkey**. Defaults to 3650, i.e. 10 years.\n\nAdded in version 254."],
[4,641,"An \"engine\" for signing of the resulting binary. This option is currently passed verbatim to the `--engine=` option of [sbsign(1)](https://www.archlinux.org/sbsign/sbsign.1.html).\n\nAdded in version 253."],
[4,642,"Override the detection of whether to sign the Linux binary itself before it is embedded in the combined image. If not specified, it will be signed if a SecureBoot signing key is provided via the `SecureBootPrivateKey=`/`--secureboot-private-key=` option and the binary has not already been signed. If `SignKernel=`/`--sign-kernel` is true, and the binary has already been signed, the signature will be appended anyway.\n\nAdded in version 253."],
[4,643,"SBAT metadata associated with the UKI or addon. SBAT policies are useful to revoke whole groups of UKIs or addons with a single, static policy update that does not take space in DBX/MOKX. If not specified manually, a default metadata entry consisting of \"`uki,1,UKI,uki,1,https://www.freedesktop.org/software/systemd/man/systemd-stub.html`\" will be used, to ensure it is always possible to revoke UKIs and addons. For more information on SBAT see [Shim documentation](https://github.com/rhboot/shim/blob/main/SBAT.md).\n\nAdded in version 254."],
[4,644,"A private key to use for signing PCR policies. On the command line, this option may be specified more than once, in which case multiple signatures will be made.\n\nAdded in version 253."],
[4,645,"A public key to use for signing PCR policies.\n\nOn the command line, this option may be specified more than once, similarly to the `--pcr-private-key=` option. If not present, the public keys will be extracted from the private keys. On the command line, if present, this option must be specified the same number of times as the `--pcr-private-key=` option.\n\nAdded in version 253."],
[4,646,"A comma or space-separated list of colon-separated phase paths to sign a policy for. Each set of boot phase paths will be signed with the corresponding private key. If not present, the default of [systemd-measure(1)](systemd-measure.html) will be used.\n\nOn the command line, when this argument is present, it must appear the same number of times as the `--pcr-private-key=` option.\n\nAdded in version 253."],
[2,"Cmdline","TEXT|@PATH",628,63,null],
[2,"DeviceTree","PATH",630,63,null],
[2,"Initrd","INITRD...",627,63,null],
[2,"Linux","LINUX",626,63,null],
[2,"OSRelease","TEXT|@PATH",629,63,null],
[2,"PCRBanks","PATH",634,63,null],
[2,"PCRPKey","PATH",632,63,null],
[2,"PCRPrivateKey","PATH",644,63,null],
[2,"PCRPublicKey","PATH",645,63,null],
[2,"Phases","LIST",646,63,null],
[2,"SBAT","TEXT|@PATH",643,63,null],
[2,"SecureBootCertificate","SB_CERT",637,63,null],
[2,"SecureBootCertificateDir","SB_PATH",638,63,null],
[2,"SecureBootCertificateName","SB_CERTNAME",639,63,null],
[2,"SecureBootCertificateValidity","DAYS",640,63,null],
[2,"SecureBootPrivateKey","SB_KEY",636,63,null],
[2,"SecureBootSigningTool","SIGNER",635,63,null],
[2,"SignKernel","BOOL",642,63,null],
[2,"SigningEngine","ENGINE",641,63,null],
[2,"Splash","PATH",631,63,null],
[2,"Uname","VERSION",633,63,null],
[3,64,"repart.d(5)","repart.d â€” Partition Definition Files for Automatic Boot-Time Repartitioning","repart.d.html"],
[6,19,"Partition"],
[4,647,"The GPT partition type UUID to match. This may be a GPT partition type UUID such as `4f68bce3-e8cd-4db1-96e7-fbcaf984b709`, or an identifier. Architecture specific partition types can use one of these architecture identifiers: `alpha`, `arc`, `arm` (32-bit), `arm64` (64-bit, aka aarch64), `ia64`, `loongarch64`, `mips-le`, `mips64-le`, `parisc`, `ppc`, `ppc64`, `ppc64-le`, `riscv32`, `riscv64`, `s390`, `s390x`, `tilegx`, `x86` (32-bit, aka i386) and `x86-64` (64-bit, aka amd64).\n\nThe supported identifiers are:\n\n**TableÂ 1.Â GPT partition type identifiers**\n\nIdentifier\n\nExplanation\n\n`esp`\n\nEFI System Partition\n\n`xbootldr`\n\nExtended Boot Loader Partition\n\n`swap`\n\nSwap partition\n\n`home`\n\nHome (`/home/`) partition\n\n`srv`\n\nServer data (`/srv/`) partition\n\n`var`\n\nVariable data (`/var/`) partition\n\n`tmp`\n\nTemporary data (`/var/tmp/`) partition\n\n`linux-generic`\n\nGeneric Linux file system partition\n\n`root`\n\nRoot file system partition type appropriate for the local architecture (an alias for an architecture root file system partition type listed below, e.g. `root-x86-64`)\n\n`root-verity`\n\nVerity data for the root file system partition for the local architecture\n\n`root-verity-sig`\n\nVerity signature data for the root file system partition for the local architecture\n\n`root-secondary`\n\nRoot file system partition of the secondary architecture of the local architecture (usually the matching 32-bit architecture for the local 64-bit architecture)\n\n`root-secondary-verity`\n\nVerity data for the root file system partition of the secondary architecture\n\n`root-secondary-verity-sig`\n\nVerity signature data for the root file system partition of the secondary architecture\n\n`root-{arch}`\n\nRoot file system partition of the given architecture (such as `root-x86-64` or `root-riscv64`)\n\n`root-{arch}-verity`\n\nVerity data for the root file system partition of the given architecture\n\n`root-{arch}-verity-sig`\n\nVerity signature data for the root file system partition of the given architecture\n\n`usr`\n\n`/usr/` file system partition type appropriate for the local architecture (an alias for an architecture `/usr/` file system partition type listed below, e.g. `usr-x86-64`)\n\n`usr-verity`\n\nVerity data for the `/usr/` file system partition for the local architecture\n\n`usr-verity-sig`\n\nVerity signature data for the `/usr/` file system partition for the local architecture\n\n`usr-secondary`\n\n`/usr/` file system partition of the secondary architecture of the local architecture (usually the matching 32-bit architecture for the local 64-bit architecture)\n\n`usr-secondary-verity`\n\nVerity data for the `/usr/` file system partition of the secondary architecture\n\n`usr-secondary-verity-sig`\n\nVerity signature data for the `/usr/` file system partition of the secondary architecture\n\n`usr-{arch}`\n\n`/usr/` file system partition of the given architecture\n\n`usr-{arch}-verity`\n\nVerity data for the `/usr/` file system partition of the given architecture\n\n`usr-{arch}-verity-sig`\n\nVerity signature data for the `/usr/` file system partition of the given architecture\n\n  \n\nThis setting defaults to `linux-generic`.\n\nMost of the partition type UUIDs listed above are defined in the [Discoverable Partitions Specification](https://uapi-group.org/specifications/specs/discoverable_partitions_specification).\n\nAdded in version 245."],
[4,648,"The textual label to assign to the partition if none is assigned yet. Note that this setting is not used for matching. It is also not used when a label is already set for an existing partition. It is thus only used when a partition is newly created or when an existing one had a no label set (that is: an empty label). If not specified a label derived from the partition type is automatically used. Simple specifier expansion is supported, see below.\n\nAdded in version 245."],
[4,649,"The UUID to assign to the partition if none is assigned yet. Note that this setting is not used for matching. It is also not used when a UUID is already set for an existing partition. It is thus only used when a partition is newly created or when an existing one had a all-zero UUID set. If set to \"`null`\", the UUID is set to all zeroes. If not specified a UUID derived from the partition type is automatically used.\n\nAdded in version 246."],
[4,650,"A numeric priority to assign to this partition, in the range -2147483648â€¦2147483647, with smaller values indicating higher priority, and higher values indicating smaller priority. This priority is used in case the configured size constraints on the defined partitions do not permit fitting all partitions onto the available disk space. If the partitions do not fit, the highest numeric partition priority of all defined partitions is determined, and all defined partitions with this priority are removed from the list of new partitions to create (which may be multiple, if the same priority is used for multiple partitions). The fitting algorithm is then tried again. If the partitions still do not fit, the now highest numeric partition priority is determined, and the matching partitions removed too, and so on. Partitions of a priority of 0 or lower are never removed. If all partitions with a priority above 0 are removed and the partitions still do not fit on the device the operation fails. Note that this priority has no effect on ordering partitions, for that use the alphabetical order of the filenames of the partition definition files. Defaults to 0.\n\nAdded in version 245."],
[4,651,"A numeric weight to assign to this partition in the range 0â€¦1000000. Available disk space is assigned the defined partitions according to their relative weights (subject to the size constraints configured with `SizeMinBytes=`, `SizeMaxBytes=`), so that a partition with weight 2000 gets double the space as one with weight 1000, and a partition with weight 333 a third of that. Defaults to 1000.\n\nThe `Weight=` setting is used to distribute available disk space in an \"elastic\" fashion, based on the disk size and existing partitions. If a partition shall have a fixed size use both `SizeMinBytes=` and `SizeMaxBytes=` with the same value in order to fixate the size to one value, in which case the weight has no effect.\n\nAdded in version 245."],
[4,652,"Similar to `Weight=`, but sets a weight for the free space after the partition (the \"padding\"). When distributing available space the weights of all partitions and all defined padding is summed, and then each partition and padding gets the fraction defined by its weight. Defaults to 0, i.e. by default no padding is applied.\n\nPadding is useful if empty space shall be left for later additions or a safety margin at the end of the device or between partitions.\n\nAdded in version 245."],
[4,653,"Specifies minimum and maximum size constraints in bytes. Takes the usual K, M, G, T, â€¦ suffixes (to the base of 1024). If `SizeMinBytes=` is specified the partition is created at or grown to at least the specified size. If `SizeMaxBytes=` is specified the partition is created at or grown to at most the specified size. The precise size is determined through the weight value configured with `Weight=`, see above. When `SizeMinBytes=` is set equal to `SizeMaxBytes=` the configured weight has no effect as the partition is explicitly sized to the specified fixed value. Note that partitions are never created smaller than 4096 bytes, and since partitions are never shrunk the previous size of the partition (in case the partition already exists) is also enforced as lower bound for the new size. The values should be specified as multiples of 4096 bytes, and are rounded upwards (in case of `SizeMinBytes=`) or downwards (in case of `SizeMaxBytes=`) otherwise. If the backing device does not provide enough space to fulfill the constraints placing the partition will fail. For partitions that shall be created, depending on the setting of `Priority=` (see above) the partition might be dropped and the placing algorithm restarted. By default a minimum size constraint of 10M and no maximum size constraint is set.\n\nAdded in version 245."],
[4,654,"Specifies minimum and maximum size constraints in bytes for the free space after the partition (the \"padding\"). Semantics are similar to `SizeMinBytes=` and `SizeMaxBytes=`, except that unlike partition sizes free space can be shrunk and can be as small as zero. By default no size constraints on padding are set, so that only `PaddingWeight=` determines the size of the padding applied.\n\nAdded in version 245."],
[4,655,"Takes a path to a regular file, block device node or directory, or the special value \"`auto`\". If specified and the partition is newly created, the data from the specified path is written to the newly created partition, on the block level. If a directory is specified, the backing block device of the file system the directory is on is determined, and the data read directly from that. This option is useful to efficiently replicate existing file systems onto new partitions on the block level â€” for example to build a simple OS installer or an OS image builder.\n\nIf the special value \"`auto`\" is specified, the source to copy from is automatically picked up from the running system (or the image specified with `--image=` â€” if used). A partition that matches both the configured partition type (as declared with `Type=` described above), and the currently mounted directory appropriate for that partition type is determined. For example, if the partition type is set to \"`root`\" the partition backing the root directory (`/`) is used as source to copy from â€” if its partition type is set to \"`root`\" as well. If the declared type is \"`usr`\" the partition backing `/usr/` is used as source to copy blocks from â€” if its partition type is set to \"`usr`\" too. The logic is capable of automatically tracking down the backing partitions for encrypted and Verity-enabled volumes. \"`CopyBlocks=auto`\" is useful for implementing \"self-replicating\" systems, i.e. systems that are their own installer.\n\nThe file specified here must have a size that is a multiple of the basic block size 512 and not be empty. If this option is used, the size allocation algorithm is slightly altered: the partition is created as least as big as required to fit the data in, i.e. the data size is an additional minimum size value taken into consideration for the allocation algorithm, similar to and in addition to the `SizeMin=` value configured above.\n\nThis option has no effect if the partition it is declared for already exists, i.e. existing data is never overwritten. Note that the data is copied in before the partition table is updated, i.e. before the partition actually is persistently created. This provides robustness: it is guaranteed that the partition either doesn't exist or exists fully populated; it is not possible that the partition exists but is not or only partially populated.\n\nThis option cannot be combined with `Format=` or `CopyFiles=`.\n\nAdded in version 246."],
[4,656,"Takes a file system name, such as \"`ext4`\", \"`btrfs`\", \"`xfs`\", \"`vfat`\", \"`erofs`\", \"`squashfs`\" or the special value \"`swap`\". If specified and the partition is newly created it is formatted with the specified file system (or as swap device). The file system UUID and label are automatically derived from the partition UUID and label. If this option is used, the size allocation algorithm is slightly altered: the partition is created as least as big as required for the minimal file system of the specified type (or 4KiB if the minimal size is not known).\n\nThis option has no effect if the partition already exists.\n\nSimilarly to the behaviour of `CopyBlocks=`, the file system is formatted before the partition is created, ensuring that the partition only ever exists with a fully initialized file system.\n\nThis option cannot be combined with `CopyBlocks=`.\n\nAdded in version 247."],
[4,657,"Takes a pair of colon separated absolute file system paths. The first path refers to a source file or directory on the host, the second path refers to a target in the file system of the newly created partition and formatted file system. This setting may be used to copy files or directories from the host into the file system that is created due to the `Format=` option. If `CopyFiles=` is used without `Format=` specified explicitly, \"`Format=`\" with a suitable default is implied (currently \"`vfat`\" for \"`ESP`\" and \"`XBOOTLDR`\" partitions, and \"`ext4`\" otherwise, but this may change in the future). This option may be used multiple times to copy multiple files or directories from host into the newly formatted file system. The colon and second path may be omitted in which case the source path is also used as the target path (relative to the root of the newly created file system). If the source path refers to a directory it is copied recursively.\n\nThis option has no effect if the partition already exists: it cannot be used to copy additional files into an existing partition, it may only be used to populate a file system created anew.\n\nThe copy operation is executed before the file system is registered in the partition table, thus ensuring that a file system populated this way only ever exists fully initialized.\n\nNote that `CopyFiles=` will skip copying files that aren't supported by the target filesystem (e.g symlinks, fifos, sockets and devices on vfat). When an unsupported file type is encountered, **systemd-repart** will skip copying this file and write a log message about it.\n\nNote that **systemd-repart** does not change the UIDs/GIDs of any copied files and directories. When running **systemd-repart** as an unprivileged user to build an image of files and directories owned by the same user, you can run **systemd-repart** in a user namespace with the current user mapped to the root user to make sure the files and directories in the image are owned by the root user.\n\nNote that when populating XFS filesystems with **systemd-repart** and loop devices are not available, populating XFS filesystems with files containing spaces, tabs or newlines might fail on old versions of [mkfs.xfs(8)](https://man7.org/linux/man-pages/man8/mkfs.xfs.8.html) due to limitations of its protofile format.\n\nNote that when populating XFS filesystems with **systemd-repart** and loop devices are not available, extended attributes will not be copied into generated XFS filesystems due to limitations [mkfs.xfs(8)](https://man7.org/linux/man-pages/man8/mkfs.xfs.8.html)'s protofile format.\n\nThis option cannot be combined with `CopyBlocks=`.\n\nWhen [systemd-repart(8)](systemd-repart.html) is invoked with the `--copy-source=` command line switch the file paths are taken relative to the specified directory. If `--copy-source=` is not used, but the `--image=` or `--root=` switches are used, the source paths are taken relative to the specified root directory or disk image root.\n\nAdded in version 247."],
[4,658,"Takes an absolute file system path referring to a source file or directory on the host. This setting may be used to exclude files or directories from the host from being copied into the file system when `CopyFiles=` is used. This option may be used multiple times to exclude multiple files or directories from host from being copied into the newly formatted file system.\n\nIf the path is a directory and ends with \"`/`\", only the directory's contents are excluded but not the directory itself. If the path is a directory and does not end with \"`/`\", both the directory and its contents are excluded.\n\n`ExcludeFilesTarget=` is like `ExcludeFiles=` except that instead of excluding the path on the host from being copied into the partition, we exclude any files and directories from being copied into the given path in the partition.\n\nWhen [systemd-repart(8)](systemd-repart.html) is invoked with the `--image=` or `--root=` command line switches the paths specified are taken relative to the specified root directory or disk image root.\n\nAdded in version 254."],
[4,659,"Takes one or more absolute paths, separated by whitespace, each declaring a directory to create within the new file system. Behaviour is similar to `CopyFiles=`, but instead of copying in a set of files this just creates the specified directories with the default mode of 0755 owned by the root user and group, plus all their parent directories (with the same ownership and access mode). To configure directories with different ownership or access mode, use `CopyFiles=` and specify a source tree to copy containing appropriately owned/configured directories. This option may be used more than once to create multiple directories. When `CopyFiles=` and `MakeDirectories=` are used together the former is applied first. If a directory listed already exists no operation is executed (in particular, the ownership/access mode of the directories is left as is).\n\nThe primary use case for this option is to create a minimal set of directories that may be mounted over by other partitions contained in the same disk image. For example, a disk image where the root file system is formatted at first boot might want to automatically pre-create `/usr/` in it this way, so that the \"`usr`\" partition may over-mount it.\n\nConsider using [systemd-tmpfiles(8)](systemd-tmpfiles.html) with its `--image=` option to pre-create other, more complex directory hierarchies (as well as other inodes) with fine-grained control of ownership, access modes and other file attributes.\n\nAdded in version 249."],
[4,660,"Takes one or more absolute paths, separated by whitespace, each declaring a directory that should be a subvolume within the new file system. This option may be used more than once to specify multiple directories. Note that this setting does not create the directories themselves, that can be configured with `MakeDirectories=` and `CopyFiles=`.\n\nNote that this option only takes effect if the target filesystem supports subvolumes, such as \"`btrfs`\".\n\nNote that due to limitations of \"`mkfs.btrfs`\", this option is only supported when running with `--offline=no`.\n\nAdded in version 255."],
[4,661,"Takes one of \"`off`\", \"`key-file`\", \"`tpm2`\" and \"`key-file+tpm2`\" (alternatively, also accepts a boolean value, which is mapped to \"`off`\" when false, and \"`key-file`\" when true). Defaults to \"`off`\". If not \"`off`\" the partition will be formatted with a LUKS2 superblock, before the blocks configured with `CopyBlocks=` are copied in or the file system configured with `Format=` is created.\n\nThe LUKS2 UUID is automatically derived from the partition UUID in a stable fashion. If \"`key-file`\" or \"`key-file+tpm2`\" is used, a key is added to the LUKS2 superblock, configurable with the `--key-file=` option to **systemd-repart**. If \"`tpm2`\" or \"`key-file+tpm2`\" is used, a key is added to the LUKS2 superblock that is enrolled to the local TPM2 chip, as configured with the `--tpm2-device=` and `--tpm2-pcrs=` options to **systemd-repart**.\n\nWhen used this slightly alters the size allocation logic as the implicit, minimal size limits of `Format=` and `CopyBlocks=` are increased by the space necessary for the LUKS2 superblock (see above).\n\nThis option has no effect if the partition already exists.\n\nAdded in version 247."],
[4,662,"Takes one of \"`off`\", \"`data`\", \"`hash`\" or \"`signature`\". Defaults to \"`off`\". If set to \"`off`\" or \"`data`\", the partition is populated with content as specified by `CopyBlocks=` or `CopyFiles=`. If set to \"`hash`\", the partition will be populated with verity hashes from the matching verity data partition. If set to \"`signature`\", the partition will be populated with a JSON object containing a signature of the verity root hash of the matching verity hash partition.\n\nA matching verity partition is a partition with the same verity match key (as configured with `VerityMatchKey=`).\n\nIf not explicitly configured, the data partition's UUID will be set to the first 128 bits of the verity root hash. Similarly, if not configured, the hash partition's UUID will be set to the final 128 bits of the verity root hash. The verity root hash itself will be included in the output of **systemd-repart**.\n\nThis option has no effect if the partition already exists.\n\nUsage of this option in combination with `Encrypt=` is not supported.\n\nFor each unique `VerityMatchKey=` value, a single verity data partition (\"`Verity=data`\") and a single verity hash partition (\"`Verity=hash`\") must be defined.\n\nAdded in version 252."],
[4,663,"Takes a short, user-chosen identifier string. This setting is used to find sibling verity partitions for the current verity partition. See the description for `Verity=`.\n\nAdded in version 252."],
[4,664,"Configures the data block size of the generated verity hash partition. Must be between 512 and 4096 bytes and must be a power of 2. Defaults to the sector size if configured explicitly, or the underlying block device sector size, or 4K if systemd-repart is not operating on a block device.\n\nAdded in version 255."],
[4,665,"Configures the hash block size of the generated verity hash partition. Must be between 512 and 4096 bytes and must be a power of 2. Defaults to the sector size if configured explicitly, or the underlying block device sector size, or 4K if systemd-repart is not operating on a block device.\n\nAdded in version 255."],
[4,666,"Takes a boolean argument. If specified the partition is marked for removal during a factory reset operation. This functionality is useful to implement schemes where images can be reset into their original state by removing partitions and creating them anew. Defaults to off.\n\nAdded in version 245."],
[4,667,"Configures the 64-bit GPT partition flags field to set for the partition when creating it. This option has no effect if the partition already exists. If not specified the flags values is set to all zeroes, except for the three bits that can also be configured via `NoAuto=`, `ReadOnly=` and `GrowFileSystem=`; see below for details on the defaults for these three flags. Specify the flags value in hexadecimal (by prefixing it with \"`0x`\"), binary (prefix \"`0b`\") or decimal (no prefix).\n\nAdded in version 249."],
[4,668,"Configures the No-Auto, Read-Only and Grow-File-System partition flags (bit 63, 60 and 59) of the partition table entry, as defined by the [Discoverable Partitions Specification](https://uapi-group.org/specifications/specs/discoverable_partitions_specification). Only available for partition types supported by the specification. This option is a friendly way to set bits 63, 60 and 59 of the partition flags value without setting any of the other bits, and may be set via `Flags=` too, see above.\n\nIf `Flags=` is used in conjunction with one or more of `NoAuto=`/`ReadOnly=`/`GrowFileSystem=` the latter control the value of the relevant flags, i.e. the high-level settings `NoAuto=`/`ReadOnly=`/`GrowFileSystem=` override the relevant bits of the low-level setting `Flags=`.\n\nNote that the three flags affect only automatic partition mounting, as implemented by [systemd-gpt-auto-generator(8)](systemd-gpt-auto-generator.html) or the `--image=` option of various commands (such as [systemd-nspawn(1)](systemd-nspawn.html)). It has no effect on explicit mounts, such as those done via [mount(8)](https://man7.org/linux/man-pages/man8/mount.8.html) or [fstab(5)](https://man7.org/linux/man-pages/man5/fstab.5.html).\n\nIf both bit 50 and 59 are set for a partition (i.e. the partition is marked both read-only and marked for file system growing) the latter is typically without effect: the read-only flag takes precedence in most tools reading these flags, and since growing the file system involves writing to the partition it is consequently ignored.\n\n`NoAuto=` defaults to off. `ReadOnly=` defaults to on for Verity partition types, and off for all others. `GrowFileSystem=` defaults to on for all partition types that support it, except if the partition is marked read-only (and thus effectively, defaults to off for Verity partitions).\n\nAdded in version 249."],
[4,669,"Configures the suffix to append to split artifacts when the `--split` option of [systemd-repart(8)](systemd-repart.html) is used. Simple specifier expansion is supported, see below. Defaults to \"`%t`\". To disable split artifact generation for a partition, set `SplitName=` to \"`-`\".\n\nAdded in version 252."],
[4,670,"Takes one of \"`off`\", \"`best`\", and \"`guess`\" (alternatively, also accepts a boolean value, which is mapped to \"`off`\" when false, and \"`best`\" when true). Defaults to \"`off`\". If set to \"`best`\", the partition will have the minimal size required to store the sources configured with `CopyFiles=`. \"`best`\" is currently only supported for read-only filesystems. If set to \"`guess`\", the partition is created at least as big as required to store the sources configured with `CopyFiles=`. Note that unless the filesystem is a read-only filesystem, **systemd-repart** will have to populate the filesystem twice to guess the minimal required size, so enabling this option might slow down repart when populating large partitions.\n\nAdded in version 253."],
[2,"CopyBlocks","",655,64,19],
[2,"CopyFiles","",657,64,19],
[2,"Encrypt","",661,64,19],
[2,"ExcludeFiles","",658,64,19],
[2,"ExcludeFilesTarget","",658,64,19],
[2,"FactoryReset","",666,64,19],
[2,"Flags","",667,64,19],
[2,"Format","",656,64,19],
[2,"GrowFileSystem","",668,64,19],
[2,"Label","",648,64,19],
[2,"MakeDirectories","",659,64,19],
[2,"Minimize","",670,64,19],
[2,"NoAuto","",668,64,19],
[2,"PaddingMaxBytes","",654,64,19],
[2,"PaddingMinBytes","",654,64,19],
[2,"PaddingWeight","",652,64,19],
[2,"Priority","",650,64,19],
[2,"ReadOnly","",668,64,19],
[2,"SizeMaxBytes","",653,64,19],
[2,"SizeMinBytes","",653,64,19],
[2,"SplitName","",669,64,19],
[2,"Subvolumes","",660,64,19],
[2,"Type","",647,64,19],
[2,"UUID","",649,64,19],
[2,"Verity","",662,64,19],
[2,"VerityDataBlockSizeBytes","",664,64,19],
[2,"VerityHashBlockSizeBytes","",665,64,19],
[2,"VerityMatchKey","",663,64,19],
[2,"Weight","",651,64,19],
[3,65,"sysupdate.d(5)","sysupdate.d â€” Transfer Definition Files for Automatic Updates","sysupdate.d.html"],
[6,20,"Transfer"],
[6,21,"Source"],
[6,22,"Target"],
[4,671,"Specifies the minimum version to require for this transfer to take place. If the source or target patterns in this transfer definition match files older than this version they will be considered obsolete, and never be considered for the update operation.\n\nAdded in version 251."],
[4,672,"Takes one or more version strings to mark as \"protected\". Protected versions are never removed while making room for new, updated versions. This is useful to ensure that the currently booted OS version (or auxiliary resources associated with it) is not replaced/overwritten during updates, in order to avoid runtime file system corruptions.\n\nLike many of the settings in these configuration files this setting supports specifier expansion. It's particularly useful to set this setting to one of the \"`%A`\", \"`%B`\" or \"`%w`\" specifiers to automatically refer to the current OS version of the running system. See below for details on supported specifiers.\n\nAdded in version 251."],
[4,673,"Takes a boolean, defaults to yes. Controls whether to cryptographically verify downloaded resources (specifically: validate the GPG signatures for downloaded `SHA256SUMS` manifest files, via their detached signature files `SHA256SUMS.gpg` in combination with the system keyring `/usr/lib/systemd/import-pubring.gpg` or `/etc/systemd/import-pubring.gpg`).\n\nThis option is essential to provide integrity guarantees for downloaded resources and thus should be left enabled, outside of test environments.\n\nNote that the downloaded payload files are unconditionally checked against the SHA256 hashes listed in the manifest. This option only controls whether the signatures of these manifests are verified.\n\nThis option only has an effect if the source resource type is selected as `url-file` or `url-tar`, as integrity and authentication checking is only available for transfers from remote sources.\n\nAdded in version 251."],
[4,674,"Specifies the resource type of the source for the transfer. Takes one of `url-file`, `url-tar`, `tar`, `regular-file`, `directory` or `subvolume`. For details about the resource types, see above. This option is mandatory.\n\nNote that only certain combinations of source and target resource types are supported, see above.\n\nAdded in version 251."],
[4,675,"Specifies where to find source versions of this resource.\n\nIf the source type is selected as `url-file` or `url-tar` this must be a HTTP/HTTPS URL. The URL is suffixed with `/SHA256SUMS` to acquire the manifest file, with `/SHA256SUMS.gpg` to acquire the detached signature file for it, and with the file names listed in the manifest file in case an update is executed and a resource shall be downloaded.\n\nFor all other source resource types this must be a local path in the file system, referring to a local directory to find the versions of this resource in.\n\nAdded in version 251."],
[4,676,"Specifies one or more file name match patterns that select the subset of files that are update candidates as source for this transfer. See above for details on match patterns.\n\nThis option is mandatory. Any pattern listed must contain at least the \"`@v`\" wildcard, so that a version identifier may be extracted from the filename. All other wildcards are optional.\n\nIf the source type is `regular-file` or `directory`, the pattern may contain slash characters. In this case it will match the file or directory in corresponding subdirectory. For example \"`MatchPattern=foo_@v/bar.efi`\" will match \"`bar.efi`\" in directory \"`foo_1`\".\n\nAdded in version 251."],
[4,677,"Specifies the resource type of the target for the transfer. Takes one of `partition`, `regular-file`, `directory` or `subvolume`. For details about the resource types, see above. This option is mandatory.\n\nNote that only certain combinations of source and target resource types are supported, see above.\n\nAdded in version 251."],
[4,678,"Specifies a file system path where to look for already installed versions or place newly downloaded versions of this configured resource. If `Type=` is set to `partition`, expects a path to a (whole) block device node, or the special string \"`auto`\" in which case the block device which contains the root file system of the currently booted system is automatically determined and used. If `Type=` is set to `regular-file`, `directory` or `subvolume`, must refer to a path in the local file system referencing the directory to find or place the version files or directories under.\n\nNote that this mechanism cannot be used to create or remove partitions, in case `Type=` is set to `partition`. Partitions must exist already, and a special partition label \"`_empty`\" is used to indicate empty partitions. To automatically generate suitable partitions on first boot, use a tool such as [systemd-repart(8)](systemd-repart.html).\n\nAdded in version 251."],
[4,679,"Specifies what partition `Path=` should be relative to. Takes one of `root`, `esp`, `xbootldr`, or `boot`. If unspecified, defaults to `root`.\n\nIf set to `boot`, the specified `Path=` will be resolved relative to the mount point of the $BOOT partition (i.e. the ESP or XBOOTLDR), as defined by the [Boot Loader Specification](https://uapi-group.org/specifications/specs/boot_loader_specification).\n\nThe values `esp`, `xbootldr`, and `boot` are only supported when `Type=` is set to `regular-file` or `directory`.\n\nAdded in version 254."],
[4,680,"Specifies one or more file name or partition label match patterns that select the subset of files or partitions that are update candidates as targets for this transfer. See above for details on match patterns.\n\nThis option is mandatory. Any pattern listed must contain at least the \"`@v`\" wildcard, so that a version identifier may be extracted from the filename. All other wildcards are optional.\n\nThis pattern is both used for matching existing installed versions and for determining the name of new versions to install. If multiple patterns are specified, the first specified is used for naming newly installed versions.\n\nIf the target type is `regular-file` or `directory`, the pattern may contain slash characters. In this case it will match the file or directory in corresponding subdirectory. For example \"`MatchPattern=foo_@v/bar.efi`\" will match \"`bar.efi`\" in directory \"`foo_1`\". Directories in the path will be created when file is installed. Empty directories will be removed when file is removed.\n\nAdded in version 251."],
[4,681,"When the target `Type=` is chosen as `partition`, specifies the GPT partition type to look for. Only partitions of this type are considered, all other partitions are ignored. If not specified, the GPT partition type `linux-generic` is used. Accepts either a literal type UUID or a symbolic type identifier. For a list of supported type identifiers, see the `Type=` setting in [repart.d(5)](repart.d.html).\n\nAdded in version 251."],
[4,682,"When the target `Type=` is picked as `partition`, selects the GPT partition UUID and partition flags to use for the updated partition. Expects a valid UUID string, a hexadecimal integer, or booleans, respectively. If not set, but the source match pattern includes wildcards for these fields (i.e. \"`@u`\", \"`@f`\", \"`@a`\", or \"`@g`\"), the values from the patterns are used. If neither configured with wildcards or these explicit settings, the values are left untouched. If both the overall `PartitionFlags=` flags setting and the individual flag settings `PartitionNoAuto=` and `PartitionGrowFileSystem=` are used (or the wildcards for them), then the latter override the former, i.e. the individual flag bit overrides the overall flags value. See [Discoverable Partitions Specification](https://uapi-group.org/specifications/specs/discoverable_partitions_specification) for details about these flags.\n\nNote that these settings are not used for matching, they only have effect on newly written partitions in case a transfer takes place.\n\nAdded in version 251."],
[4,683,"Controls whether to mark the resulting file, subvolume or partition read-only. If the target type is `partition` this controls the ReadOnly partition flag, as per [Discoverable Partitions Specification](https://uapi-group.org/specifications/specs/discoverable_partitions_specification), similar to the `PartitionNoAuto=` and `PartitionGrowFileSystem=` flags described above. If the target type is `regular-file`, the writable bit is removed from the access mode. If the target type is `subvolume`, the subvolume will be marked read-only as a whole. Finally, if the target `Type=` is selected as `directory`, the \"immutable\" file attribute is set, see [chattr(1)](https://man7.org/linux/man-pages/man1/chattr.1.html) for details.\n\nAdded in version 251."],
[4,684,"The UNIX file access mode to use for newly created files in case the target resource type is picked as `regular-file`. Expects an octal integer, in typical UNIX fashion. If not set, but the source match pattern includes a wildcard for this field (i.e. \"`@t`\"), the value from the pattern is used.\n\nNote that this setting is not used for matching, it only has an effect on newly written files when a transfer takes place.\n\nAdded in version 251."],
[4,685,"These options take positive, decimal integers, and control the number of attempts done and left for this file. These settings are useful for managing kernel images, following the scheme defined in [Automatic Boot Assessment](https://systemd.io/AUTOMATIC_BOOT_ASSESSMENT), and only have an effect if the target pattern includes the \"`@d`\" or \"`@l`\" wildcards.\n\nAdded in version 251."],
[4,686,"Takes a decimal integer equal to or greater than 2. This configures how many concurrent versions of the resource to keep. Whenever a new update is initiated it is made sure that no more than the number of versions specified here minus one exist in the target. Any excess versions are deleted (in case the target `Type=` of `regular-file`, `directory`, `subvolume` is used) or emptied (in case the target `Type=` of `partition` is used; emptying in this case simply means to set the partition label to the special string \"`_empty`\"; note that no partitions are actually removed). After an update is completed the number of concurrent versions of the target resources is equal to or below the number specified here.\n\nNote that this setting may be set differently for each transfer. However, it generally is advisable to keep this setting the same for all transfers, since otherwise incomplete combinations of files or partitions will be left installed.\n\nIf the target `Type=` is selected as `partition`, the number of concurrent versions to keep is additionally restricted by the number of partition slots of the right type in the partition table. I.e. if there are only 2 partition slots for the selected partition type, setting this value larger than 2 is without effect, since no more than 2 concurrent versions could be stored in the image anyway.\n\nAdded in version 251."],
[4,687,"Takes a boolean argument. If this option is enabled (which is the default) before initiating an update, all left-over, incomplete updates from a previous attempt are removed from the target directory. This only has an effect if the target resource `Type=` is selected as `regular-file`, `directory` or `subvolume`.\n\nAdded in version 251."],
[4,688,"Takes a symlink name as argument. If this option is used, as the last step of the update a symlink under the specified name is created/updated pointing to the completed update. This is useful in to provide a stable name always pointing to the newest version of the resource. This is only supported if the target resource `Type=` is selected as `regular-file`, `directory` or `subvolume`.\n\nAdded in version 251."],
[2,"CurrentSymlink","",688,65,22],
[2,"InstancesMax","",686,65,22],
[2,"MatchPartitionType","",681,65,22],
[2,"MatchPattern","",680,65,22],
[2,"MatchPattern","",676,65,21],
[2,"MinVersion","",671,65,20],
[2,"Mode","",684,65,22],
[2,"PartitionFlags","",682,65,22],
[2,"PartitionGrowFileSystem","",682,65,22],
[2,"PartitionNoAuto","",682,65,22],
[2,"PartitionUUID","",682,65,22],
[2,"Path","",678,65,22],
[2,"Path","",675,65,21],
[2,"PathRelativeTo","",679,65,22],
[2,"ProtectVersion","",672,65,20],
[2,"ReadOnly","",683,65,22],
[2,"RemoveTemporary","",687,65,22],
[2,"TriesDone","",685,65,22],
[2,"TriesLeft","",685,65,22],
[2,"Type","",677,65,22],
[2,"Type","",674,65,21],
[2,"Verify","",673,65,20],
[3,66,"systemd.net-naming-scheme(7)","systemd.net-naming-scheme â€” Network device naming schemes","systemd.net-naming-scheme.html"],
[4,689,"This name is set based on the numeric ordering information given by the firmware for on-board devices. Different schemes are used depending on the firmware type, as described in the table below.\n\n**TableÂ 2.Â On-board naming schemes**\n\nFormat\n\nDescription\n\n_`prefix`_`o`_`number`_\n\nPCI on-board index\n\n_`prefix`_`d`_`number`_\n\nDevicetree alias index\n\n  \n\nAdded in version 243."],
[4,690,"This property is set based on textual label given by the firmware for on-board devices. The name consists of the prefix concatenated with the label. This is only available for PCI devices.\n\nAdded in version 243."],
[4,691,"This name consists of the prefix, letter `x`, and 12 hexadecimal digits of the MAC address. It is available if the device has a fixed MAC address. Because this name is based on an attribute of the card itself, it remains \"stable\" when the device is moved (even between machines), but will change when the hardware is replaced.\n\nAdded in version 243."],
[4,692,"This property describes the slot position. Different schemes are used depending on the bus type, as described in the table below. In case of USB, BCMA, and SR-VIO devices, the full name consists of the prefix, PCI slot identifier, and USB or BCMA or SR-VIO slot identifier. The first two parts are denoted as \"â€¦\" in the table below.\n\n**TableÂ 3.Â Slot naming schemes**\n\nFormat\n\nDescription\n\n_`prefix`_Â \\[`P`_`domain`_\\]Â `s`_`slot`_Â \\[`f`_`function`_\\]Â \\[`n`_`port_name`_Â |Â `d`_`dev_port`_\\]\n\nPCI slot number\n\n_`prefix`_Â `v`_`slot`_\n\nVIO slot number (IBM PowerVM)\n\n_`prefix`_Â `X`_`number`_\n\nVIF interface number (Xen)\n\nâ€¦Â `b`_`number`_\n\nBroadcom bus (BCMA) core number\n\nâ€¦Â `u`_`port`_â€¦Â \\[`c`_`config`_\\]Â \\[`i`_`interface`_\\]\n\nUSB port number chain\n\nâ€¦Â `v`_`slot`_\n\nSR-VIO slot number\n\nâ€¦Â `r`_`slot`_\n\nSR-IOV slot number\n\n  \n\nThe PCI domain is only prepended when it is not 0. All multi-function PCI devices will carry the ``f_`function`_`` number in the device name, including the function 0 device. For non-multi-function devices, the number is suppressed if 0. The port name _`port_name`_ is used, or the port number `d`_`dev_port`_ if the name is not known.\n\nFor BCMA devices, the core number is suppressed when 0.\n\nFor USB devices the full chain of port numbers of hubs is composed. If the name gets longer than the maximum number of 15 characters, the name is not exported. The usual USB configuration number 1 and interface number 0 values are suppressed.\n\nSR-IOV virtual devices are named based on the name of the parent interface, with a suffix of `v` and the virtual device number, with any leading zeros removed. The bus number is ignored.\n\nSR-IOV virtual device representors are named based on the name of the physical device interface, with a suffix of `r` and the number of the virtual device that is linked to the particular representor, with any leading zeros removed. The physical port name and the bus number are ignored.\n\nIn some configurations a parent PCI bridge of a given network controller may be associated with a slot. In such case we don't generate this device property to avoid possible naming conflicts.\n\nAdded in version 243."],
[4,693,"This property describes the device installation location. Different schemes are used depending on the bus type, as described in the table below. For BCMA and USB devices, PCI path information must known, and the full name consists of the prefix, PCI slot identifier, and USB or BCMA location. The first two parts are denoted as \"â€¦\" in the table below.\n\n**TableÂ 4.Â Path naming schemes**\n\nFormat\n\nDescription\n\n_`prefix`_Â `c`_`bus_id`_\n\nCCW or grouped CCW device identifier\n\n_`prefix`_Â `a`_`vendor`_Â _`model`_Â `i`_`instance`_\n\nACPI path names for ARM64 platform devices\n\n_`prefix`_Â `i`_`address`_Â `n`_`port_name`_\n\nNetdevsim (simulated networking device) device number and port name\n\n_`prefix`_Â \\[`P`_`domain`_\\]Â `p`_`bus`_Â `s`_`slot`_Â \\[`f`_`function`_\\]Â \\[`n`_`phys_port_name`_Â |Â `d`_`dev_port`_\\]\n\nPCI geographical location\n\nâ€¦Â `b`_`number`_\n\nBroadcom bus (BCMA) core number\n\nâ€¦Â `u`_`port`_â€¦Â \\[`c`_`config`_\\]Â \\[`i`_`interface`_\\]\n\nUSB port number chain\n\n  \n\nCCW and grouped CCW devices are found in IBM System Z mainframes. Any leading zeros and dots are suppressed.\n\nFor PCI, BCMA, and USB devices, the same rules as described above for slot naming are used.\n\nAdded in version 243."],
[2,"ID_NET_LABEL_ONBOARD","prefix label",690,66,null],
[2,"ID_NET_NAME_MAC","prefixxAABBCCDDEEFF",691,66,null],
[2,"ID_NET_NAME_ONBOARD",["prefixonumber","prefixdnumber"],689,66,null],
[2,"ID_NET_NAME_PATH",["prefixcbus_id","prefixavendormodeliinstance","prefixiaddressnport_name","prefixuportâ€¦","prefix[Pdomain]pbussslot[ffunction][nphys_port_name|ddev_port]","prefix[Pdomain]pbussslot[ffunction][nphys_port_name|ddev_port]bnumber","prefix[Pdomain]pbussslot[ffunction][nphys_port_name|ddev_port]uportâ€¦[cconfig][iinterface]"],693,66,null],
[2,"ID_NET_NAME_SLOT",["prefix[Pdomain]sslot[ffunction][nport_name|ddev_port]","prefixvslot","prefixxslot","prefix[Pdomain]sslot[ffunction][nport_name|ddev_port]bnumber","prefix[Pdomain]sslot[ffunction][nport_name|ddev_port]uportâ€¦[cconfig][iinterface]","prefix[Pdomain]sslot[ffunction][nport_name|ddev_port]vslot","prefix[Pdomain]sslot[ffunction][nport_name|ddev_port]rslot"],692,66,null]
]