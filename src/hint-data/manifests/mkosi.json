[
[3,1,"mkosi.1.md","mkosi - Build Bespoke OS Images","https://raw.githubusercontent.com/systemd/mkosi/7d45366395f29fdb2b534a850c09d23d29b78fa9/mkosi/resources/man/mkosi.1.md"],
[5,"C","Parent directory of current config file",""],
[5,"D","Directory that mkosi was invoked in",""],
[5,"F","The default filesystem of the configured distribution",""],
[5,"I","Name of the current subimage in mkosi.images",""],
[5,"O","OutputDirectory=",""],
[5,"P","Current working directory",""],
[5,"a","Architecture=",""],
[5,"d","Distribution=",""],
[5,"i","ImageId=",""],
[5,"o","Output=",""],
[5,"r","Release=",""],
[5,"t","Format=",""],
[5,"v","ImageVersion=",""],
[6,1,"Build"],
[4,1,"If specified, programs executed by mkosi to build and boot an image     are looked up inside the given tree instead of in the host system. Use     this option to make image builds more reproducible by always using the     same versions of programs to build the final image instead of whatever     version is installed on the host system. If this option is not used,     but the mkosi.tools/ directory is found in the local directory it is     automatically used for this purpose with the root directory as target.\n\n    Note if a binary is found in any of the paths configured with\n    `ExtraSearchPaths=`, the binary will be executed on the host.\n\n    If set to `default`, mkosi will automatically add an extra tools tree\n    image and use it as the tools tree.\n\n    Note that mkosi will only build a single default tools tree per build,\n    even if multiple images are defined in `mkosi.images` with\n    `ToolsTree=default`. The settings of the \"last\" image will apply to\n    the default tools tree (usually the image defined last in\n    mkosi.images and without any dependencies on other images).\n\n    The following table shows for which distributions default tools tree\n    packages are defined and which packages are included in those default\n    tools trees:\n\n    |                         | Fedora | CentOS | Debian | Kali | Ubuntu | Arch | openSUSE |\n    |-------------------------|:------:|:------:|:------:|:----:|:------:|:----:|:--------:|\n    | `acl`                   | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `apt`                   | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    |          |\n    | `archlinux-keyring`     | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    |          |\n    | `attr`                  | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `bash`                  | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `btrfs-progs`           | ✓      |        | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `ca-certificates`       | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `coreutils`             | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `cpio`                  | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `createrepo_c`          | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `curl`                  | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `debian-keyring`        | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    |          |\n    | `diffutils`             | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `distribution-gpg-keys` | ✓      | ✓      |        |      |        | ✓    | ✓        |\n    | `dnf`                   | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `dnf-plugins-core`      | ✓      | ✓      |        |      |        |      | ✓        |\n    | `dnf5`                  | ✓      |        |        |      |        |      |          |\n    | `dnf5-plugins`          | ✓      |        |        |      |        |      |          |\n    | `dosfstools`            | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `e2fsprogs`             | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `edk2-ovmf`             | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `erofs-utils`           | ✓      |        | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `findutils`             | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `git`                   | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `grep`                  | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `grub-tools`            | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    |          |\n    | `jq`                    | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `kali-archive-keyring`  |        |        |        | ✓    |        |      |          |\n    | `kmod`                  | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `less`                  | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `mtools`                | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `nano`                  | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `opensc`                | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `openssh`               | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `openssl`               | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `pkcs11-provider`       | ✓      |        | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `sed`                   | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `pacman`                | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    |          |\n    | `pesign`                | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `policycoreutils`       | ✓      | ✓      | ✓      | ✓    | ✓      |      | ✓        |\n    | `qemu`                  | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `sbsigntools`           | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `socat`                 | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `squashfs-tools`        | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `strace`                | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `swtpm`                 | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `systemd`               | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `ukify`                 | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `tar`                   | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `ubuntu-keyring`        | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    |          |\n    | `util-linux`            | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `virtiofsd`             | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `virt-firmware`         | ✓      | ✓      |        |      |        | ✓    |          |\n    | `xfsprogs`              | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `xz`                    | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `zstd`                  | ✓      | ✓      | ✓      | ✓    | ✓      | ✓    | ✓        |\n    | `zypper`                | ✓      |        | ✓      | ✓    | ✓      | ✓    |          |","mkosi.1.md#build-section"],
[4,2,"Set the distribution to use for the default tools tree. Defaults to the host distribution except for     Ubuntu, which defaults to Debian, and RHEL, CentOS, Alma and Rocky, which default to Fedora, or custom     if the distribution of the host is not a supported distribution.","mkosi.1.md#build-section"],
[4,3,"Set the distribution release to use for the default tools tree. By     default, the hardcoded default release in mkosi for the distribution     is used.","mkosi.1.md#build-section"],
[4,4,"Set the mirror to use for the default tools tree. By default, the     default mirror for the tools tree distribution is used.","mkosi.1.md#build-section"],
[4,5,"Same as Repositories= but for the default tools tree.","mkosi.1.md#build-section"],
[4,6,"Same as SandboxTrees= but for the default tools tree.","mkosi.1.md#build-section"],
[4,7,"Extra packages to install into the default tools tree. Takes a comma     separated list of package specifications. This option may be used     multiple times in which case the specified package lists are combined.","mkosi.1.md#build-section"],
[4,8,"Same as PackageDirectories=, but for the default tools tree.","mkosi.1.md#build-section"],
[4,9,"Specify whether to use certificates and keys from the tools tree.     Enabled by default. If enabled, /etc/pki, /etc/ssl,     /etc/ca-certificates, and /var/lib/ca-certificates from the     tools tree are used. Otherwise, these directories are picked up from     the host.","mkosi.1.md#build-section"],
[4,10,"List of colon-separated paths to look for tools in, before using the     regular $PATH search path.","mkosi.1.md#build-section"],
[4,11,"Takes either strict or a boolean value as its argument. Enables     incremental build mode. In this mode, a copy of the OS image is created     immediately after all OS packages are installed and the prepare scripts     have executed but before the mkosi.build scripts are invoked (or     anything that happens after it). On subsequent invocations of mkosi     with the -i switch this cached image may be used to skip the OS package     installation, thus drastically speeding up repetitive build times. Note     that while there is some rudimentary cache invalidation, it is definitely     not perfect. In order to force a rebuild of the cached image, combine     -i with -ff to ensure the cached image is first removed and then     re-created.\n\n    If set to `strict`, the build fails if previously built cached image does\n    not exist.","mkosi.1.md#build-section"],
[4,12,"Takes one of auto, metadata, always or never. Defaults to     auto. If always, the package manager is instructed not to contact     the network. This provides a minimal level of reproducibility, as long     as the package cache is already fully populated. If set to metadata,     the package manager can still download packages, but we won't sync the     repository metadata. If set to auto, the repository metadata is     synced unless we have a cached image (see Incremental=) and packages     can be downloaded during the build. If set to never, repository     metadata is always synced and and packages can be downloaded during     the build.","mkosi.1.md#build-section"],
[4,13,"Takes a comma separated list of colon separated path pairs. The first     path of each pair refers to a directory to copy into the mkosi     sandbox before executing a tool. If the mkosi.sandbox/ directory     is found in the local directory it is used for this purpose with the     root directory as target (also see the Files section below).\n\n    `mkosi` will look for the package manager configuration and related\n    files in the configured sandbox trees. Unless specified otherwise,\n    it will use the configuration files from their canonical locations\n    in `/usr` or `/etc` in the sandbox trees. For example, it  will look\n    for `/etc/dnf/dnf.conf` in the sandbox trees  if `dnf` is used to\n    install packages.","mkosi.1.md#build-section"],
[4,14,"Path to a directory where to store data required temporarily while     building the image. This directory should have enough space to store     the full OS image, though in most modes the actually used disk space     is smaller. If not specified, a subdirectory of $XDG_CACHE_HOME (if     set), $HOME/.cache (if set) or /var/tmp is used.\n\n    The data in this directory is removed automatically after each\n    build. It's safe to manually remove the contents of this directory\n    should an `mkosi` invocation be aborted abnormally (for example, due\n    to reboot/power failure).","mkosi.1.md#build-section"],
[4,15,"Takes a path to a directory to use as the incremental cache directory     for the incremental images produced when the Incremental= option is     enabled. If this option is not used, but a mkosi.cache/ directory is     found in the local directory it is automatically used for this     purpose.","mkosi.1.md#build-section"],
[4,16,"Takes a path to a directory to use as the package cache directory for     the distribution package manager used. If unset, a suitable directory     in the user's home directory or system is used.","mkosi.1.md#build-section"],
[4,17,"Takes a path to a directory to use as the build directory for build     systems that support out-of-tree builds (such as Meson). The directory     used this way is shared between repeated builds, and allows the build     system to reuse artifacts (such as object files, executable, …)     generated on previous invocations. The build scripts can find the path     to this directory in the $BUILDDIR environment variable. This     directory is mounted into the image's root directory when     mkosi-chroot is invoked during execution of the build scripts. If     this option is not specified, but a directory mkosi.builddir/ exists     in the local directory it is automatically used for this purpose (also     see the Files section below).","mkosi.1.md#build-section"],
[4,18,"Takes a boolean or auto. Enables or disables use of btrfs subvolumes for     directory tree outputs. If enabled, mkosi will create the root directory as     a btrfs subvolume and use btrfs subvolume snapshots where possible to copy     base or cached trees which is much faster than doing a recursive copy. If     explicitly enabled and btrfs is not installed or subvolumes cannot be     created, an error is raised. If auto, missing btrfs or failures to     create subvolumes are ignored.","mkosi.1.md#build-section"],
[4,19,"Specifies whether to build disk images using loopback devices. Enabled     by default. When enabled, systemd-repart will not use loopback     devices to build disk images. When disabled, systemd-repart will     always use loopback devices to build disk images.\n\n    Note that when using `RepartOffline=no` mkosi cannot run unprivileged and\n    the image build has to be done as the root user outside of any\n    containers and with loopback devices available on the host system.\n\n    There are currently two known scenarios where `RepartOffline=no` has to be\n    used. The first is when using `Subvolumes=` in a repart partition\n    definition file, as subvolumes cannot be created without using\n    loopback devices. The second is when creating a system with SELinux\n    and an XFS root partition. Because `mkfs.xfs` does not support\n    populating an XFS filesystem with extended attributes, loopback\n    devices have to be used to ensure the SELinux extended attributes end\n    up in the generated XFS filesystem.","mkosi.1.md#build-section"],
[4,20,"Takes a boolean. If enabled, mkosi will write information about the     latest build to the .mkosi-private subdirectory in the directory     from which it was invoked. This information is then used to restore     the config of the latest build when running any verb that needs a     build without specifying --force.\n\n    To give an example of why this is useful, if you run\n    `mkosi -O my-custom-output-dir -f` followed by `mkosi qemu`, `mkosi`\n    will fail saying the image hasn't been built yet. If you run\n    `mkosi -O my-custom-output-dir --history=yes -f` followed by\n    `mkosi qemu`, it will boot the image built in the previous step as\n    expected.","mkosi.1.md#build-section"],
[4,21,"Takes a comma separated list of colon separated path pairs. The first     path of each pair refers to a directory to mount from the host. The     second path of each pair refers to the directory where the source     directory should be mounted when running scripts. Every target path is     prefixed with /work/src and all build sources are sorted     lexicographically by their target before mounting, so that top level     paths are mounted first. If not configured explicitly, the current     working directory is mounted to /work/src.","mkosi.1.md#build-section"],
[4,22,"Takes a boolean. Disabled by default. Configures whether changes to     source directories (The working directory and configured using     BuildSources=) are persisted. If enabled, all source directories     will be reset to their original state every time after running all     scripts of a specific type (except sync scripts).","mkosi.1.md#build-section"],
[4,23,"Adds variables to the environment that package managers and the     prepare/build/postinstall/finalize scripts are executed with. Takes     a space-separated list of variable assignments or just variable     names. In the latter case, the values of those variables will be     passed through from the environment in which mkosi was invoked.     This option may be specified more than once, in which case all     listed variables will be set. If the same variable is set twice, the     later setting overrides the earlier one.","mkosi.1.md#build-section"],
[4,24,"Takes a comma-separated list of paths to files that contain environment     variable definitions to be added to the scripting environment. Uses     mkosi.env if it is found in the local directory. The variables are     first read from mkosi.env if it exists, then from the given list of     files and then from the Environment= settings.","mkosi.1.md#build-section"],
[4,25,"If set to false (or when the command-line option is used), the     $WITH_TESTS environment variable is set to 0 when the     mkosi.build scripts are invoked. This is supposed to be used by the     build scripts to bypass any unit or integration tests that are     normally run during the source build process. Note that this option     has no effect unless the mkosi.build build scripts honor it.","mkosi.1.md#build-section"],
[4,26,"When true, enables network connectivity while the build scripts     mkosi.build are invoked. By default, the build scripts run with     networking turned off. The $WITH_NETWORK environment variable is     passed to the mkosi.build build scripts indicating whether the     build is done with or without network.","mkosi.1.md#build-section"],
[4,27,"Configure a proxy to be used for all outgoing network connections.     Various tools that mkosi invokes and for which the proxy can be     configured are configured to use this proxy. mkosi also sets various     well-known environment variables to specify the proxy to use for any     programs it invokes that may need internet access.","mkosi.1.md#build-section"],
[4,28,"Configure hostnames for which requests should not go through the     proxy. Takes a comma separated list of hostnames.","mkosi.1.md#build-section"],
[4,29,"Configure a file containing certificates used to verify the proxy.     Defaults to the system-wide certificate store.\n\n    Currently, setting a proxy peer certificate is only supported when\n    `dnf` or `dnf5` is used to build the image.","mkosi.1.md#build-section"],
[4,30,"Configure a file containing the certificate used to authenticate the     client with the proxy.\n\n    Currently, setting a proxy client certificate is only supported when\n    `dnf` or `dnf5` is used to build the image.","mkosi.1.md#build-section"],
[4,31,"Configure a file containing the private key used to authenticate the     client with the proxy. Defaults to the proxy client certificate if one     is provided.\n\n    Currently, setting a proxy client key is only supported when `dnf` or\n    `dnf5` is used to build the image.","mkosi.1.md#build-section"],
[2,"BuildDirectory",[],17,1,1],
[2,"BuildSources",[],21,1,1],
[2,"BuildSourcesEphemeral","b",22,1,1],
[2,"CacheDirectory",[],15,1,1],
[2,"CacheOnly",[],12,1,1],
[2,"Environment",[],23,1,1],
[2,"EnvironmentFiles",[],24,1,1],
[2,"ExtraSearchPaths",[],10,1,1],
[2,"History","b",20,1,1],
[2,"Incremental",[],11,1,1],
[2,"PackageCacheDirectory",[],16,1,1],
[2,"ProxyClientCertificate",[],30,1,1],
[2,"ProxyClientKey",[],31,1,1],
[2,"ProxyExclude",[],28,1,1],
[2,"ProxyPeerCertificate",[],29,1,1],
[2,"ProxyUrl",[],27,1,1],
[2,"RepartOffline",[],19,1,1],
[2,"SandboxTrees",[],13,1,1],
[2,"ToolsTree",[],1,1,1],
[2,"ToolsTreeCertificates",[],9,1,1],
[2,"ToolsTreeDistribution",[],2,1,1],
[2,"ToolsTreeMirror",[],4,1,1],
[2,"ToolsTreePackageDirectories",[],8,1,1],
[2,"ToolsTreePackages",[],7,1,1],
[2,"ToolsTreeRelease",[],3,1,1],
[2,"ToolsTreeRepositories",[],5,1,1],
[2,"ToolsTreeSandboxTrees",[],6,1,1],
[2,"UseSubvolumes",[],18,1,1],
[2,"WithNetwork",[],26,1,1],
[2,"WithTests",[],25,1,1],
[2,"WorkspaceDirectory",[],14,1,1],
[6,2,"Config"],
[4,32,"Select the given profiles. A profile is a configuration file or     directory in the mkosi.profiles/ directory. The configuration files     and directories of each profile are included after parsing the     mkosi.conf.d/*.conf drop in configuration.","mkosi.1.md#config-section"],
[4,33,"The images that this image depends on specified as a comma-separated     list. All images configured in this option will be built before this     image.\n\n    When this setting is specified for the \"main\" image, it specifies\n    which subimages should be built. See the\n    **Building multiple images** section for more information.","mkosi.1.md#config-section"],
[4,34,"The minimum mkosi version required to build this configuration. If     specified multiple times, the highest specified version is used.","mkosi.1.md#config-section"],
[4,35,"Takes a comma-separated list of paths to executables that are used as     the configure scripts for this image. See the Scripts section for     more information.","mkosi.1.md#config-section"],
[4,36,"Takes a list of environment variable names separated by spaces. When     building multiple images, pass the listed environment variables to     each individual subimage as if they were \"universal\" settings. See     the Building multiple images section for more information.","mkosi.1.md#config-section"],
[2,"ConfigureScripts",[],35,1,2],
[2,"Dependencies",[],33,1,2],
[2,"MinimumVersion",[],34,1,2],
[2,"PassEnvironment",[],36,1,2],
[2,"Profiles",[],32,1,2],
[6,3,"Content"],
[4,37,"Install the specified distribution packages (i.e. RPM, DEB, …) in the     image. Takes a comma separated list of package specifications. This     option may be used multiple times in which case the specified package     lists are combined. Use BuildPackages= to specify packages that     shall only be installed in an overlay that is mounted when the prepare     scripts are executed with the build argument and when the build scripts     are executed.\n\n    The types and syntax of *package specifications* that are allowed\n    depend on the package installer (e.g. `dnf` for `rpm`-based distros or\n    `apt` for `deb`-based distros), but may include package names, package\n    names with version and/or architecture, package name globs, package\n    groups, and virtual provides, including file paths.\n\n    See `PackageDirectories=` for information on how to make local\n    packages available for installation with `Packages=`.\n\n    **Example**: when using a distro that uses `dnf`, the following configuration\n    would install the `meson` package (in the latest version), the 32-bit version\n    of the `libfdisk-devel` package, all available packages that start with the\n    `git-` prefix, a `systemd` rpm from the local file system, one of the\n    packages that provides `/usr/bin/ld`, the packages in the *Development Tools*\n    group, and the package that contains the `mypy` python module.\n\n    ```ini\n    Packages=meson\n             libfdisk-devel.i686\n             git-*\n             /usr/bin/ld\n             @development-tools\n             python3dist(mypy)\n    ```","mkosi.1.md#content-section"],
[4,38,"Similar to Packages=, but configures packages to install only in an     overlay that is made available on top of the image to the prepare     scripts when executed with the build argument and the build scripts.     This option should be used to list packages containing header files,     compilers, build systems, linkers and other build tools the     mkosi.build scripts require to operate. Note that packages listed     here will be absent in the final image.","mkosi.1.md#content-section"],
[4,39,"Similar to Packages=, but packages configured with this setting are     not cached when Incremental= is enabled and are installed after     executing any build scripts.\n\n    Specifically, this setting can be used to install packages that change\n    often or which are built by a build script.","mkosi.1.md#content-section"],
[4,40,"Specify directories containing extra packages to be made available during     the build. mkosi will create a local repository containing all     packages in these directories and make it available when installing packages or     running scripts. If the mkosi.packages/ directory is found in the local     directory it is also used for this purpose.","mkosi.1.md#content-section"],
[4,41,"Like `PackageDirectories=`, but any changes to the packages in these\n    directories will not invalidate the cached images if `Incremental=`\n    is enabled.\n\n    Additionally, build scripts can add more packages to the local\n    repository by placing the built packages in `$PACKAGEDIR`. The\n    packages placed in `$PACKAGEDIR` are shared between all image builds\n    and thus available for installation in all images using\n    `VolatilePackages=`.","mkosi.1.md#content-section"],
[4,42,"Configures whether to install recommended or weak dependencies,     depending on how they are named by the used package manager, or not.     By default, recommended packages are not installed. This is only used     for package managers that support the concept, which are currently     apt, dnf and zypper.","mkosi.1.md#content-section"],
[4,43,"Include documentation in the image. Enabled by default. When disabled,     if the underlying distribution package manager supports it     documentation is not included in the image. The $WITH_DOCS     environment variable passed to the mkosi.build scripts is set to 0     or 1 depending on whether this option is enabled or disabled.","mkosi.1.md#content-section"],
[4,44,"Takes a comma separated list of paths to use as base trees. When used,     these base trees are each copied into the OS tree and form the base     distribution instead of installing the distribution from scratch. Only     extra packages are installed on top of the ones already installed in     the base trees. Note that for this to work properly, the base image     still needs to contain the package manager metadata by setting     CleanPackageMetadata=no (see CleanPackageMetadata=).\n\n    Instead of a directory, a tar file or a disk image may be provided. In\n    this case it is unpacked into the OS tree. This mode of operation\n    allows setting permissions and file ownership explicitly, in\n    particular for projects stored in a version control system such as\n    `git` which retain full file ownership and access mode metadata for\n    committed files.","mkosi.1.md#content-section"],
[4,45,"Takes a comma separated list of colon separated path pairs. The first     path of each pair refers to a directory to copy into the OS tree     before invoking the package manager. The second path of each pair     refers to the target directory inside the image. If the second path is     not provided, the directory is copied on top of the root directory of     the image. The second path is always interpreted as an absolute path.     Use this to insert files and directories into the OS tree before the     package manager installs any packages. If the mkosi.skeleton/     directory is found in the local directory it is also used for this     purpose with the root directory as target (also see the Files     section below).\n\n    Note that skeleton trees are cached and any changes to skeleton trees\n    after a cached image has been built (when using `Incremental=`) are\n    only applied when the cached image is rebuilt (by using `-ff` or\n    running `mkosi -f clean`).\n\n    As with the base tree logic above, instead of a directory, a tar\n    file may be provided too. `mkosi.skeleton.tar` will be automatically\n    used if found in the local directory.\n\n    To add extra package manager configuration files such as extra\n    repositories, use `SandboxTrees=` as mkosi invokes the package\n    managers from outside the image and not inside so any package\n    manager configuration files provided via `SkeletonTrees=` won't\n    take effect when mkosi invokes a package manager to install\n    packages.","mkosi.1.md#content-section"],
[4,46,"Takes a comma separated list of colon separated path pairs. The first     path of each pair refers to a directory to copy from the host into the     image. The second path of each pair refers to the target directory     inside the image. If the second path is not provided, the directory is     copied on top of the root directory of the image. The second path is     always interpreted as an absolute path. Use this to override any     default configuration files shipped with the distribution. If the     mkosi.extra/ directory is found in the local directory it is also     used for this purpose with the root directory as target. (also see the     Files section below).\n\n    As with the base tree logic above, instead of a directory, a tar\n    file may be provided too. `mkosi.extra.tar` will be automatically\n    used if found in the local directory.","mkosi.1.md#content-section"],
[4,47,"Takes a comma-separated list of package specifications for removal, in     the same format as Packages=. The removal will be performed as one     of the last steps. This step is skipped if CleanPackageMetadata=no     is used.","mkosi.1.md#content-section"],
[4,48,"Takes a comma-separated list of globs. Files in the image matching     the globs will be purged at the end.","mkosi.1.md#content-section"],
[4,49,"Enable/disable removal of package manager databases and repository     metadata at the end of installation. Can be specified as true,     false, or auto (the default). With auto, package manager     databases and repository metadata will be removed if the respective     package manager executable is not present at the end of the     installation.","mkosi.1.md#content-section"],
[4,50,"Takes a timestamp in seconds since the UNIX epoch as argument.     File modification times of all files will be clamped to this value.     The variable is also propagated to systemd-repart and     scripts executed by mkosi. If not set explicitly, SOURCE_DATE_EPOCH from     --environment and from the host environment are tried in that order.     This is useful to make builds reproducible. See     SOURCE_DATE_EPOCH     for more information.","mkosi.1.md#content-section"],
[4,51,"Takes a comma-separated list of paths to executables that are used as     the sync scripts for this image. See the Scripts section for     more information.","mkosi.1.md#content-section"],
[4,52,"Takes a comma-separated list of paths to executables that are used as     the prepare scripts for this image. See the Scripts section for     more information.","mkosi.1.md#content-section"],
[4,53,"Takes a comma-separated list of paths to executables that are used as     the build scripts for this image. See the Scripts section for more     information.","mkosi.1.md#content-section"],
[4,54,"Takes a comma-separated list of paths to executables that are used as     the post-installation scripts for this image. See the Scripts section     for more information.","mkosi.1.md#content-section"],
[4,55,"Takes a comma-separated list of paths to executables that are used as     the finalize scripts for this image. See the Scripts section for more     information.","mkosi.1.md#content-section"],
[4,56,"Takes a comma-separated list of paths to executables that are used as     the post output scripts for this image. See the Scripts section for more     information.","mkosi.1.md#content-section"],
[4,57,"Takes a boolean or auto. Enables or disables generation of a     bootable image. If enabled, mkosi will install an EFI bootloader, and     add an ESP partition when the disk image output is used. If the     selected EFI bootloader (See Bootloader=) is not installed or no     kernel images can be found, the build will fail. auto behaves as if     the option was enabled, but the build won't fail if either no kernel     images or the selected EFI bootloader can't be found. If disabled, no     bootloader will be installed even if found inside the image, no     unified kernel images will be generated and no ESP partition will be     added to the image if the disk output format is used.","mkosi.1.md#content-section"],
[4,58,"Takes one of none, systemd-boot, uki or grub. Defaults to     systemd-boot. If set to none, no EFI bootloader will be installed     into the image. If set to systemd-boot, systemd-boot will be     installed and for each installed kernel, a UKI will be generated and     stored in EFI/Linux in the ESP. If set to uki, a single UKI will     be generated for the latest installed kernel (the one with the highest     version) which is installed to EFI/BOOT/BOOTX64.EFI in the ESP. If     set to grub, for each installed kernel, a UKI will be generated and     stored in EFI/Linux in the ESP. For each generated UKI, a menu entry     is appended to the grub configuration in grub/grub.cfg in the ESP     which chainloads into the UKI. A shim grub.cfg is also written to     EFI/<distribution>/grub.cfg in the ESP which loads grub/grub.cfg     in the ESP for compatibility with signed versions of grub which load     the grub configuration from this location.\n\n    Note that we do not yet install grub to the ESP when `Bootloader=` is\n    set to `grub`. This has to be done manually in a postinst or finalize\n    script. The grub EFI binary should be installed to\n    `/efi/EFI/BOOT/BOOTX64.EFI` (or similar depending on the architecture)\n    and should be configured to load its configuration from\n    `EFI/<distribution>/grub.cfg` in the ESP. Signed versions of grub\n    shipped by distributions will load their configuration from this\n    location by default.\n\n    Kernels need to be placed into the root filesystem (for example using\n    `ExtraTrees=`) under `/usr/lib/modules/$version`, named `vmlinux` or\n    `vmlinuz`. The `$version` is as produced by Kbuild's `kernelversion` make\n    target.","mkosi.1.md#content-section"],
[4,59,"Takes one of none or grub. Defaults to none. If set to none,     no BIOS bootloader will be installed. If set to grub, grub is     installed as the BIOS boot loader if a bootable image is requested     with the Bootable= option. If no repart partition definition files     are configured, mkosi will add a grub BIOS boot partition and an EFI     system partition to the default partition definition files.\n\n    Note that this option is not mutually exclusive with `Bootloader=`. It\n    is possible to have an image that is both bootable on UEFI and BIOS by\n    configuring both `Bootloader=` and `BiosBootloader=`.\n\n    The grub BIOS boot partition should have UUID\n    `21686148-6449-6e6f-744e-656564454649` and should be at least 1MB.\n\n    Even if no EFI bootloader is installed, we still need an ESP for BIOS\n    boot as that's where we store the kernel, initrd and grub modules.","mkosi.1.md#content-section"],
[4,60,"Takes one of none, unsigned, or signed. Defaults to none. If     set to none, shim and MokManager will not be installed to the ESP.     If set to unsigned, mkosi will search for unsigned shim and     MokManager EFI binaries and install them. If SecureBoot= is enabled,     mkosi will sign the unsigned EFI binaries before installing them. If     set to signed, mkosi will search for signed EFI binaries and install     those. Even if SecureBoot= is enabled, mkosi won't sign these     binaries again.\n\n    Note that this option only takes effect when an image that is bootable\n    on UEFI firmware is requested using other options\n    (`Bootable=`, `Bootloader=`).\n\n    Note that when this option is enabled, mkosi will only install already\n    signed bootloader binaries, kernel image files and unified kernel\n    images as self-signed binaries would not be accepted by the signed\n    version of shim.","mkosi.1.md#content-section"],
[4,61,"Specifies whether to use unified kernel images or not when     Bootloader= is set to systemd-boot or grub. Takes a boolean     value or auto. Defaults to auto. If enabled, unified kernel images     are always used and the build will fail if any components required to     build unified kernel images are missing. If set to auto, unified     kernel images will be used if all necessary components are available.     Otherwise Type 1 entries as defined by the Boot Loader Specification     will be used instead. If disabled, Type 1 entries will always be used.","mkosi.1.md#content-section"],
[4,62,"Takes a filename without any path components to specify the format that     unified kernel images should be installed as. This may include both the     regular specifiers (see Specifiers) and special delayed specifiers, that     are expanded during the installation of the files, which are described below.     The default format for this parameter is &e-&k with -&h being appended     if roothash= or usrhash= is found on the kernel command line and +&c     if /etc/kernel/tries is found in the image.\n\n    The following specifiers may be used:\n\n    | Specifier | Value                                              |\n    |-----------|----------------------------------------------------|\n    | `&&`      | `&` character                                      |\n    | `&e`      | Entry Token                                        |\n    | `&k`      | Kernel version                                     |\n    | `&h`      | `roothash=` or `usrhash=` value of kernel argument |\n    | `&c`      | Number of tries used for boot attempt counting     |","mkosi.1.md#content-section"],
[4,63,"Build additional UKI profiles. Takes a comma separated list of paths     to UKI profile config files. This option may be used multiple times in     which case each config gets built into a corresponding UKI profile.     Config files in the mkosi.uki-profiles/ directory are     automatically picked up. All configured UKI profiles are added as     additional UKI profiles to each UKI built by mkosi.\n\n    See the documentation for the `UKIProfile` section for information\n    on which settings can be configured in UKI profile config files.","mkosi.1.md#content-section"],
[4,64,"Use user-provided initrd(s). Takes a comma separated list of paths to initrd     files. This option may be used multiple times in which case the initrd lists     are combined. If no initrds are specified and a bootable image is requested,     mkosi will look for initrds in a subdirectory io.mkosi.initrd of the     artifact directory (see $ARTIFACTDIR in the section ENVIRONMENT     VARIABLES), if none are found there mkosi will automatically build a     default initrd.","mkosi.1.md#content-section"],
[4,65,"Extra packages to install into the default initrd. Takes a comma     separated list of package specifications. This option may be used     multiple times in which case the specified package lists are combined.","mkosi.1.md#content-section"],
[4,66,"Similar to VolatilePackages=, except it applies to the default     initrd.","mkosi.1.md#content-section"],
[4,67,"When set to true only include microcode for the host's CPU in the image.","mkosi.1.md#content-section"],
[4,68,"Use the specified kernel command line when building images.\n\n    If the root or usr partition are created with verity enabled,\n    `roothash=` or `usrhash=` respectively are automatically added to the\n    kernel command line and `root=` or `mount.usr=` should not be added.\n    Otherwise, if the value of this setting contains the literals\n    `root=PARTUUID` or `mount.usr=PARTUUID`, these are replaced with the\n    partition UUID of the root or usr partition respectively. For\n    example, `root=PARTUUID` would be replaced with\n    `root=PARTUUID=58c7d0b2-d224-4834-a16f-e036322e88f7` where\n    `58c7d0b2-d224-4834-a16f-e036322e88f7` is the partition UUID of the\n    root partition.","mkosi.1.md#content-section"],
[4,69,"Takes a list of regex patterns that specify kernel modules to include in the image. Patterns should be     relative to the /usr/lib/modules/<kver>/kernel directory. mkosi checks for a match anywhere in the module     path (e.g. i915 will match against drivers/gpu/drm/i915.ko). All modules that match any of the     specified patterns are included in the image. All module and firmware dependencies of the matched modules     are included in the image as well.\n\n    If the special value `default` is used, the default kernel modules\n    defined in the `mkosi-initrd` configuration are included as well.\n\n    If the special value `host` is used, the currently loaded modules on\n    the host system are included as well.\n\n    This setting takes priority over `KernelModulesExclude=` and only makes\n    sense when used in combination with it because all kernel modules are included in the image by default.","mkosi.1.md#content-section"],
[4,70,"Takes a list of regex patterns that specify modules to exclude from the image. Behaves the same as     KernelModulesInclude= except that all modules that match any of the specified patterns are excluded from     the image.","mkosi.1.md#content-section"],
[4,71,"Boolean value, enabled (true) by default. If enabled, when building a bootable image, mkosi will generate     an extra initrd for each unified kernel image it assembles. This initrd contains only modules for     the specific kernel version, and will be appended to the prebuilt initrd. This allows generating kernel     independent initrds which are augmented with the necessary modules when the UKI is assembled.","mkosi.1.md#content-section"],
[4,72,"Like KernelModulesInclude=, but applies to the kernel modules included in the kernel modules initrd.","mkosi.1.md#content-section"],
[4,73,"Like KernelModulesExclude=, but applies to the kernel modules included in the kernel modules initrd.","mkosi.1.md#content-section"],
[4,74,"The settings Locale=, --locale=, LocaleMessages=, --locale-messages=,     Keymap=, --keymap=, Timezone=, --timezone=, Hostname=,     --hostname=, RootShell=, --root-shell= correspond to the identically     named systemd-firstboot options. See the systemd firstboot     manpage     for more information.  Additionally, where applicable, the corresponding     systemd credentials for these settings are written to /usr/lib/credstore,     so that they apply even if only /usr is shipped in the image.","mkosi.1.md#content-section"],
[4,75,"Set the system root password. If this option is not used, but a mkosi.rootpw file is found in the local     directory, the password is automatically read from it or if the file is executable it is run as a script     and stdout is read instead (see the Scripts section below). If the password starts with hashed:, it is     treated as an already hashed root password. The root password is also stored in /usr/lib/credstore under     the appropriate systemd credential so that it applies even if only /usr is shipped in the image. To create     an unlocked account without any password use hashed: without a hash.","mkosi.1.md#content-section"],
[4,76,"Enable autologin for the root user on /dev/pts/0 (nspawn),     /dev/tty1 and /dev/hvc0.","mkosi.1.md#content-section"],
[4,77,"Add /etc/initrd-release and /init to the image so that it can be     used as an initramfs.","mkosi.1.md#content-section"],
[4,78,"If specified, an sshd socket unit and matching service are installed     in the final image that expose SSH over VSock. When building with this     option and running the image using mkosi qemu, the mkosi ssh     command can be used to connect to the container/VM via SSH. Note that     you still have to make sure openssh is installed in the image to make     this option behave correctly. Run mkosi genkey to automatically     generate an X509 certificate and private key to be used by mkosi to     enable SSH access to any virtual machines via mkosi ssh. To access     images booted using mkosi boot, use machinectl.","mkosi.1.md#content-section"],
[4,79,"Specifies whether to relabel files to match the image's SELinux     policy. Takes a boolean value or auto. Defaults to auto. If     disabled, files will not relabeled. If enabled, an SELinux policy has     to be installed in the image and setfiles has to be available to     relabel files. If any errors occur during setfiles, the build will     fail. If set to auto, files will be relabeled if an SELinux policy     is installed in the image and if setfiles is available. Any errors     occurred during setfiles will be ignored.\n\n    Note that when running unprivileged, `setfiles` will fail to set any\n    labels that are not in the host's SELinux policy. To ensure `setfiles`\n    succeeds without errors, make sure to run mkosi as root or build from\n    a host system with the same SELinux policy as the image you're\n    building.","mkosi.1.md#content-section"],
[4,80,"Takes a UUID or the special value `random`. Sets the machine ID of the\n   image to the specified UUID. If set to `random`, a random UUID will be\n   written to `/etc/machine-id`. If not specified explicitly and the file\n   `mkosi.machine-id` exists in the local directory, the UUID to use is\n   read from it. Otherwise, `uninitialized` will be written to `/etc/machine-id`.","mkosi.1.md#content-section"],
[2,"Autologin",[],76,1,3],
[2,"BaseTrees",[],44,1,3],
[2,"BiosBootloader",[],59,1,3],
[2,"Bootable",[],57,1,3],
[2,"Bootloader",[],58,1,3],
[2,"BuildPackages",[],38,1,3],
[2,"BuildScripts",[],53,1,3],
[2,"CleanPackageMetadata",[],49,1,3],
[2,"ExtraTrees",[],46,1,3],
[2,"FinalizeScripts",[],55,1,3],
[2,"Hostname",[],74,1,3],
[2,"InitrdPackages",[],65,1,3],
[2,"InitrdVolatilePackages",[],66,1,3],
[2,"Initrds",[],64,1,3],
[2,"KernelCommandLine",[],68,1,3],
[2,"KernelModulesExclude",[],70,1,3],
[2,"KernelModulesInclude",[],69,1,3],
[2,"KernelModulesInitrd",[],71,1,3],
[2,"KernelModulesInitrdExclude",[],73,1,3],
[2,"KernelModulesInitrdInclude",[],72,1,3],
[2,"Keymap",[],74,1,3],
[2,"Locale",[],74,1,3],
[2,"LocaleMessages",[],74,1,3],
[2,"MachineId",[],80,1,3],
[2,"MakeInitrd",[],77,1,3],
[2,"MicrocodeHost",[],67,1,3],
[2,"PackageDirectories",[],40,1,3],
[2,"Packages",[],37,1,3],
[2,"PostInstallationScripts",[],54,1,3],
[2,"PostOutputScripts",[],56,1,3],
[2,"PrepareScripts",[],52,1,3],
[2,"RemoveFiles",[],48,1,3],
[2,"RemovePackages",[],47,1,3],
[2,"RootPassword",[],75,1,3],
[2,"RootShell",[],74,1,3],
[2,"SELinuxRelabel","B",79,1,3],
[2,"ShimBootloader",[],60,1,3],
[2,"SkeletonTrees",[],45,1,3],
[2,"SourceDateEpoch",[],50,1,3],
[2,"Ssh",[],78,1,3],
[2,"SyncScripts",[],51,1,3],
[2,"Timezone",[],74,1,3],
[2,"UnifiedKernelImageFormat",[],62,1,3],
[2,"UnifiedKernelImageProfiles",[],63,1,3],
[2,"UnifiedKernelImages","B",61,1,3],
[2,"VolatilePackageDirectories",[],41,1,3],
[2,"VolatilePackages",[],39,1,3],
[2,"WithDocs",[],43,1,3],
[2,"WithRecommends",[],42,1,3],
[6,4,"Distribution"],
[4,81,"The distribution to install in the image. Takes one of the following     arguments: fedora, debian, kali, ubuntu, arch, opensuse,     mageia, centos, rhel, rhel-ubi, openmandriva, rocky, alma,     azure or custom. If not specified, defaults to the distribution of     the host or custom if the distribution of the host is not a supported     distribution.","mkosi.1.md#distribution-section"],
[4,82,"The release of the distribution to install in the image. The precise     syntax of the argument this takes depends on the distribution used,     and is either a numeric string (in case of Fedora Linux, CentOS, …,     e.g. 29), or a distribution version name (in case of Debian, Kali,     Ubuntu, …, e.g. artful). Defaults to a recent version of the chosen     distribution, or the version of the distribution running on the host     if it matches the configured distribution.","mkosi.1.md#distribution-section"],
[4,83,"The architecture to build the image for. The architectures that are     actually supported depends on the distribution used and whether a     bootable image is requested or not. When building for a foreign     architecture, you'll also need to install and register a user mode     emulator for that architecture.\n\n    One of the following architectures can be specified per image built:\n    `alpha`, `arc`, `arm`, `arm64`, `ia64`, `loongarch64`, `mips64-le`,\n    `mips-le`, `parisc`, `ppc`, `ppc64`, `ppc64-le`, `riscv32`, `riscv64`,\n    `s390`, `s390x`, `tilegx`, `x86`, `x86-64`.","mkosi.1.md#distribution-section"],
[4,84,"The mirror to use for downloading the distribution packages. Expects     a mirror URL as argument. If not provided, the default mirror for the     distribution is used.\n\n    The default mirrors for each distribution are as follows (unless\n    specified, the same mirror is used for all architectures):\n\n    |                | x86-64                            | aarch64                        |\n    |----------------|-----------------------------------|--------------------------------|\n    | `debian`       | http://deb.debian.org/debian      |                                |\n    | `arch`         | https://geo.mirror.pkgbuild.com   | http://mirror.archlinuxarm.org |\n    | `opensuse`     | http://download.opensuse.org      |                                |\n    | `kali`         | http://http.kali.org/kali         |                                |\n    | `ubuntu`       | http://archive.ubuntu.com         | http://ports.ubuntu.com        |\n    | `centos`       | https://mirrors.centos.org        |                                |\n    | `rocky`        | https://mirrors.rockylinux.org    |                                |\n    | `alma`         | https://mirrors.almalinux.org     |                                |\n    | `fedora`       | https://mirrors.fedoraproject.org |                                |\n    | `rhel-ubi`     | https://cdn-ubi.redhat.com        |                                |\n    | `mageia`       | https://www.mageia.org            |                                |\n    | `openmandriva` | http://mirrors.openmandriva.org   |                                |\n    | `azure`        | https://packages.microsoft.com/   |                                |","mkosi.1.md#distribution-section"],
[4,85,"The mirror will be used as a local, plain and direct mirror instead     of using it as a prefix for the full set of repositories normally supported     by distributions. Useful for fully offline builds with a single repository.     Supported on deb/rpm/arch based distributions. Overrides --mirror= but only     for the local mkosi build, it will not be configured inside the final image,     --mirror= (or the default repository) will be configured inside the final     image instead.","mkosi.1.md#distribution-section"],
[4,86,"Controls signature/key checks when using repositories, enabled by default.     Useful to disable checks when combined with --local-mirror= and using only     a repository from a local filesystem.","mkosi.1.md#distribution-section"],
[4,87,"Controls whether mkosi will fetch distribution GPG keys remotely. Enabled by     default on Ubuntu when not using a tools tree or when using Ubuntu tools trees to build     rpm based distributions. Disabled by default on all other distributions. When disabled,     the distribution GPG keys for the target distribution have to be installed locally on the     host system alongside the package manager for that distribution.\n\n    This setting is only implemented for distributions using dnf or zypper as their\n    package manager. For other distributions the distribution GPG keys are always looked\n    up locally regardless of the value of this setting. To make the distribution GPG keys\n    for distributions available without enabling this setting, the corresponding package\n    has to be installed on the host. This is usually one of `archlinux-keyring`,\n    `debian-keyring`, `kali-archive-keyring`, `ubuntu-keyring` or `distribution-gpg-keys`\n    (for rpm-based distributions).","mkosi.1.md#distribution-section"],
[4,88,"Enable package repositories that are disabled by default. This can be used to enable the EPEL repos for     CentOS or different components of the Debian/Kali/Ubuntu repositories.","mkosi.1.md#distribution-section"],
[2,"Architecture",[],83,1,4],
[2,"Distribution",[],81,1,4],
[2,"LocalMirror",[],85,1,4],
[2,"Mirror",[],84,1,4],
[2,"Release",[],82,1,4],
[2,"Repositories",[],88,1,4],
[2,"RepositoryKeyCheck",[],86,1,4],
[2,"RepositoryKeyFetch",[],87,1,4],
[6,5,"Include"],
[4,89,"Include extra configuration from the given file or directory. The     extra configuration is included immediately after parsing the setting,     except when used on the command line, in which case the extra     configuration is included after parsing all command line arguments.\n\n    Note that each path containing extra configuration is only parsed\n    once, even if included more than once with `Include=`.\n\n    The builtin configs for the mkosi default initrd, default tools tree\n    and default virtual machine image can be included by including the\n    literal value `mkosi-initrd`, `mkosi-tools` or `mkosi-vm`\n    respectively.\n\n    Note: Include names starting with either of the literals `mkosi-` or\n    `contrib-` are reserved for use by mkosi itself.","mkosi.1.md#include"],
[2,"Include",[],89,1,5],
[6,6,"Match"],
[4,90,"Matches against the configured profiles.","mkosi.1.md#match-section"],
[4,91,"Matches against the configured distribution.","mkosi.1.md#match-section"],
[4,92,"Matches against the configured distribution release. If this condition is used and no distribution has been     explicitly configured yet, the host distribution and release are used.","mkosi.1.md#match-section"],
[4,93,"Matches against the configured architecture. If this condition is used     and no architecture has been explicitly configured yet, the host     architecture is used.","mkosi.1.md#match-section"],
[4,94,"Matches against repositories enabled with the Repositories= setting.     Takes a single repository name.","mkosi.1.md#match-section"],
[4,95,"This condition is satisfied if the given path exists. Relative paths are interpreted relative to the parent     directory of the config file that the condition is read from.","mkosi.1.md#match-section"],
[4,96,"Matches against the configured image ID, supporting globs. If this condition is used and no image ID has     been explicitly configured yet, this condition fails.","mkosi.1.md#match-section"],
[4,97,"Matches against the configured image version. Image versions can be prepended by the operators ==, !=,     >=, <=, <, > for rich version comparisons according to the UAPI group version format specification.     If no operator is prepended, the equality operator is assumed by default. If this condition is used and no     image version has been explicitly configured yet, this condition fails.","mkosi.1.md#match-section"],
[4,98,"Matches against the configured value for the Bootable= feature. Takes a boolean value or auto.","mkosi.1.md#match-section"],
[4,99,"Matches against the configured value for the Format= option. Takes     an output format (see the Format= option).","mkosi.1.md#match-section"],
[4,100,"Matches against the systemd version on the host (as reported by     systemctl --version). Values can be prepended by the operators ==,     !=, >=, <=, <, > for rich version comparisons according to     the UAPI group version format specification. If no operator is     prepended, the equality operator is assumed by default.","mkosi.1.md#match-section"],
[4,101,"Takes a build source target path (see BuildSources=). This match is     satisfied if any of the configured build sources uses this target     path. For example, if we have a mkosi.conf file containing:\n\n    ```ini\n    [Build]\n    BuildSources=../abc/qed:kernel\n    ```\n\n    and a drop-in containing:\n\n    ```ini\n    [Match]\n    BuildSources=kernel\n    ```\n\n    The drop-in will be included.\n\n    Any absolute paths passed to this setting are interpreted relative to\n    the current working directory.","mkosi.1.md#match-section"],
[4,102,"Matches against the host's native architecture. See the     Architecture= setting for a list of possible values.","mkosi.1.md#match-section"],
[4,103,"Matches against the configured tools tree distribution.","mkosi.1.md#match-section"],
[4,104,"Matches against a specific key/value pair configured with     Environment=. If no value is provided, check if the given key is in     the environment regardless of which value it has.\n\nThis table shows which matchers support globs, rich comparisons and the default\nvalue that is matched against if no value has been configured at the time the\nconfig file is read:\n\n| Matcher                  | Globs | Rich Comparisons | Default                                                                                |\n|--------------------------|-------|------------------|----------------------------------------------------------------------------------------|\n| `Profiles=`              | no    | no               | match fails                                                                            |\n| `Distribution=`          | no    | no               | match host distribution                                                                |\n| `Release=`               | no    | no               | match host release                                                                     |\n| `Architecture=`          | no    | no               | match host architecture                                                                |\n| `PathExists=`            | no    | no               | n/a                                                                                    |\n| `ImageId=`               | yes   | no               | match fails                                                                            |\n| `ImageVersion=`          | no    | yes              | match fails                                                                            |\n| `Bootable=`              | no    | no               | match auto feature                                                                     |\n| `Format=`                | no    | no               | match default format                                                                   |\n| `SystemdVersion=`        | no    | yes              | n/a                                                                                    |\n| `BuildSources=`          | no    | no               | match fails                                                                            |\n| `HostArchitecture=`      | no    | no               | n/a                                                                                    |\n| `ToolsTreeDistribution=` | no    | no               | match the fallback tools tree distribution (see `ToolsTreeDistribution=` in `[Build]`) |\n| `Environment=`           | no    | no               | n/a                                                                                    |","mkosi.1.md#match-section"],
[2,"Architecture",[],93,1,6],
[2,"Bootable","B",98,1,6],
[2,"BuildSources",[],101,1,6],
[2,"Distribution",[],91,1,6],
[2,"Environment",[],104,1,6],
[2,"Format",[],99,1,6],
[2,"HostArchitecture",[],102,1,6],
[2,"ImageId",[],96,1,6],
[2,"ImageVersion",[],97,1,6],
[2,"PathExists",[],95,1,6],
[2,"Profiles",[],90,1,6],
[2,"Release",[],92,1,6],
[2,"Repositories",[],94,1,6],
[2,"SystemdVersion",[],100,1,6],
[2,"ToolsTreeDistribution",[],103,1,6],
[6,7,"Output"],
[4,105,"The image format type to generate. One of directory (for generating     an OS image directly in a local directory), tar (similar, but a     tarball of the OS image is generated), cpio (similar, but a cpio     archive is generated), disk (a block device OS image with a GPT     partition table), uki (a unified kernel image with the OS image in     the .initrd PE section), esp (uki but wrapped in a disk image     with only an ESP partition), oci (a directory compatible with the     OCI image specification), sysext, confext, portable,     initrd-addon or none (the OS image is solely intended as a build     image to produce another artifact).\n\n    If the `disk` output format is used, the disk image is generated using\n    `systemd-repart`. The repart partition definition files to use can be\n    configured using the `RepartDirectories=` setting or via\n    `mkosi.repart/`. When verity partitions are configured using\n    systemd-repart's `Verity=` setting, mkosi will automatically parse the\n    verity hash partition's roothash from systemd-repart's JSON output and\n    include it in the kernel command line of every unified kernel image\n    built by mkosi.\n\n    If the `none` output format is used, the outputs from a previous\n    build are not removed, but clean scripts (see `CleanScripts=`) are\n    still executed. This allows rerunning a build script\n    (see `BuildScripts=`) without removing the results of a previous\n    build.","mkosi.1.md#output-section"],
[4,106,"The manifest format type or types to generate. A comma-delimited     list consisting of json (the standard JSON output format that     describes the packages installed), changelog (a human-readable     text format designed for diffing). By default no manifest is     generated.","mkosi.1.md#output-section"],
[4,107,"Name to use for the generated output image file or directory. Defaults     to image or, if ImageId= is specified, it is used as the default     output name, optionally suffixed with the version set with     ImageVersion= or if a specific image is built from mkosi.images, the     name of the image is preferred over ImageId. Note that this option does     not allow configuring the output directory, use OutputDirectory= for that.\n\n    Note that this only specifies the output prefix, depending on the\n    specific output format, compression and image version used, the full\n    output name might be `image_7.8.raw.xz`.","mkosi.1.md#output-section"],
[4,108,"Configure compression for the resulting image or archive. The argument can be     either a boolean or a compression algorithm (xz, zstd). zstd     compression is used by default, except CentOS and derivatives up to version     8, which default to xz, and OCI images, which default to gzip.     Note that when applied to block device image types,     compression means the image cannot be started directly but needs to be     decompressed first. This also means that the shell, boot, qemu verbs     are not available when this option is used. Implied for tar, cpio, uki,     esp, and oci.","mkosi.1.md#output-section"],
[4,109,"Configure the compression level to use. Takes an integer. The possible     values depend on the compression being used.","mkosi.1.md#output-section"],
[4,110,"Path to a directory where to place all generated artifacts. If this is     not specified and the directory mkosi.output/ exists in the local     directory, it is automatically used for this purpose.","mkosi.1.md#output-section"],
[4,111,"File system access mode used when creating the output image file. Takes an     access mode in octal notation. If not set, uses the current system defaults.","mkosi.1.md#output-section"],
[4,112,"Configure the image version. This accepts any string, but it is     recommended to specify a series of dot separated components. The     version may also be configured by reading a mkosi.version file (in     which case it may be conveniently managed via the bump verb or the     --auto-bump option) or by reading stdout if it is executable (see     the Scripts section below). When specified the image version is     included in the default output file name, i.e. instead of image.raw     the default will be image_0.1.raw for version 0.1 of the image,     and similar. The version is also passed via the $IMAGE_VERSION to     any build scripts invoked (which may be useful to patch it into     /usr/lib/os-release or similar, in particular the IMAGE_VERSION=     field of it).","mkosi.1.md#output-section"],
[4,113,"Configure the image identifier. This accepts a freeform string that     shall be used to identify the image with. If set the default output     file will be named after it (possibly suffixed with the version). The     identifier is also passed via the $IMAGE_ID to any build scripts     invoked. The image ID is automatically added to /usr/lib/os-release.","mkosi.1.md#output-section"],
[4,114,"The artifact types to split out of the final image. A comma-delimited     list consisting of uki, kernel, initrd and partitions. When     building a bootable image kernel and initrd correspond to their     artifact found in the image (or in the UKI), while uki copies out the     entire UKI.\n\n    When building a disk image and `partitions` is specified,\n    pass `--split=yes` to systemd-repart to have it write out split partition\n    files for each configured partition. Read the\n    [man](https://www.freedesktop.org/software/systemd/man/systemd-repart.html#--split=BOOL)\n    page for more information. This is useful in A/B update scenarios where\n    an existing disk image shall be augmented with a new version of a\n    root or `/usr` partition along with its Verity partition and unified\n    kernel. By default `uki`, `kernel` and `initrd` are split out.","mkosi.1.md#output-section"],
[4,115,"Paths to directories containing systemd-repart partition definition     files that are used when mkosi invokes systemd-repart when building a     disk image. If mkosi.repart/ exists in the local directory, it will     be used for this purpose as well. Note that mkosi invokes repart with     --root= set to the root of the image root, so any CopyFiles=     source paths in partition definition files will be relative to the     image root directory.","mkosi.1.md#output-section"],
[4,116,"Override the default sector size that systemd-repart uses when building a disk     image.","mkosi.1.md#output-section"],
[4,117,"When used together with BaseTrees=, the output will consist only out of     changes to the specified base trees. Each base tree is attached as a lower     layer in an overlayfs structure, and the output becomes the upper layer,     initially empty. Thus files that are not modified compared to the base trees     will not be present in the final output.\n\n    This option may be used to create [systemd *system extensions* or\n    *portable services*](https://uapi-group.org/specifications/specs/extension_image).","mkosi.1.md#output-section"],
[4,118,"Takes a UUID as argument or the special value random.     Overrides the seed that systemd-repart(8)     uses when building a disk image. This is useful to achieve reproducible     builds, where deterministic UUIDs and other partition metadata should be     derived on each build. If not specified explicitly and the file mkosi.seed     exists in the local directory, the UUID to use is read from it. Otherwise,     a random UUID is used.","mkosi.1.md#output-section"],
[4,119,"Takes a comma-separated list of paths to executables that are used as     the clean scripts for this image. See the Scripts section for     more information.","mkosi.1.md#output-section"],
[2,"CleanScripts",[],119,1,7],
[2,"CompressLevel",[],109,1,7],
[2,"CompressOutput",[],108,1,7],
[2,"Format",[],105,1,7],
[2,"ImageId",[],113,1,7],
[2,"ImageVersion",[],112,1,7],
[2,"ManifestFormat",[],106,1,7],
[2,"Output",[],107,1,7],
[2,"OutputDirectory",[],110,1,7],
[2,"OutputMode",[],111,1,7],
[2,"Overlay",[],117,1,7],
[2,"RepartDirectories",[],115,1,7],
[2,"SectorSize",[],116,1,7],
[2,"Seed",[],118,1,7],
[2,"SplitArtifacts",[],114,1,7],
[6,8,"Runtime"],
[4,120,"Specifies a .nspawn settings file for systemd-nspawn to use in     the boot and shell verbs, and to place next to the generated     image file. This is useful to configure the systemd-nspawn     environment when the image is run. If this setting is not used but     an mkosi.nspawn file found in the local directory it is     automatically used for this purpose.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,121,"Configures the virtual machine monitor to use. Takes one of qemu or     vmspawn. Defaults to qemu.\n\n    When set to `qemu`, the image is booted with `qemu`. Most output\n    formats can be booted in `qemu`. Any arguments specified after the\n    verb are appended to the `qemu` invocation and are interpreted as\n    extra qemu command line arguments.\n\n    When set to `vmspawn`, `systemd-vmspawn` is used to boot up the image,\n    `vmspawn` only supports disk and directory type images. Any arguments\n    specified after the verb are appended to the `systemd-vmspawn`\n    invocation and are interpreted as extra vmspawn options and extra\n    kernel command line arguments.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,122,"If enabled, qemu is executed with its graphical interface instead of     with a serial console.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,123,"When used with the qemu verb, this options sets qemu's -smp     argument which controls the number of guest's CPUs. Defaults to 2.\n\n    When set to `0`, the number of CPUs available to the mkosi process\n    will be used.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,124,"When used with the qemu verb, this options sets qemu's -m     argument which controls the amount of guest's RAM. Defaults to 2G.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,125,"When used with the qemu verb, this option specifies whether QEMU should use KVM acceleration. Takes a     boolean value or auto. Defaults to auto.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,126,"When used with the qemu verb, this option specifies whether QEMU should be configured with a vsock. Takes     a boolean value or auto. Defaults to auto.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,127,"When used with the qemu verb, this option specifies the vsock     connection ID to use. Takes a number in the interval [3, 0xFFFFFFFF)     or hash or auto. Defaults to auto. When set to hash, the     connection ID will be derived from the full path to the image. When     set to auto, mkosi will try to find a free connection ID     automatically. Otherwise, the provided number will be used as is.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,128,"When used with the qemu verb, this option specifies whether to start an instance of swtpm to be used as a     TPM with qemu. This requires swtpm to be installed on the host. Takes a boolean value or auto. Defaults     to auto.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,129,"When used with the qemu verb, this option specifies whether to     attach the image to the virtual machine as a CD-ROM device. Takes a     boolean. Defaults to no.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,130,"When used with the qemu verb, this option specifies whether to attach the image to the virtual machine     as a removable device. Takes a boolean. Defaults to no.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,131,"When used with the qemu verb, this option specifies which firmware     to use. Takes one of uefi, uefi-secure-boot, bios, linux, or     auto. Defaults to auto. When set to uefi, the OVMF firmware     without secure boot support is used. When set to uefi-secure-boot,     the OVMF firmware with secure boot support is used. When set to     bios, the default SeaBIOS firmware is used. When set to linux,     direct kernel boot is used. See the QemuKernel= option for more     details on which kernel image is used with direct kernel boot. When     set to auto, uefi-secure-boot is used if possible and linux     otherwise.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,132,"When used with the qemu verb, this option specifies the path to the     the firmware variables file to use. Currently, this option is only     taken into account when the uefi or uefi-secure-boot firmware is     used. If not specified, mkosi will search for the default variables     file and use that instead.\n\n    When set to `microsoft`, a firmware variables file with the Microsoft\n    secure boot certificates already enrolled will be used.\n\n    When set to `custom`, the secure boot certificate from\n    `SecureBootCertificate=` will be enrolled into the default firmware\n    variables file.\n\n    `virt-fw-vars` from the\n    [virt-firmware](https://gitlab.com/kraxel/virt-firmware) project can\n    be used to customize OVMF variable files.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,133,"Set the kernel image to use for qemu direct kernel boot. If not     specified, mkosi will use the kernel provided via the command line     (-kernel option) or latest the kernel that was installed into     the image (or fail if no kernel was installed into the image).\n\n    Note that when the `cpio` output format is used, direct kernel boot is\n    used regardless of the configured firmware. Depending on the\n    configured firmware, qemu might boot the kernel itself or using the\n    configured firmware.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,134,"Add a qemu drive. Takes a colon-delimited string of format     <id>:<size>[:<directory>[:<options>[:<file-id>]]]. id specifies     the qemu ID assigned to the drive. This can be used as the drive=     property in various qemu devices. size specifies the size of the     drive. This takes a size in bytes. Additionally, the suffixes K, M     and G can be used to specify a size in kilobytes, megabytes and     gigabytes respectively. directory optionally specifies the directory     in which to create the file backing the drive. options optionally     specifies extra comma-delimited properties which are passed verbatim     to qemu's -drive option. file-id specifies the ID of the file     backing the drive. Drives with the same file ID will share the     backing file. The directory and size of the file will be determined     from the first drive with a given file ID.\n\n    **Example usage:**\n\n    ```ini\n    [Runtime]\n    QemuDrives=btrfs:10G\n               ext4:20G\n    QemuArgs=-device nvme,serial=btrfs,drive=btrfs\n             -device nvme,serial=ext4,drive=ext4\n    ```","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,135,"Space-delimited list of additional arguments to pass when invoking     qemu.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,136,"When used with the shell, boot, or qemu verbs, this option runs the specified verb on a temporary     snapshot of the output image that is removed immediately when the container terminates. Taking the     temporary snapshot is more efficient on file systems that support reflinks natively (btrfs or xfs)     than on more traditional file systems that do not (ext4).","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,137,"Set credentials to be passed to systemd-nspawn or qemu respectively     when mkosi shell/boot or mkosi qemu are used. This option takes a     space separated list of values which can be either key=value pairs or     paths. If a path is provided, if it is a file, the credential name     will be the name of the file. If the file is executable, the     credential value will be the output of executing the file. Otherwise,     the credential value will be the contents of the file. If the path is     a directory, the same logic applies to each file in the directory.\n\n    Note that values will only be treated as paths if they do not contain\n    the delimiter (`=`).","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,138,"Set extra kernel command line entries that are appended to the kernel command     line at runtime when booting the image. When booting in a container, these are     passed as extra arguments to systemd. When booting in a VM, these are appended     to the kernel command line via the SMBIOS io.systemd.stub.kernel-cmdline-extra     OEM string. This will only be picked up by systemd-boot/systemd-stub versions     newer than or equal to v254.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,139,"Takes a colon separated pair of paths. The first path refers to a     directory to mount into any machine (container or VM) started by     mkosi. The second path refers to the target directory inside the     machine. If the second path is not provided, the directory is mounted     at /root/src in the machine. If the second path is relative, it     is interpreted relative to /root/src in the machine.\n\n    For each mounted directory, the uid and gid of the user running mkosi\n    are mapped to the root user in the machine. This means that all the\n    files and directories will appear as if they're owned by root in the\n    machine, and all new files and directories created by root in the\n    machine in these directories will be owned by the user running mkosi\n    on the host.\n\n    Note that when using `mkosi qemu` with this feature systemd v254 or\n    newer has to be installed in the image.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,140,"If specified, disk images are grown to the specified size when     they're booted with mkosi boot or mkosi qemu. Takes a size in     bytes. Additionally, the suffixes K, M and G can be used to     specify a size in kilobytes, megabytes and gigabytes respectively.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,141,"Takes a boolean value or auto. Specifies whether to mount extra     scratch space to /var/tmp. If enabled, practically unlimited scratch     space is made available under /var/tmp when booting the image with     mkosi qemu, mkosi boot or mkosi shell.\n\n    Note that using this feature with `mkosi qemu` requires systemd v254\n    or newer in the guest.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,142,"Takes one of user, interface or none. Defaults to user.     Specifies the networking to set up when booting the image. user sets     up usermode networking. interface sets up a virtual network     connection between the host and the image. This translates to a veth     interface for mkosi shell and mkosi boot and a tap interface for     mkosi qemu and mkosi vmspawn.\n\n    Note that when using `interface`, mkosi does not automatically\n    configure the host interface. It is expected that a recent version of\n    `systemd-networkd` is running on the host which will automatically\n    configure the host interface of the link.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,143,"Mount the build sources configured with BuildSources= and the build     directory (if one is configured) to the same locations in /work that     they were mounted to when running the build script when using mkosi     boot or mkosi qemu.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,144,"Mount the current home directory from which mkosi is running to     /root when using mkosi boot or mkosi qemu.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,145,"Configure systemd unit properties to add to the systemd scopes     allocated when using mkosi boot or mkosi qemu. These are passed     directly to the --property options of systemd-nspawn and     systemd-run respectively.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,146,"Path to the X509 private key in PEM format to use to connect to a     virtual machine started with mkosi qemu and built with the Ssh=     option enabled via the mkosi ssh command. If not configured and     mkosi.key exists in the working directory, it will automatically be     used for this purpose. Run mkosi genkey to automatically generate     a key in mkosi.key.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,147,"Path to the X509 certificate in PEM format to provision as the SSH     public key in virtual machines started with mkosi qemu.  If not     configured and mkosi.crt exists in the working directory, it will     automatically be used for this purpose. Run mkosi genkey to     automatically generate a certificate in mkosi.crt.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,148,"Specify the machine name to use when booting the image. Can also be     used to refer to a specific image when SSH-ing into an image (e.g.     mkosi --image=myimage ssh).\n\n    Note that `Ephemeral=` has to be enabled to start multiple instances\n    of the same image.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,149,"Specify the path to which journal logs from containers and virtual     machines should be forwarded. If the path has the .journal     extension, it is interpreted as a file to which the journal should be     written. Otherwise, the path is interpreted as a directory to which     the journal should be written.\n\n    Note that systemd v256 or newer is required in the virtual machine for\n    log forwarding to work.\n\n    Note that if a path with the `.journal` extension is given, the\n    journal size is limited to `4G`. Configure an output directory instead\n    of file if your workload produces more than `4G` worth of journal\n    data.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[4,150,"Path to a directory containing systemd-sysupdate transfer definition     files that are used by mkosi sysupdate. If mkosi.sysupdate/     exists in the local directory, it will be used for this purpose as     well.\n\n    Note that `mkosi sysupdate` invokes `systemd-sysupdate` with\n    `--transfer-source=` set to the mkosi output directory. To make use\n    of this in a transfer definition file, set `PathRelativeTo=explicit`\n    to have the `Path=` setting for the transfer source be interpreted\n    relative to the mkosi output directory. Generally, configuring\n    `PathRelativeTo=explicit` and `Path=/` for the transfer source is\n    sufficient for the match pattern to be interpreted relative to the\n    mkosi output directory.","mkosi.1.md#runtime-section-previously-known-as-the-host-section"],
[2,"Credentials",[],137,1,8],
[2,"Ephemeral",[],136,1,8],
[2,"ForwardJournal",[],149,1,8],
[2,"KernelCommandLineExtra",[],138,1,8],
[2,"Machine",[],148,1,8],
[2,"NSpawnSettings",[],120,1,8],
[2,"QemuArgs",[],135,1,8],
[2,"QemuCdrom","b",129,1,8],
[2,"QemuDrives",[],134,1,8],
[2,"QemuFirmware",[],131,1,8],
[2,"QemuFirmwareVariables",[],132,1,8],
[2,"QemuGui",[],122,1,8],
[2,"QemuKernel",[],133,1,8],
[2,"QemuKvm","B",125,1,8],
[2,"QemuMem",[],124,1,8],
[2,"QemuRemovable","b",130,1,8],
[2,"QemuSmp",[],123,1,8],
[2,"QemuSwtpm","B",128,1,8],
[2,"QemuVsock","B",126,1,8],
[2,"QemuVsockConnectionId",[],127,1,8],
[2,"RuntimeBuildSources",[],143,1,8],
[2,"RuntimeHome",[],144,1,8],
[2,"RuntimeNetwork",[],142,1,8],
[2,"RuntimeScratch","B",141,1,8],
[2,"RuntimeSize",[],140,1,8],
[2,"RuntimeTrees",[],139,1,8],
[2,"SshCertificate",[],147,1,8],
[2,"SshKey",[],146,1,8],
[2,"SysupdateDirectory",[],150,1,8],
[2,"UnitProperties",[],145,1,8],
[2,"VirtualMachineMonitor",[],121,1,8],
[6,9,"UKIProfile"],
[4,151,"The contents of the .profile section of the UKI profile. Takes a     list of key/value pairs separated by =. The ID= key must be     specified. See the UKI specification     for a full list of possible keys.","mkosi.1.md#ukiprofile-section"],
[4,152,"Extra kernel command line options for the UKI profile. Takes a space     delimited list of extra kernel command line arguments. Note that     the final .cmdline section will the combination of the base     .cmdline section and the extra kernel command line arguments     specified with this setting.","mkosi.1.md#ukiprofile-section"],
[2,"Cmdline",[],152,1,9],
[2,"Profile",[],151,1,9],
[6,10,"Validation"],
[4,153,"Sign systemd-boot (if it is not signed yet) and any generated     unified kernel images for UEFI SecureBoot.","mkosi.1.md#validation-section"],
[4,154,"Set up automatic enrollment of the secure boot keys in virtual machines as     documented in the systemd-boot     man page     if SecureBoot= is used.     Note that systemd-boot will only do automatic secure boot key     enrollment in virtual machines starting from systemd v253. To do auto     enrollment on systemd v252 or on bare metal machines, write a     systemd-boot configuration file to /efi/loader/loader.conf using an     extra tree with secure-boot-enroll force or     secure-boot-enroll manual in it. Auto enrollment is not supported on     systemd versions older than v252. Defaults to yes.","mkosi.1.md#validation-section"],
[4,155,"Path to the PEM file containing the secret key for signing the     UEFI kernel image if SecureBoot= is used and PCR signatures when     SignExpectedPcr= is also used. When SecureBootKeySource= is specified,     the input type depends on the source.","mkosi.1.md#validation-section"],
[4,156,"Path to the X.509 file containing the certificate for the signed     UEFI kernel image, if SecureBoot= is used.","mkosi.1.md#validation-section"],
[4,157,"Tool to use to sign secure boot PE binaries. Takes one of systemd-sbsign, sbsign, pesign or auto.     Defaults to auto. If set to auto, either systemd-sbsign, sbsign or pesign are used if     available, with systemd-sbsign being preferred.","mkosi.1.md#validation-section"],
[4,158,"Whether to enforce or disable signed verity for extension images.     Takes a boolean value or auto. If enabled, a verity key and     certificate must be present and the build will fail if we don't     detect any verity partitions in the disk image produced by     systemd-repart. If disabled, verity partitions will be excluded from     the extension images produced by systemd-repart. If set to auto and     a verity key and certificate are present, mkosi will pass them to systemd-repart     and expects the generated disk image to contain verity partitions,     but the build won't fail if no verity partitions are found in the     disk image produced by systemd-repart.\n\n    Note that explicitly disabling signed verity is not yet implemented\n    for the `disk` output and only works for extension images at the\n    moment.","mkosi.1.md#validation-section"],
[4,159,"Path to the PEM file containing the secret key for signing the verity signature, if a verity signature     partition is added with systemd-repart. When VerityKeySource= is specified, the input type depends on     the source.","mkosi.1.md#validation-section"],
[4,160,"Path to the X.509 file containing the certificate for signing the verity signature, if a verity signature     partition is added with systemd-repart.","mkosi.1.md#validation-section"],
[4,161,"Measure the components of the unified kernel image (UKI) using     systemd-measure and embed the PCR signature into the unified kernel     image. This option takes a boolean value or the special value auto,     which is the default, which is equal to a true value if the     systemd-measure binary is in PATH.  Depends on SecureBoot=     being enabled and key from SecureBootKey=.","mkosi.1.md#validation-section"],
[4,162,"Path to the PEM file containing the secret key for signing the expected PCR signatures.     When SignExpectedPcrKeySource= is specified, the input type depends on     the source.","mkosi.1.md#validation-section"],
[4,163,"Path to the X.509 file containing the certificate for signing the expected PCR signatures.","mkosi.1.md#validation-section"],
[4,164,"The source of the corresponding private key, to support OpenSSL engines and providers,     e.g. --secure-boot-key-source=engine:pkcs11 or --secure-boot-key-source=provider:pkcs11.","mkosi.1.md#validation-section"],
[4,165,"The source of the corresponding certificate, to support OpenSSL providers,     e.g. --secure-boot-certificate-source=provider:pkcs11. Note that engines are not supported.","mkosi.1.md#validation-section"],
[4,166,"Specify the path to a file containing the passphrase to use for LUKS     encryption. It should contain the passphrase literally, and not end in     a newline character (i.e. in the same format as cryptsetup and     /etc/crypttab expect the passphrase files). The file must have an     access mode of 0600 or less.","mkosi.1.md#validation-section"],
[4,167,"Generate a SHA256SUMS file of all generated artifacts after the     build is complete.","mkosi.1.md#validation-section"],
[4,168,"Sign the generated SHA256SUMS using gpg after completion.","mkosi.1.md#validation-section"],
[4,169,"OpenPGP implementation to use for signing. gpg is the default.     Selecting a value different than the default will use the given Stateless     OpenPGP (SOP) tool for signing the SHA256SUMS file.\n\n    Exemplary choices are `sqop` and `rsop`, but any implementation from\n    https://www.openpgp.org/about/sop/ that can be installed locally will work.","mkosi.1.md#validation-section"],
[4,170,"Select the gpg key to use for signing SHA256SUMS. This key must     be already present in the gpg keyring.","mkosi.1.md#validation-section"],
[2,"Checksum",[],167,1,10],
[2,"Key",[],170,1,10],
[2,"OpenPGPTool",[],169,1,10],
[2,"Passphrase",[],166,1,10],
[2,"SecureBoot",[],153,1,10],
[2,"SecureBootAutoEnroll",[],154,1,10],
[2,"SecureBootCertificate",[],156,1,10],
[2,"SecureBootCertificateSource",[],165,1,10],
[2,"SecureBootKey",[],155,1,10],
[2,"SecureBootKeySource",[],164,1,10],
[2,"SecureBootSignTool",[],157,1,10],
[2,"Sign",[],168,1,10],
[2,"SignExpectedPcr","b",161,1,10],
[2,"SignExpectedPcrCertificate",[],163,1,10],
[2,"SignExpectedPcrCertificateSource",[],165,1,10],
[2,"SignExpectedPcrKey",[],162,1,10],
[2,"SignExpectedPcrKeySource",[],164,1,10],
[2,"Verity","B",158,1,10],
[2,"VerityCertificate",[],160,1,10],
[2,"VerityCertificateSource",[],165,1,10],
[2,"VerityKey",[],159,1,10],
[2,"VerityKeySource",[],164,1,10]
]